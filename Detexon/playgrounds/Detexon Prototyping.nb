(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='WolframDesktop 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       161,          7]
NotebookDataLength[   2003373,      38640]
NotebookOptionsPosition[   1992803,      38456]
NotebookOutlinePosition[   1993157,      38472]
CellTagsIndexPosition[   1993114,      38469]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["One-off file processing", "Chapter",
 CellChangeTimes->{{3.7396348904382067`*^9, 
  3.739634893923623*^9}},ExpressionUUID->"bf92ff2c-a443-461a-a900-\
6af6e64d68fe"],

Cell[CellGroupData[{

Cell["Figure out how to convert python to WL", "Section",
 CellChangeTimes->{{3.7396351639631042`*^9, 
  3.73963517082025*^9}},ExpressionUUID->"da0ad7c8-ca1a-49f8-8308-\
01d85a6fa9f2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ds2", "=", 
   RowBox[{
   "ImportSequenceFile", "[", 
    "\"\</Users/sumner/Programming/Detexon/data/dataset_min_50_max_250_pad_\
300_random_85000/1.tsv\>\"", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.739619546506727*^9, 3.7396195587579536`*^9}},
 CellLabel->
  "In[273]:=",ExpressionUUID->"c910dcee-6712-4f54-8b8f-e9a81dfe806d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ds2", "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "\"\<Output\>\""}], "]"}], "]"}], "//", "Normal"}], "//",
   "Dimensions"}]], "Input",
 CellChangeTimes->{{3.7396268609146214`*^9, 3.7396268621863537`*^9}, {
  3.739626920574071*^9, 3.739626924061284*^9}, {3.739627007055354*^9, 
  3.739627016668964*^9}},
 CellLabel->
  "In[276]:=",ExpressionUUID->"979ea97c-c917-489f-98aa-294638522b1b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"300", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7396268627638063`*^9, {3.739627012444778*^9, 3.739627016971904*^9}},
 CellLabel->
  "Out[276]=",ExpressionUUID->"709a849f-2ade-41ac-b422-37c8520755d8"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "f", "=", 
   "\"\</Users/sumner/Programming/Detexon/data/dataset_min_50_max_250_pad_300_\
random_85000/0.tsv\>\""}], ";"}]], "Input",
 CellChangeTimes->{{3.73945738896647*^9, 3.739457447157413*^9}, {
  3.739612011948556*^9, 3.739612017469262*^9}, {3.7396192404383507`*^9, 
  3.739619247428669*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"94e1116c-354d-4d39-8016-8825254f27b3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"tsv", "=", 
   RowBox[{"Import", "@", "f"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.739457448733182*^9, 3.739457452861515*^9}, {
  3.739457541579014*^9, 3.739457542047839*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"c9600c63-2d98-443e-8286-e2eba276180c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"header", "=", 
   RowBox[{"First", "@", "tsv"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Rest", "@", "tsv"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7394574609330673`*^9, 3.73945747355112*^9}, {
  3.739457543764916*^9, 3.7394575443776827`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"9d038370-13ee-45dc-836a-ae8119005f4f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"fromPythonList", "[", "listString_", "]"}], ":=", 
   RowBox[{"ToExpression", "[", 
    RowBox[{"StringReplace", "[", 
     RowBox[{"listString", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<[\>\"", "\[Rule]", "\"\<{\>\""}], ",", 
        RowBox[{"\"\<]\>\"", "\[Rule]", "\"\<}\>\""}]}], "}"}]}], "]"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7394577418288307`*^9, 3.739457772951035*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"0655ee3b-dc09-46cc-8dc2-d35b95315ca6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ds", "=", 
   RowBox[{"Dataset", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"AssociationThread", "[", 
       RowBox[{"header", ",", "#"}], "]"}], "&"}], "/@", "data"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.739457476016553*^9, 3.739457555696291*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"443827af-99b0-43db-b818-b5bb361e6792"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"imgs", "=", 
   RowBox[{"(*", 
    RowBox[{"Image", "/@"}], "*)"}], 
   RowBox[{"Transpose", "/@", 
    RowBox[{"fromPythonList", "/@", 
     RowBox[{"Normal", "[", 
      RowBox[{"ds", "[", 
       RowBox[{"All", ",", "\"\<img\>\""}], "]"}], "]"}]}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pimgs", "=", 
   RowBox[{"(*", 
    RowBox[{"Image", "/@"}], "*)"}], 
   RowBox[{"Transpose", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"fromPythonList", "/@", 
        RowBox[{"Normal", "[", 
         RowBox[{"ds", "[", 
          RowBox[{"All", ",", "\"\<prob_img\>\""}], "]"}], "]"}]}], ")"}], 
      "[", 
      RowBox[{"[", 
       RowBox[{";;", ",", ";;", ",", "1", ",", ";;"}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.739457557426098*^9, 3.739457653932516*^9}, {
   3.739457688279396*^9, 3.7394576902529173`*^9}, {3.739457786825992*^9, 
   3.739457794730713*^9}, {3.739457865638915*^9, 3.7394578874763947`*^9}, {
   3.7394627911290617`*^9, 3.739462804379106*^9}, 3.739621255951357*^9, {
   3.73962825696251*^9, 3.73962826086405*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"2f5ced23-00ca-4675-a7f0-d07f3a6e0fdb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"pimgs", "//", "First"}], "//", "Dimensions"}]], "Input",
 CellChangeTimes->{{3.7396282314060383`*^9, 3.739628234509327*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"717fee32-50d4-4479-b17e-a5452bf86abe"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"300", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.739628234813092*^9, 3.739628269182461*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"2e68c552-e1a2-4927-8ea9-326d8c4343a4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"imgAssoc", "=", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{
     RowBox[{"Image", "/@", "imgs"}], ",", 
     RowBox[{"Image", "/@", "pimgs"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"imgAssoc", "[", 
  RowBox[{"[", 
   RowBox[{"1", ";;", "4"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.739457988815748*^9, 3.739458062060975*^9}, {
  3.739458114852611*^9, 3.739458147395536*^9}, {3.739612122113371*^9, 
  3.739612144681025*^9}, {3.7396129218228292`*^9, 3.739612931957839*^9}},
 CellLabel->
  "In[211]:=",ExpressionUUID->"dbf52517-3102-4cc7-9cc7-afb465ea2aa9"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJzdWEsKwkAMrSLiNdy7FLfiFfQEFepKEHQh3toj2C7cjJTJ572Z2Ada2pkk
L5nJJO36fDte5k3TPFb937F9Hu739nVaDjdde91tu2Fw0f82sybBe2+7t8qx
9aaIyjeaH2P2tPfR4yyFVM6qX6oXrR/ll3YfofzQ2kmfj11z86U8pDxzcl4/
Uby864aOo3T9tNDKeeOt5cOui9r95PXLen5ozy/v+qDyDFWHvXZQ/Fh8rXIo
P6W8avVHLH5euXQclSc5vVo/rPq9dadUvqDiUqpvY8ux6rNU3nveoeoyez29
+tHy3nMiZ0f6XArt+YS2PwbruqDiWhpReLAwdf+mCm/dR9m31jOvXet4Og/N
t1ZcrGD1B6y4osZL97PeelmbR5T9y44jqy/5l34nRVReKJTKSzam4scX0fnl
8C/1Xwr2e2bt+JTuV3JyrO9Q2v6Yhaj6S31Hq5U3UeuEdV+y8wT9nv07/wN3
7WtT
       "], {{0, 4}, {300, 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Real", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{300, 4},
     PlotRange->{{0, 300}, {0, 4}}], "\[Rule]", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJzt2LEJgDAQQNFTQVzD3lJsxRXiBBeIlSDEQrJ1RjDZQU3hf3D5hJsg6e1h
tlpEzi4dRq/Few1rmy9O92l0edmkGSr5WJwppfRfBQAAAAA8g3ccALyj9P8Z
pbREbz9Da1I=
       "], {{0, 3}, {300, 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Real", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{300, 3},
     PlotRange->{{0, 300}, {0, 3}}]}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJztWEsKwkAMrSLiNdy7FLfiFeoJKtSVINSFeGuPYN0WhkleXjLj54GKnfYl
zbxkMrM+XdvzvGma22r8arv7YRi6x3H5/tN3l922fw8uxs9m1jjhufe9P5pv
yjv99eLXjntjatd73qT87PtYKD1fKGrzl11Pan8/aR1A+a2w8pXKVzRupeP9
K/jHzRe59TVqfWfVj1r1Ums/8i2Ijm9Kb6X6yVp4vPhQXu++xMufqH6KDdSu
t79R8Sidj5+2z5kC9R/dF3mPS59D64LX/qW0jqTnXVI/tXFj6yznl7Z/terF
aj/Fp70unRdUD17nJeh5LNuu1E7UeZJVv+x9nDV+2jrBzsvagea3NF+1ec/W
LeqnV1xY9Q5dN3N86Pvl7EbXq6j81M4DGr+UPbRuW9exHB96XQs0rlb7pXTk
zYfWLenzqJ+s/GX1Yyz/2PpB8y2670P1JLVr1bH0OWs9TvmbG2fXLzQeUjso
WHURnSf9+74A+RJrUw==
       "], {{0, 4}, {300, 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Real", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{300, 4},
     PlotRange->{{0, 300}, {0, 4}}], "\[Rule]", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJzt17EJgDAQQNFTQVzD3lJsxRXiBBeIlSDEQtzaEUxWsAkn/8HlE64PpPeH
22oRObt0OL2WGPVe23wJuk9jyMsmzVAJPnlmSim1XQAAAACwpvQ/yloBwLrS
7yil/+4LD/hrUg==
       "], {{0, 3}, {300, 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Real", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{300, 3},
     PlotRange->{{0, 300}, {0, 3}}]}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJzlWEsKwkAMrSLiNdy7FLfiFeoJKtSVIOhCvLVHsF24KQyZvLzMRH2g0Pkk
mSSTvHZ9urbnedM099Xw13aPw+3WPY/L8aHvLrttP04uht9m1gh47aUVeWDJ
YSGaPdFQyj+Snl+LU63zpPR+xqV5qx6tPV6Imk8sv03nUT+jcqxxLR3/KHUu
CqLcP6kulbIjit7o+WPtEygP8K4rtfgvyz/RwepD0n52//pWf0vQ3jOve1vb
v7X1W+HF29H1Wrne7yNedd27TqDya+dDqbqSCy9+OZVbirdoz4N+D0DlauV/
q3+k93Ctf7R8JFd/bt1Cvyto5afgxffQfEDPIcn1kqfdZ42H9jzWcWs8UX3o
utS+Uv0O1W8Fq+5Z9dbilV51KQX2/WHXc22fQnmFVp72Huf6RQJq57/5Jxds
//wKUD+w5Fr1pPZb44bmKYsns3gTCjZ/Zenz5pvWPsnKX+u4ZGeuPexndhy0
YPcntp2v/RvylGtT
       "], {{0, 4}, {300, 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Real", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{300, 4},
     PlotRange->{{0, 300}, {0, 4}}], "\[Rule]", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJzt1LEJgDAQQNHTgLiGvWWwFVeIE5wQK0GIhbi1I5gMIUryHySfI12K65bd
rbWIHG28nJ5TCHrNTRq8boP16dHE01cCoFj3SCmlefYvvv4HSml5ewcA3sa+
BQAAyMUDqm9o9A==
       "], {{0, 3}, {300, 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Real", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{300, 3},
     PlotRange->{{0, 300}, {0, 3}}]}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJzlWEEKwkAMrCLiN7x7FK/iF+oLKtSTINSD+GufYHsV1kySye4WA1q6zSbZ
bHaa6fZyb6/Lpmkem/Gv7Z6nYehe5/V003e3w76fHq7G327RGOV9/H0/F7uS
fe9zrWj9pdZhjRvNC2pPOz+3X61/a5yonVLr14pUP167uddlzXvqiuqn/KN1
gcadG8e0dkvVMUu067TmRcL/0nnU1ikLL9h2tf7Qeez90+JKatyKW6iw8K42
ie7/asVPaz8dFQe7L7M+R+2z+rxS/ATFHS2uzOXcs6SWft/bj8xlP6Nxwtvn
S+PWuCR91vcQST/Xe55Vz9p5qL+o7wzW/bPiOBpPaRzIvT+sPGvtePUkv+h8
tkS9Z6x1wcIx9vmI5iO1CYvHsupAig/VY/cn3vMSzau882vDr2j/0X3av0qu
PHh5sbfPk/xK41Y/kp6Xv+SSUrj+bcfKM9k8WGsvOg+5+LNVWPWj5RFo3UT1
NalxFj9j1QHq19qXsPmb5Nerh9ph8VcvXrH7ee8+p/19AAS3a1M=
       "], {{0, 4}, {300,
        0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Real", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{300, 4},
     PlotRange->{{0, 300}, {0, 4}}], "\[Rule]", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJzt2DEKgCAUgOFXQXSN9sZoja5gJ3iBTkJgQ3TrjpCeoDYJ/w/0R5wdfP22
G1eLyNHFzei5hKDX2qaDVT+NNl02cQ2VFOqeKf1fAQAAAAAoWe5/OXMA4F3u
d0MppfRrHweha1I=
       "], {{0, 3}, {300, 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Real", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{300, 3},
     PlotRange->{{0, 300}, {0, 3}}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.739458048671489*^9, 3.7394580623475723`*^9}, {
   3.7394581236900473`*^9, 3.739458148549005*^9}, 3.7396120592344227`*^9, {
   3.73961213383698*^9, 3.739612148066909*^9}, 3.739612933184155*^9, 
   3.739618772502844*^9, 3.739621265369721*^9},
 CellLabel->
  "Out[212]=",ExpressionUUID->"2da83e90-7c12-48c7-bd91-9c46da0774b7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ds1", "=", 
  RowBox[{"Dataset", "[", 
   RowBox[{"Association", "@@@", 
    RowBox[{
     RowBox[{"Partition", "[", 
      RowBox[{
       RowBox[{"Riffle", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"\"\<Input\>\"", "\[Rule]", "#"}], "&"}], "/@", "imgs"}], 
         ",", 
         RowBox[{
          RowBox[{
           RowBox[{"\"\<Output\>\"", "\[Rule]", "#"}], "&"}], "/@", 
          "pimgs"}]}], "]"}], ",", 
       RowBox[{"{", "2", "}"}]}], "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"1", ";;", "3"}], "]"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.739619612920856*^9, 3.7396196288975983`*^9}, {
   3.7396198504725018`*^9, 3.7396198624471807`*^9}, 3.739621285327468*^9, {
   3.739628397638845*^9, 3.739628402739608*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"e2954268-117b-4881-a981-45c1d0f61a42"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 3, "Length" -> 3, "InitialType" -> TypeSystem`Vector[
          TypeSystem`Struct[{"Input", "Output"}, {
            TypeSystem`Vector[
             TypeSystem`Vector[
              TypeSystem`Atom[Integer], 300], 4], 
            TypeSystem`Vector[
             TypeSystem`Vector[
              TypeSystem`Atom[Integer], 3], 300]}], 3], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          Association[{All, "Input"} -> 1, {All, "Output"} -> 3], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association["Input" -> TypeSystem`PackageScope`Limited[
                TypeSystem`PackageScope`ColumnShape[
                 TypeSystem`PackageScope`ElidedShape[1]], 4, {
                All, "Input", All}], "Output" -> 
              TypeSystem`PackageScope`Limited[
                TypeSystem`PackageScope`MatrixShape[300, 3], 5, {
                All, "Output", All}]]]], 3, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[362581028], "Type" -> 
        TypeSystem`Vector[
          TypeSystem`Struct[{"Input", "Output"}, {
            TypeSystem`Vector[
             TypeSystem`Vector[
              TypeSystem`Atom[Integer], 300], 4], 
            TypeSystem`Vector[
             TypeSystem`Vector[
              TypeSystem`Atom[Integer], 3], 300]}], 3], "HandleQ" -> True, 
        "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[362581028]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Input\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Input\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{All, "Input"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[All, "Input"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Output\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Output\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{All, "Output"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[All, "Output"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Center, Baseline}], SpanFromLeft, 
               SpanFromLeft}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{1, 
                    Key["Input"], 1}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Input"], 1]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 1, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 1, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 1, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{1, 
                    Key["Input"], 2}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Input"], 2]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 2, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 2, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 2, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{1, 
                    Key["Input"], 3}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Input"], 3]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 3, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 3, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 3, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{1, 
                    Key["Input"], 4}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Input"], 4]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 4, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 4, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 4, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 5, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 5, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 5, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Superscript["300 total \:203a ", ""], 
                    Style[
                    Superscript["300 total \:203a ", ""], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{1, 
                    Key["Output"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "Output", All}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "Output", All}]], MenuEvaluator -> Automatic],
                     Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-1]& , {All, "Output", All}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-5]& , {All, "Output", All}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Left, Baseline}, Background -> GrayLevel[0.98]],
                SpanFromLeft, SpanFromLeft}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{2, 
                    Key["Input"], 1}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Input"], 1]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 1, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 1, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 1, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{2, 
                    Key["Input"], 2}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Input"], 2]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 2, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 2, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 2, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{2, 
                    Key["Input"], 3}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Input"], 3]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 3, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 3, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 3, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{2, 
                    Key["Input"], 4}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Input"], 4]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 4, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 4, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 4, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 5, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 5, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 5, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Superscript["300 total \:203a ", ""], 
                    Style[
                    Superscript["300 total \:203a ", ""], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{2, 
                    Key["Output"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "Output", All}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "Output", All}]], MenuEvaluator -> Automatic],
                     Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-1]& , {All, "Output", All}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-5]& , {All, "Output", All}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Left, Baseline}, Background -> GrayLevel[0.98]],
                SpanFromLeft, SpanFromLeft}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{3, 
                    Key["Input"], 1}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Input"], 1]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 1, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 1, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 1, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{3, 
                    Key["Input"], 2}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Input"], 2]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 2, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 2, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 2, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{3, 
                    Key["Input"], 3}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Input"], 3]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 3, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 3, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 3, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{3, 
                    Key["Input"], 4}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Input"], 4]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 4, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 4, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 4, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 5, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 5, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 5, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Superscript["300 total \:203a ", ""], 
                    Style[
                    Superscript["300 total \:203a ", ""], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{3, 
                    Key["Output"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "Output", All}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "Output", All}]], MenuEvaluator -> Automatic],
                     Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-1]& , {All, "Output", All}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-5]& , {All, "Output", All}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Left, Baseline}, Background -> GrayLevel[0.98]],
                SpanFromLeft, SpanFromLeft}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {202., {240.634033203125, 246.365966796875}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellChangeTimes->{{3.739628390044372*^9, 3.7396284040790167`*^9}},
 CellLabel->"Out[23]=",ExpressionUUID->"bb1668d9-4c95-4117-84b7-842b971c7e95"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"inDS", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"\"\<Input\>\"", "\[Rule]", "#"}], "&"}], "/@", "imgs"}]}], " ", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"otDs", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"\"\<Output\>\"", "\[Rule]", "#"}], "&"}], "/@", "pimgs"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.739619905376823*^9, 3.739619917992811*^9}, {
  3.7396199528704233`*^9, 3.739619967210762*^9}, {3.7396213029276*^9, 
  3.7396213099733953`*^9}},
 CellLabel->
  "In[213]:=",ExpressionUUID->"7f8c66ff-87a4-49f6-9328-48ccc34e13b2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ds1", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Input\>\"", "\[Rule]", 
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ",", 
       RowBox[{"\"\<Output\>\"", "\[Rule]", 
        RowBox[{"Transpose", "[", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "1"}], "}"}]}], "]"}]}]}], "|>"}], "&"}], "/@", 
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"Riffle", "[", 
       RowBox[{"imgs", ",", "opimgs"}], "]"}], ",", 
      RowBox[{"{", "2", "}"}]}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.739620032044806*^9, 3.73962005547672*^9}, {
  3.739620279696362*^9, 3.739620293406601*^9}, {3.739626369598157*^9, 
  3.7396263785723543`*^9}},
 CellLabel->
  "In[267]:=",ExpressionUUID->"029ca8b4-68d9-443a-a0dd-4f0af5524998"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ds1", "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "\"\<Output\>\""}], "]"}], "]"}], "//", "Normal"}], "//",
   "Dimensions"}]], "Input",
 CellChangeTimes->{{3.7396263810119143`*^9, 3.7396263965323687`*^9}},
 CellLabel->
  "In[269]:=",ExpressionUUID->"bcda916f-3de9-454b-ae0c-5fd77fef8b48"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"300", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{{3.7396263886309547`*^9, 3.739626397227748*^9}},
 CellLabel->
  "Out[269]=",ExpressionUUID->"3b03dacd-1b58-4ca8-807a-235bd48d35a8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"opimgs", "//", "Dimensions"}]], "Input",
 CellChangeTimes->{{3.739626359475814*^9, 3.7396263657130613`*^9}},
 CellLabel->
  "In[266]:=",ExpressionUUID->"d14d9f52-f1a8-4493-86e0-8729079e6922"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1700", ",", "3", ",", "300"}], "}"}]], "Output",
 CellChangeTimes->{3.739626365979505*^9},
 CellLabel->
  "Out[266]=",ExpressionUUID->"2ec50265-d418-4de8-82ad-2eb0fd45f8c3"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Convert file to dataset", "Section",
 CellChangeTimes->{{3.739619252813663*^9, 
  3.7396192578048487`*^9}},ExpressionUUID->"910293dd-5502-4717-91c1-\
892c790b064c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"fromPythonList", "[", "listString_", "]"}], ":=", 
   RowBox[{"ToExpression", "[", 
    RowBox[{"StringReplace", "[", 
     RowBox[{"listString", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<[\>\"", "\[Rule]", "\"\<{\>\""}], ",", 
        RowBox[{"\"\<]\>\"", "\[Rule]", "\"\<}\>\""}]}], "}"}]}], "]"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"pairInputsWithOutputs", "[", 
    RowBox[{"inputs_", ",", "outputs_"}], "]"}], ":=", 
   RowBox[{"Partition", "[", 
    RowBox[{
     RowBox[{"Riffle", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"\"\<Input\>\"", "\[Rule]", "#"}], "&"}], "/@", "inputs"}], 
       ",", 
       RowBox[{
        RowBox[{
         RowBox[{"\"\<Output\>\"", "\[Rule]", "#"}], "&"}], "/@", 
        "outputs"}]}], "]"}], ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ImportSequenceFile", "[", "file_", "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
     "tsv", ",", " ", "header", ",", " ", "data", ",", " ", "ds", ",", " ", 
      "tds", ",", " ", "imgs", ",", " ", "pimgs"}], "\[IndentingNewLine]", 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"tsv", " ", "=", " ", 
      RowBox[{"Import", "[", "file", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"header", " ", "=", " ", 
      RowBox[{"First", "@", "tsv"}]}], ";", " ", 
     RowBox[{"data", " ", "=", " ", 
      RowBox[{"Rest", "@", "tsv"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"ds", "=", 
      RowBox[{"Dataset", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"AssociationThread", "[", 
          RowBox[{"header", ",", "#"}], "]"}], "&"}], "/@", "data"}], "]"}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"imgs", "=", 
      RowBox[{"(*", 
       RowBox[{"Image", "/@"}], "*)"}], 
      RowBox[{"Transpose", "/@", 
       RowBox[{"fromPythonList", "/@", 
        RowBox[{"Normal", "[", 
         RowBox[{"ds", "[", 
          RowBox[{"All", ",", "\"\<img\>\""}], "]"}], "]"}]}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"pimgs", "=", 
      RowBox[{"(*", 
       RowBox[{"Image", "/@"}], "*)"}], 
      RowBox[{"Transpose", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"fromPythonList", "/@", 
           RowBox[{"Normal", "[", 
            RowBox[{"ds", "[", 
             RowBox[{"All", ",", "\"\<prob_img\>\""}], "]"}], "]"}]}], ")"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{";;", ",", ";;", ",", "1", ",", ";;"}], "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"tds", "=", 
      RowBox[{"Dataset", "[", 
       RowBox[{"Association", "@@@", 
        RowBox[{"pairInputsWithOutputs", "[", 
         RowBox[{"imgs", ",", " ", "pimgs"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "tds", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ImportSequenceFiles", "[", "files_", "]"}], ":=", 
  RowBox[{"Dataset", "[", 
   RowBox[{"Join", "@@", 
    RowBox[{"(", 
     RowBox[{"Normal", "/@", 
      RowBox[{"ImportSequenceFile", "/@", "files"}]}], ")"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.739619260397146*^9, 3.7396193745950527`*^9}, {
   3.739619515343655*^9, 3.7396195403515787`*^9}, 3.739619643411511*^9, {
   3.739626485050982*^9, 3.739626485792128*^9}, {3.7396285776169853`*^9, 
   3.73962866913391*^9}, {3.739628781265604*^9, 3.73962878149819*^9}, 
   3.739628812938243*^9, {3.739629071354335*^9, 3.73962907531604*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"7966f479-0c33-4a7b-a85e-4d7f05782701"],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "FileNames", "[", 
   "\"\</Users/sumner/Programming/Detexon/data/dataset_min_50_max_250_pad_300_\
random_85000/*\>\"", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.739627750195121*^9, 3.7396277626895933`*^9}, 
   3.739630693401354*^9},
 CellLabel->"In[11]:=",ExpressionUUID->"3d307f31-0383-42bd-a24a-35f1bfe13d5a"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
By hand combine smaller files into mid files (doing all at once causes crash)\
\
\>", "Section",
 CellChangeTimes->{{3.739634903378018*^9, 
  3.739634916395891*^9}},ExpressionUUID->"32005acb-23f8-4373-8abb-\
47833a0e8e36"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "files", "=", 
   "\"\</Users/sumner/Programming/Detexon/data/dataset_min_50_max_250_pad_300_\
random_85000/*\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dump", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<data\>\"", ",", 
      "\"\<dataset.mx\>\""}], "}"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.739627813342751*^9, 3.739627858355721*^9}, {
  3.739627947937274*^9, 3.73962795798179*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"05f40f07-9184-4fc9-a5f0-a79022d84db2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"sequenceFiles", "=", 
    RowBox[{"ImportSequenceFiles", "@", 
     RowBox[{
      RowBox[{"FileNames", "[", "files", "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"91", ";;", "100"}], "]"}], "]"}]}]}], ";", 
   RowBox[{"Export", "[", 
    RowBox[{
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<data\>\"", ",", 
        "\"\<dataset_part_10.mx\>\""}], "}"}], "]"}], ",", "sequenceFiles"}], 
    "]"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.739628768271924*^9, 3.739628806311833*^9}, {
  3.739629085105618*^9, 3.7396290853837843`*^9}, {3.739629158916264*^9, 
  3.7396291655540037`*^9}, {3.739630679915081*^9, 3.7396307021292543`*^9}, {
  3.73963080834163*^9, 3.739630814969892*^9}, {3.7396308564179296`*^9, 
  3.739630856678904*^9}, {3.739630989404696*^9, 3.7396309981230373`*^9}, {
  3.73963128012605*^9, 3.739631282458541*^9}, {3.739631441521648*^9, 
  3.739631442960726*^9}, {3.73963158455669*^9, 3.739631587636478*^9}, {
  3.7396317478699503`*^9, 3.739631749570644*^9}, {3.739631887865234*^9, 
  3.739631889543125*^9}, {3.739632032997703*^9, 3.739632034331883*^9}, {
  3.739632181585215*^9, 3.739632184911214*^9}, {3.739632389129567*^9, 
  3.7396323911029663`*^9}, {3.73963256145315*^9, 3.739632563108235*^9}, {
  3.739632761759081*^9, 
  3.739632763274246*^9}},ExpressionUUID->"ef33f590-0ff0-4dbc-ac8f-\
bbc23cf5ba44"],

Cell[BoxData["\<\"/Users/sumner/Programming/WSS2018/Detexon/data/dataset_part_\
10.mx\"\>"], "Output",
 CellChangeTimes->{3.739631268951364*^9, 3.739631433627388*^9, 
  3.739631586811386*^9, 3.739631730091275*^9, 3.739631882934045*^9, 
  3.7396320251292067`*^9, 3.739632174634246*^9, 3.7396323663924227`*^9, 
  3.739632555143257*^9, 3.7396327295059967`*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"25cc06ec-8e78-4e87-997d-7470a07fb9a8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Export everything together", "Section",
 CellChangeTimes->{{3.739634922979257*^9, 
  3.739634928499632*^9}},ExpressionUUID->"5b0f7b20-bc29-49e6-aa96-\
a9a6858f1f49"],

Cell[BoxData[
 RowBox[{
  RowBox[{"datasets", "=", 
   RowBox[{"Import", "/@", 
    RowBox[{"FileNames", "[", 
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<data\>\"", ",", 
        "\"\<dataset_part_*.mx\>\""}], "}"}], "]"}], "]"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.739632826556281*^9, 3.7396328456466513`*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"e6ea9acc-c0bd-442a-bd0e-bcb19c5c9024"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<data\>\"", ",", 
      "\"\<processed_data.mx\>\""}], "}"}], "]"}], ",", 
   RowBox[{"Dataset", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"(", 
      RowBox[{"Normal", "/@", "datasets"}], ")"}], "]"}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.739632859722476*^9, 3.739633032409046*^9}, {
   3.739634795283382*^9, 3.739634838096813*^9}, 3.739634955562386*^9},
 CellLabel->"In[59]:=",ExpressionUUID->"0faf8990-419d-4f81-a293-ee9e14dae828"],

Cell[BoxData["\<\"/Users/sumner/Programming/WSS2018/Detexon/data/processed_\
data.mx\"\>"], "Output",
 CellChangeTimes->{{3.739632896570655*^9, 3.739632968339184*^9}, {
   3.739632999096085*^9, 3.739633034051862*^9}, 3.739634867860548*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"35922237-a8f7-48b7-b9b0-bd48c5a568c7"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Test import", "Chapter",
 CellChangeTimes->{{3.739634945645133*^9, 
  3.739634952028709*^9}},ExpressionUUID->"48b53a05-b383-4bb3-a4ef-\
a1d498bfc24d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ds", "=", 
   RowBox[{"Import", "@", 
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<data\>\"", ",", 
       "\"\<processed_data.mx\>\""}], "}"}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7396349584962177`*^9, 3.7396349650286083`*^9}},
 CellLabel->
  "In[124]:=",ExpressionUUID->"6289fa20-f269-4c8f-9671-070bd3384d47"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ds", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"ds", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"Round", "@", 
        RowBox[{"Length", "@", "ds"}]}], ")"}], "*", "0.1"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.739719769159009*^9, 3.7397198034622097`*^9}, {
  3.739720201719784*^9, 
  3.739720209804871*^9}},ExpressionUUID->"07b1fc45-57f2-4b90-904c-\
dd2c0d2e74f6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "@", "ds"}]], "Input",
 CellChangeTimes->{{3.739719806530795*^9, 3.739719808101199*^9}, 
   3.739720205004313*^9},
 CellLabel->"In[54]:=",ExpressionUUID->"9bc79d75-dabc-4326-a8b3-0eaa46619fdf"],

Cell[BoxData["17000"], "Output",
 CellChangeTimes->{3.739719808959174*^9, 3.739720207169908*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"d12a007e-6acd-4c3e-8043-72f66cd732fe"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Partition into sets", "Section",
 CellChangeTimes->{{3.739637482603001*^9, 
  3.73963748622746*^9}},ExpressionUUID->"58db24ba-d9cc-43c1-91da-\
40dd48612ff3"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7397198280797863`*^9, 
  3.739719840914126*^9}},ExpressionUUID->"5f3e4da9-c6c1-4dac-85ab-\
cca9e33bbe9a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ratios", "=", 
   RowBox[{"{", 
    RowBox[{"0.75", ",", "0.2", ",", "0.5"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ratios", "=", 
   RowBox[{"Round", "/@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Length", "[", "ds", "]"}], "ratios"}], ")"}]}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"trainingSet", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"ds", ",", 
     RowBox[{"ratios", "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ";", " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Use", " ", "Complement", " ", "to", " ", "take", " ", "samlpes", " ", 
    "not", " ", "used", " ", "already"}], "*)"}], "\n", 
  RowBox[{"validationSet", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"Complement", "[", 
      RowBox[{"ds", ",", "trainingSet"}], "]"}], ",", 
     RowBox[{"ratios", "[", 
      RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testSet", "=", 
   RowBox[{"Complement", "[", 
    RowBox[{"ds", ",", "validationSet", ",", "trainingSet"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.7396349754660482`*^9, 3.739634979200334*^9}, {
  3.739636773281767*^9, 3.739636773469797*^9}, {3.73963712196141*^9, 
  3.739637185442175*^9}, {3.739637439170919*^9, 3.7396374394756317`*^9}, {
  3.739719842208261*^9, 3.7397198504874372`*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"0191d131-cb13-47ea-883a-72360a764080"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainFile", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<data\>\"", ",", 
      "\"\<1_10_train_set.mx\>\""}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"validFile", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<data\>\"", ",", 
      "\"\<1_10_valid_set.mx\>\""}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testFile", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<data\>\"", ",", 
      "\"\<1_10_test_set.mx\>\""}], "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{"trainFile", ",", "trainingSet"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{"validFile", ",", "validationSet"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{"testFile", ",", "testSet"}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.73963722750133*^9, 3.7396373024200993`*^9}, {
  3.7397198587755013`*^9, 3.7397198928567333`*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"faca2876-30cb-4185-af1a-a89977d4d6c4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Detexon", "Title",
 CellChangeTimes->{{3.739454939580448*^9, 3.739454940393835*^9}, 
   3.739634957483069*^9},ExpressionUUID->"79531f19-5d82-4a89-9ec6-\
31b97d29f044"],

Cell[CellGroupData[{

Cell["Reference Model", "Section",
 CellChangeTimes->{{3.739621200289947*^9, 
  3.739621202251071*^9}},ExpressionUUID->"89171e11-dc7f-4ff7-8996-\
8c87fee60ac6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ademxappReferenceModel", ":=", 
  RowBox[{
  "NetModel", "[", "\"\<Ademxapp Model A1 Trained on Cityscapes Data\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.739461566701833*^9, 3.739461566703929*^9}, 
   3.739462251371645*^9, {3.739618110671913*^9, 3.739618111554132*^9}, {
   3.7396187289915543`*^9, 3.739618736221134*^9}, 
   3.739627220944319*^9},ExpressionUUID->"85f164a4-acf1-46e1-b40b-\
b3d96b2f32e6"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["25", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 3, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 3, 
                    "$GroupNumber" -> 1, "$InputSize" -> {1024, 2048}, 
                    "$OutputSize" -> {1024, 2048}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 1024, 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 1024, 2048}, 
                    NeuralNetworks`RealT]]], "2a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "conv1a" -> 
                    NeuralNetworks`TensorT[{64, 1024, 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {1024, 2048}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 1024, 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 1024, 2048}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 1024, 2048}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 1024, 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 1024, 2048}, 
                    NeuralNetworks`RealT]]], "res2a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    64, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {1024, 2048}, 
                    "$OutputSize" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 1024, 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    64, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {1024, 2048}, 
                    "$OutputSize" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 1024, 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {512, 1024}, 
                    "$OutputSize" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "2a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "conv1a"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_plus", "Outputs", "Output"]}], "2b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2a_plus" -> 
                    NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2b1_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {512, 1024}, 
                    "$OutputSize" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "bn2b1_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {512, 1024}, 
                    "$OutputSize" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "2b1_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "2a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Outputs", "Output"]}], "2b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2b1_plus" -> 
                    NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2b2_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {512, 1024}, 
                    "$OutputSize" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "bn2b2_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {512, 1024}, 
                    "$OutputSize" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "2b2_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Outputs", "Output"]}], "3a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2b2_plus" -> 
                    NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "res3a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    128, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {512, 1024}, 
                    "$OutputSize" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {512, 1024}, 
                    "$OutputSize" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {256, 512}, 
                    "$OutputSize" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "3a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_plus", "Outputs", "Output"]}], "3b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3a_plus" -> 
                    NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3b1_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {256, 512}, 
                    "$OutputSize" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {256, 512}, 
                    "$OutputSize" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "3b1_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "3a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Outputs", "Output"]}], "3b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3b1_plus" -> 
                    NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3b2_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {256, 512}, 
                    "$OutputSize" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {256, 512}, 
                    "$OutputSize" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "3b2_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Outputs", "Output"]}], "4a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3b2_plus" -> 
                    NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "res4a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    256, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {256, 512}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {256, 512}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "4a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a_plus", "Outputs", "Output"]}], "4b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4a_plus" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b1_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "4b1_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Outputs", "Output"]}], "4b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b1_plus" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b2_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "4b2_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Outputs", "Output"]}], "4b3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b2_plus" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b3_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "4b3_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Outputs", "Output"]}], "4b4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b3_plus" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b4_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "4b4_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b3_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b3_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Outputs", "Output"]}], "4b5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b4_plus" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b5_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "4b5_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b4_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b4_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Outputs", "Output"]}], "5a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b5_plus" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res5a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    512, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "bn5a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "5a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b5_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a_plus", "Outputs", "Output"]}], "5b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5a_plus" -> 
                    NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5b1_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    1024, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "bn5b1_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "5b1_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "5a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Outputs", "Output"]}], "5b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5b1_plus" -> 
                    NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5b2_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    1024, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "bn5b2_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "5b2_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Outputs", "Output"]}], "6a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5b2_plus" -> 
                    NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn6a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "res6a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "res6a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{2048, 
                    1024, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]]], "res6a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    1024, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "bn6a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {4, 4}, 
                    "Dilation" -> {4, 4}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "bn6a_branch2b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2_do" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.3, "Method" -> "Dropout"], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{2048, 
                    1024, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]]], "6a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_do", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_do", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a_plus", "Outputs", "Output"]}], "7a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "6a_plus" -> 
                    NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096, 128, 256}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn7a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]]], "res7a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]]], "res7a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{4096, 
                    2048, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 4096, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 2048, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 128, 256}, 
                    NeuralNetworks`RealT]]], "res7a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    2048, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 2048, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "bn7a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{2048, 
                    1024, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {4, 4}, 
                    "Dilation" -> {4, 4}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]]], "bn7a_branch2b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2_do" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{4096, 
                    2048, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 4096, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 2048, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 128, 256}, 
                    NeuralNetworks`RealT]]], "7a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{4096, 128, 256}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 128, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "6a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_do", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_do", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a_plus", "Outputs", "Output"]}], "bn7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    4096, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096, 128, 256}, 
                    NeuralNetworks`RealT]]], "relu7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096, 128, 256}, 
                    NeuralNetworks`RealT]]], "conv6a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 4096, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {12, 12}, 
                    "Dilation" -> {12, 12}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4096, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "conv6a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "linear19" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{19, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{19}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 19, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {12, 12}, 
                    "Dilation" -> {12, 12}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{19, 128, 256}, 
                    NeuralNetworks`RealT]]], "softmax/1" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    TwoWayRule[1, 3], 
                    TwoWayRule[1, 2]}]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{19, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 256, 19}, 
                    NeuralNetworks`RealT]]], "softmax/2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 256, 19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 256, 19}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2a", "Inputs", "conv1a"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Inputs", "2a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Inputs", "2b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Inputs", "2b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Inputs", "3a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Inputs", "3b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Inputs", "3b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Inputs", "4a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Inputs", "4b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Inputs", "4b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Inputs", "4b3_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Inputs", "4b4_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Inputs", "4b5_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Inputs", "5a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Inputs", "5b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Inputs", "5b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Inputs", "6a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax/2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {2048, 1024}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.485, 0.456, 0.406}, 
                    "VarianceImage" -> {0.052441, 0.050176, 0.050625}], 
                    
                    NeuralNetworks`TensorT[{3, 1024, 2048}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 
                    14, 15, 16, 17, 18, 19}, "InputDepth" -> 3, "Dimensions" -> 
                    19, "$Rank" -> 2], 
                    
                    NeuralNetworks`TensorT[{128, 256, 19}, 
                    NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part = Null, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"1024\"", "\"2048\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"1024\"", "\"2048\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"512\"", "\"1024\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"512\"", "\"1024\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"512\"", "\"1024\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"256\"", "\"512\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"256\"", "\"512\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"256\"", "\"512\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4b4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4b5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "12", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "12", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"bn7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "bn7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "bn7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "bn7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv6a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv6a_relu\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv6a_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv6a_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv6a_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"linear19\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"19\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "linear19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"softmax/1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax/1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["TransposeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax/1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"256\"", "\"19\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "softmax/1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"softmax/2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax/2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax/2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"256\"", "\"19\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "softmax/2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {351., {204.9169921875, 210.0830078125}},
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.739461599709177*^9, 3.739462429432938*^9, 
  3.7396181591155252`*^9, 3.7396187378192368`*^9},
 CellLabel->"Out[87]=",ExpressionUUID->"a0f269e3-f4ff-4a15-85ef-3ef0f222a7fc"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Simple CNN1D Block", "Section",
 CellChangeTimes->{{3.7396164894082127`*^9, 3.739616491670981*^9}, {
  3.739617073243064*^9, 
  3.73961707691396*^9}},ExpressionUUID->"16b03038-7b1b-4c98-b433-\
066235870d02"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AdemxappResidualCNN1DBlock", "[", 
   RowBox[{"inputDimension_", ",", " ", "name_"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"name", "<>", "\"\<_bnl_shared\>\""}], "\[Rule]", 
       RowBox[{"BatchNormalizationLayer", "[", 
        RowBox[{"\"\<Input\>\"", "\[Rule]", " ", "inputDimension"}], "]"}]}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"name", "<>", "\"\<_ramp_shared\>\""}], "\[Rule]", " ", 
       "Ramp"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"name", "<>", "\"\<_cnn1d_branch_1\>\""}], "\[Rule]", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"2", "*", 
          RowBox[{"First", "@", "inputDimension"}]}], ",", 
         RowBox[{"{", "1", "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"name", "<>", "\"\<_cnn1d_branch_2\>\""}], "\[Rule]", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"2", "*", 
          RowBox[{"First", "@", "inputDimension"}]}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
          RowBox[{"{", "1", "}"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"name", "<>", "\"\<_ramp_branch_2\>\""}], "\[Rule]", 
       RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"name", "<>", "\"\<_cnn1d_branch_2a\>\""}], "\[Rule]", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"2", "*", 
          RowBox[{"First", "@", "inputDimension"}]}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
          RowBox[{"{", "1", "}"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"name", "<>", "\"\<_plus_shared\>\""}], "\[Rule]", 
       RowBox[{"ThreadingLayer", "[", "Plus", "]"}]}]}], 
     "\[IndentingNewLine]", "|>"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"name", "<>", "\"\<_bnl_shared\>\""}], "\[Rule]", 
       RowBox[{
        RowBox[{"name", "<>", " ", "\"\<_ramp_shared\>\""}], "\[Rule]", " ", 
        RowBox[{
         RowBox[{"name", "<>", "\"\<_cnn1d_branch_1\>\""}], "\[Rule]", 
         RowBox[{"name", "<>", "\"\<_plus_shared\>\""}]}]}]}], ",", 
      "\[IndentingNewLine]", " ", 
      RowBox[{
       RowBox[{"name", "<>", "\"\<_ramp_shared\>\""}], "\[Rule]", 
       RowBox[{
        RowBox[{"name", "<>", "\"\<_cnn1d_branch_2\>\""}], "\[Rule]", 
        RowBox[{
         RowBox[{"name", "<>", "\"\<_ramp_branch_2\>\""}], "->", 
         RowBox[{
          RowBox[{"name", "<>", "\"\<_cnn1d_branch_2a\>\""}], "\[Rule]", 
          RowBox[{"name", "<>", "\"\<_plus_shared\>\""}]}]}]}]}]}], 
     "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 CellLabel->"In[34]:=",ExpressionUUID->"a71ff13b-2d85-4388-8178-a25e917b5851"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.739613075309965*^9, 3.73961347144803*^9}, {
   3.739613501763241*^9, 3.7396135249574537`*^9}, {3.73961376903407*^9, 
   3.739613887142661*^9}, 
   3.7396164835790043`*^9},ExpressionUUID->"c58d582d-68c3-415f-a67f-\
a2cdfdccdff5"]
}, Closed]],

Cell[CellGroupData[{

Cell["Complex CNN1D Block", "Section",
 CellChangeTimes->{{3.7396165011605253`*^9, 3.739616502304613*^9}, {
  3.739617077713826*^9, 
  3.739617098266519*^9}},ExpressionUUID->"eaa6b792-2988-4215-969e-\
473c6cd2f0a3"],

Cell[BoxData[
 StyleBox[
  RowBox[{
   RowBox[{"AdemxappResidualCNN1DBlock", "[", 
    RowBox[{
    "inputDimension_", ",", " ", "name_", ",", " ", "residualBNQ_", ",", 
     RowBox[{"kernel_:", "3"}], ",", 
     RowBox[{"padding_:", "1"}]}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"scale", "=", 
       RowBox[{"If", "[", 
        RowBox[{"residualBNQ", ",", "2", ",", "1"}], "]"}]}], 
      "\[IndentingNewLine]", "}"}], ",", 
     RowBox[{"Module", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"residualBranch", "=", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "\[Rule]", 
            RowBox[{"name", "<>", "\"\<_plus_shared\>\""}]}], 
           "\[IndentingNewLine]", "}"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"residualBNBranch", "=", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"name", "<>", "\"\<_ramp_shared\>\""}], "\[Rule]", " ", 
            RowBox[{
             RowBox[{"name", "<>", "\"\<_cnn1d_branch_1\>\""}], "\[Rule]", 
             RowBox[{"name", "<>", "\"\<_plus_shared\>\""}]}]}], 
           "\[IndentingNewLine]", "}"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"mainBranch", " ", "=", " ", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"name", "<>", "\"\<_bnl_shared\>\""}], "\[Rule]", 
             RowBox[{"name", "<>", "\"\<_ramp_shared\>\""}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{"residualBNQ", ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"name", "<>", "\"\<_ramp_shared\>\""}], "\[Rule]", 
               RowBox[{
                RowBox[{"name", "<>", "\"\<_cnn1d_branch_main\>\""}], 
                "\[Rule]", " ", 
                RowBox[{"name", "<>", "\"\<_ramp_branch_main\>\""}]}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"name", "<>", "\"\<_ramp_shared\>\""}], "\[Rule]", 
               RowBox[{
                RowBox[{"name", "<>", "\"\<_cnn1d_branch_main\>\""}], 
                "\[Rule]", 
                RowBox[{
                 RowBox[{"name", "<>", "\"\<_bnl_main\>\""}], "\[Rule]", " ", 
                 
                 RowBox[{"name", "<>", "\"\<_ramp_branch_main\>\""}]}]}]}]}], 
             "\[IndentingNewLine]", "]"}], ",", " ", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"name", "<>", "\"\<_ramp_branch_main\>\""}], "->", 
             RowBox[{
              RowBox[{"name", "<>", "\"\<_cnn1d_branch_main_a\>\""}], 
              "\[Rule]", 
              RowBox[{"name", "<>", "\"\<_plus_shared\>\""}]}]}]}], 
           "\[IndentingNewLine]", "}"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"residualBranchLayers", "=", 
          RowBox[{"<|", "|>"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"residualBNBranchLayers", "=", 
          RowBox[{"<|", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"name", "<>", "\"\<_cnn1d_branch_1\>\""}], "\[Rule]", 
            RowBox[{"ConvolutionLayer", "[", 
             RowBox[{
              RowBox[{"scale", "*", 
               RowBox[{"First", "@", "inputDimension"}]}], ",", 
              RowBox[{"{", "1", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
           "|>"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"mainBranchLayers", " ", "=", 
          RowBox[{"<|", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"name", "<>", "\"\<_bnl_shared\>\""}], "\[Rule]", 
             RowBox[{"BatchNormalizationLayer", "[", 
              RowBox[{"\"\<Input\>\"", "\[Rule]", " ", "inputDimension"}], 
              "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"name", "<>", "\"\<_ramp_shared\>\""}], "\[Rule]", " ", 
             "Ramp"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"name", "<>", "\"\<_cnn1d_branch_main\>\""}], "\[Rule]", 
             
             RowBox[{"ConvolutionLayer", "[", 
              RowBox[{
               RowBox[{"scale", "*", 
                RowBox[{"First", "@", "inputDimension"}]}], ",", 
               RowBox[{"{", "kernel", "}"}], ",", 
               RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
                RowBox[{"{", "padding", "}"}]}]}], "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{"residualBNQ", ",", "Nothing", ",", 
              RowBox[{
               RowBox[{"name", "<>", "\"\<_bnl_main\>\""}], "\[Rule]", 
               RowBox[{"BatchNormalizationLayer", "[", "]"}]}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"name", "<>", "\"\<_ramp_branch_main\>\""}], "\[Rule]", 
             RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"name", "<>", "\"\<_cnn1d_branch_main_a\>\""}], 
             "\[Rule]", 
             RowBox[{"ConvolutionLayer", "[", 
              RowBox[{
               RowBox[{"scale", "*", 
                RowBox[{"First", "@", "inputDimension"}]}], ",", 
               RowBox[{"{", "kernel", "}"}], ",", 
               RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
                RowBox[{"{", "padding", "}"}]}]}], "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"name", "<>", "\"\<_plus_shared\>\""}], "\[Rule]", 
             RowBox[{"ThreadingLayer", "[", "Plus", "]"}]}]}], 
           "\[IndentingNewLine]", "|>"}]}], ",", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "layers", ",", " ", "connections"}], 
        "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{"residualBNQ", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"layers", "=", 
            RowBox[{"Join", "[", 
             RowBox[{"mainBranchLayers", ",", "residualBNBranchLayers"}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"connections", "=", 
            RowBox[{"Join", "[", 
             RowBox[{"mainBranch", ",", "residualBNBranch"}], "]"}]}]}], ",", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"layers", "=", 
            RowBox[{"Join", "[", 
             RowBox[{"mainBranchLayers", ",", "residualBranchLayers"}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"connections", "=", 
            RowBox[{"Join", "[", 
             RowBox[{"mainBranch", ",", "residualBranch"}], "]"}]}]}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"NetGraph", "[", 
         RowBox[{"layers", ",", "connections"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], "]"}]}],
  FontWeight->"Plain"]], "Input",
 CellChangeTimes->{{3.7396157906126347`*^9, 3.739616092429044*^9}, {
  3.739616124544875*^9, 3.739616153298558*^9}, {3.73961622290722*^9, 
  3.739616340877088*^9}, {3.7396166283391314`*^9, 3.7396168499580917`*^9}, {
  3.739616943450281*^9, 3.739617029819158*^9}, {3.739827946418709*^9, 
  3.7398279789699802`*^9}},ExpressionUUID->"570c76c5-d51c-49f8-a96f-\
913652e9590a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Net Definition", "Section",
 CellChangeTimes->{{3.739620253340932*^9, 
  3.7396202549410257`*^9}},ExpressionUUID->"3a4a1602-46f3-4a2f-82af-\
d38c507a14fc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"inputDimension", "=", 
     RowBox[{"Dimensions", "@", 
      RowBox[{"First", "@", "imgs"}]}]}], ";"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"net", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"<|", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<conv_1a\>\"", "\[Rule]", 
        RowBox[{"ConvolutionLayer", "[", 
         RowBox[{"64", ",", 
          RowBox[{"{", "3", "}"}], ",", 
          RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
           RowBox[{"{", "1", "}"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<pool_1\>\"", "\[Rule]", 
        RowBox[{"PoolingLayer", "[", 
         RowBox[{
          RowBox[{"{", "3", "}"}], ",", 
          RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
           RowBox[{"{", "1", "}"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_1_upsample\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"64", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_1_upsample\>\"", ",", " ", "True"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_1_res_a\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"128", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_1_res_a\>\"", ",", " ", "False"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_1_res_b\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"128", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_1_res_b\>\"", ",", " ", "False"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<pool_2\>\"", "\[Rule]", 
        RowBox[{"PoolingLayer", "[", 
         RowBox[{
          RowBox[{"{", "3", "}"}], ",", 
          RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
           RowBox[{"{", "1", "}"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_2_upsample\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"128", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_2_upsample\>\"", ",", " ", "True"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_2_res_a\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"256", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_2_res_a\>\"", ",", " ", "False"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_2_res_b\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"256", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_2_res_b\>\"", ",", " ", "False"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<pool_3\>\"", "\[Rule]", 
        RowBox[{"PoolingLayer", "[", 
         RowBox[{
          RowBox[{"{", "3", "}"}], ",", 
          RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
           RowBox[{"{", "1", "}"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_3_upsample\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"256", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_3_upsample\>\"", ",", " ", "True"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_3_res_a\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"512", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_3_res_a\>\"", ",", " ", "False"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_3_res_b\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"512", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_3_res_b\>\"", ",", " ", "False"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_3_res_c\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"512", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_3_res_c\>\"", ",", " ", "False"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_3_res_d\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"512", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_3_res_d\>\"", ",", " ", "False"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_3_res_e\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"512", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_3_res_e\>\"", ",", " ", "False"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<pool_4\>\"", "\[Rule]", 
        RowBox[{"PoolingLayer", "[", 
         RowBox[{
          RowBox[{"{", "3", "}"}], ",", 
          RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
           RowBox[{"{", "1", "}"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_4_upsample\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"512", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_4_upsample\>\"", ",", " ", "True"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_4_res_a\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1024", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_4_res_a\>\"", ",", " ", "False"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_4_res_b\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1024", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_4_res_b\>\"", ",", " ", "False"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<pool_5\>\"", "\[Rule]", 
        RowBox[{"PoolingLayer", "[", 
         RowBox[{
          RowBox[{"{", "3", "}"}], ",", 
          RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
           RowBox[{"{", "1", "}"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<bn_6\>\"", "\[Rule]", 
        RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<relu_6\>\"", "\[Rule]", "Ramp"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<conv_6\>\"", "\[Rule]", 
        RowBox[{"ConvolutionLayer", "[", 
         RowBox[{"512", ",", 
          RowBox[{"{", "3", "}"}], ",", 
          RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
           RowBox[{"{", "1", "}"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<relu_6a\>\"", "\[Rule]", "Ramp"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<conv_6a\>\"", "\[Rule]", 
        RowBox[{"ConvolutionLayer", "[", 
         RowBox[{"3", ",", 
          RowBox[{"{", "3", "}"}], ",", 
          RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
           RowBox[{"{", "1", "}"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<transpose\>\"", "\[Rule]", 
        RowBox[{"TransposeLayer", "[", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<softmax\>\"", "\[Rule]", 
        RowBox[{"SoftmaxLayer", "[", "]"}]}]}], "\[IndentingNewLine]", "|>"}],
      ",", "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<conv_1a\>\"", "\[Rule]", "\"\<pool_1\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<pool_1\>\"", "\[Rule]", " ", 
        RowBox[{"\"\<arcb_1_upsample\>\"", "->", 
         RowBox[{"\"\<arcb_1_res_a\>\"", "->", 
          RowBox[{
          "\"\<arcb_1_res_b\>\"", "\[Rule]", " ", "\"\<pool_2\>\""}]}]}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<pool_2\>\"", "\[Rule]", " ", 
        RowBox[{"\"\<arcb_2_upsample\>\"", "->", 
         RowBox[{"\"\<arcb_2_res_a\>\"", "->", 
          RowBox[{
          "\"\<arcb_2_res_b\>\"", "\[Rule]", " ", "\"\<pool_3\>\""}]}]}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<pool_3\>\"", "\[Rule]", 
        RowBox[{"\"\<arcb_3_upsample\>\"", "->", 
         RowBox[{"\"\<arcb_3_res_a\>\"", "->", 
          RowBox[{"\"\<arcb_3_res_b\>\"", "\[Rule]", 
           RowBox[{"\"\<arcb_3_res_c\>\"", "\[Rule]", 
            RowBox[{"\"\<arcb_3_res_d\>\"", "\[Rule]", 
             RowBox[{
             "\"\<arcb_3_res_e\>\"", "\[Rule]", " ", 
              "\"\<pool_4\>\""}]}]}]}]}]}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<pool_4\>\"", "\[Rule]", 
        RowBox[{"\"\<arcb_4_upsample\>\"", "->", 
         RowBox[{"\"\<arcb_4_res_a\>\"", "->", 
          RowBox[{
          "\"\<arcb_4_res_b\>\"", "\[Rule]", " ", "\"\<pool_5\>\""}]}]}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<pool_5\>\"", "\[Rule]", " ", 
        RowBox[{"\"\<bn_6\>\"", "\[Rule]", 
         RowBox[{"\"\<relu_6\>\"", "\[Rule]", 
          RowBox[{"\"\<conv_6\>\"", "\[Rule]", 
           RowBox[{"\"\<relu_6a\>\"", "\[Rule]", " ", 
            RowBox[{"\"\<conv_6a\>\"", "\[Rule]", 
             RowBox[{
             "\"\<transpose\>\"", "\[Rule]", " ", 
              "\"\<softmax\>\""}]}]}]}]}]}]}]}], "\[IndentingNewLine]", "}"}],
      ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"4", ",", "300"}], "}"}]}]}], "\[IndentingNewLine]", 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7396127490200043`*^9, 3.7396128552543592`*^9}, {
   3.739612911158017*^9, 3.739612914256702*^9}, {3.739612961816225*^9, 
   3.739613052323484*^9}, {3.739617122853778*^9, 3.739617456415779*^9}, {
   3.739617487400838*^9, 3.739617585429929*^9}, {3.739617620702985*^9, 
   3.739617656893656*^9}, {3.739617727993281*^9, 3.739617743224094*^9}, {
   3.7396182107141848`*^9, 3.739618371437944*^9}, {3.7396184034109383`*^9, 
   3.739618519922839*^9}, {3.7396185697579327`*^9, 3.739618583539155*^9}, {
   3.739618620967548*^9, 3.739618709273501*^9}, {3.739619189368452*^9, 
   3.739619192406672*^9}, {3.739626287678411*^9, 3.739626305170714*^9}, 
   3.739627316302485*^9},
 CellLabel->"In[63]:=",ExpressionUUID->"c20176ee-0a6c-4938-85c2-384f6225b031"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.0149], {
                   GrayLevel[0.6], 
                   Thickness[0.03], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"4\"", "\"300\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"300\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["28", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.0149], {
                   GrayLevel[0.6], 
                   Thickness[0.03], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    PaneBox[
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-29., 1.7757378587636622`*^-15}, {-28., 
                    1.7145055188062944`*^-15}}], 
                    
                    LineBox[{{-28., 1.7145055188062944`*^-15}, {-27., 
                    1.6532731788489269`*^-15}}], 
                    LineBox[{{-27., 1.6532731788489269`*^-15}, {-26., 
                    1.592040838891559*^-15}}], 
                    
                    LineBox[{{-26., 1.592040838891559*^-15}, {-25., 
                    1.5308084989341915`*^-15}}], 
                    
                    LineBox[{{-25., 1.5308084989341915`*^-15}, {-24., 
                    1.4695761589768238`*^-15}}], 
                    
                    LineBox[{{-24., 1.4695761589768238`*^-15}, {-23., 
                    1.4083438190194562`*^-15}}], 
                    
                    LineBox[{{-23., 1.4083438190194562`*^-15}, {-22., 
                    1.3471114790620886`*^-15}}], 
                    
                    LineBox[{{-22., 1.3471114790620886`*^-15}, {-21., 
                    1.2858791391047208`*^-15}}], 
                    
                    LineBox[{{-21., 1.2858791391047208`*^-15}, {-20., 
                    1.2246467991473533`*^-15}}], 
                    
                    LineBox[{{-20., 1.2246467991473533`*^-15}, {-19., 
                    1.1634144591899855`*^-15}}], 
                    
                    LineBox[{{-19., 1.1634144591899855`*^-15}, {-18., 
                    1.102182119232618*^-15}}], 
                    
                    LineBox[{{-18., 1.102182119232618*^-15}, {-17., 
                    1.0409497792752501`*^-15}}], 
                    
                    LineBox[{{-17., 1.0409497792752501`*^-15}, {-16., 
                    9.797174393178826*^-16}}], 
                    
                    LineBox[{{-16., 9.797174393178826*^-16}, {-15., 
                    9.18485099360515*^-16}}], 
                    
                    LineBox[{{-15., 9.18485099360515*^-16}, {-14., 
                    8.572527594031472*^-16}}], 
                    
                    LineBox[{{-14., 8.572527594031472*^-16}, {-13., 
                    7.960204194457795*^-16}}], 
                    
                    LineBox[{{-13., 7.960204194457795*^-16}, {-12., 
                    7.347880794884119*^-16}}], 
                    
                    LineBox[{{-12., 7.347880794884119*^-16}, {-11., 
                    6.735557395310443*^-16}}], 
                    
                    LineBox[{{-11., 6.735557395310443*^-16}, {-10., 
                    6.123233995736766*^-16}}], 
                    
                    LineBox[{{-10., 6.123233995736766*^-16}, {-9., 
                    5.51091059616309*^-16}}], 
                    
                    LineBox[{{-9., 5.51091059616309*^-16}, {-8., 
                    4.898587196589413*^-16}}], 
                    LineBox[{{-8., 4.898587196589413*^-16}, {-7., 
                    4.286263797015736*^-16}}], 
                    
                    LineBox[{{-7., 4.286263797015736*^-16}, {-6., 
                    3.6739403974420594`*^-16}}], 
                    
                    LineBox[{{-6., 3.6739403974420594`*^-16}, {-5., 
                    3.061616997868383*^-16}}], 
                    
                    LineBox[{{-5., 3.061616997868383*^-16}, {-4., 
                    2.4492935982947064`*^-16}}], 
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}}], 
                    LineBox[{{-1., 6.123233995736766*^-17}, {0., 0.}}]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-28.400000000000002`, 
                    1.7389984547892415`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736777*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"4\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"4", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-27.4, 
                    1.677766114831874*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-26.4, 
                    1.6165337748745062`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736777*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-25.4, 
                    1.5553014349171384`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-24.4, 
                    1.4940690949597709`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736777*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-23.4, 
                    1.4328367550024033`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-22.4, 
                    1.3716044150450357`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-21.4, 
                    1.310372075087668*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736777*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-20.4, 
                    1.2491397351303004`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-19.4, 
                    1.1879073951729326`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736777*^-17}], 
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-18.4, 
                    1.126675055215565*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-17.4, 
                    1.0654427152581972`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736777*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-16.4, 
                    1.0042103753008295`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-15.4, 
                    9.42978035343462*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-14.4, 
                    8.817456953860943*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736777*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-13.4, 
                    8.205133554287267*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.399999999999999`, 
                    7.59281015471359*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-11.4, 
                    6.980486755139913*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-10.4, 
                    6.368163355566237*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1024\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1024", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-9.399999999999999, 
                    5.755839955992561*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1024\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1024", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-8.4, 
                    5.143516556418883*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1024\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1024", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-7.4, 
                    4.531193156845207*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1024\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1024", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-6.4, 
                    3.9188697572715305`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1024\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1024", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-5.4, 
                    3.3065463576978537`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736762*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1024\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1024", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-4.4, 
                    2.694222958124177*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    2.0818995585505003`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    1.4695761589768238`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736765*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"3\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"3", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    8.572527594031473*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"300\"", "\"3\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"300", "3"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-0.4, 
                    2.4492935982947065`*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"300\"", "\"3\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"300", "3"}, "\[Cross]"], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-29., 1.7757378587636622`*^-15}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-28., 1.7145055188062944`*^-15}], 
                    Offset[{10, 10}, {-28., 1.7145055188062944`*^-15}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    PaneBox[
                    StyleBox["\"\:2217\"", 20, StripOnInput -> False], 
                    ImageSize -> {11, 28}], TraditionalForm]], {-28., 
                    1.7145055188062944`*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"conv_1a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"64", ",", 
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["conv_1a", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    64, {3}, "PaddingSize" -> {1}, "Input" -> {4, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-27., 1.6532731788489269`*^-15}], 
                    Offset[{10, 10}, {-27., 1.6532731788489269`*^-15}]]}, 
                    InsetBox[
                    FormBox["\"P\"", TraditionalForm], 
                    Offset[{0, -1}, {-27., 1.6532731788489269`*^-15}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pool_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pool_1", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{3}, "PaddingSize" -> {1}, 
                    "Input" -> {64, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-26., 1.592040838891559*^-15}], 
                    Offset[{12, 12}, {-26., 1.592040838891559*^-15}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-26., 
                    1.592040838891559*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_1_upsample\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_1_upsample", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-25., 1.5308084989341915`*^-15}], 
                    Offset[{12, 12}, {-25., 1.5308084989341915`*^-15}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-25., 
                    1.5308084989341915`*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_1_res_a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_1_res_a", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-24., 1.4695761589768238`*^-15}], 
                    Offset[{12, 12}, {-24., 1.4695761589768238`*^-15}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-24., 
                    1.4695761589768238`*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_1_res_b\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_1_res_b", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-23., 1.4083438190194562`*^-15}], 
                    Offset[{10, 10}, {-23., 1.4083438190194562`*^-15}]]}, 
                    InsetBox[
                    FormBox["\"P\"", TraditionalForm], 
                    Offset[{0, -1}, {-23., 1.4083438190194562`*^-15}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pool_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pool_2", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{3}, "PaddingSize" -> {1}, 
                    "Input" -> {128, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-22., 1.3471114790620886`*^-15}], 
                    Offset[{12, 12}, {-22., 1.3471114790620886`*^-15}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-22., 
                    1.3471114790620886`*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_2_upsample\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_2_upsample", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-21., 1.2858791391047208`*^-15}], 
                    Offset[{12, 12}, {-21., 1.2858791391047208`*^-15}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-21., 
                    1.2858791391047208`*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_2_res_a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_2_res_a", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-20., 1.2246467991473533`*^-15}], 
                    Offset[{12, 12}, {-20., 1.2246467991473533`*^-15}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-20., 
                    1.2246467991473533`*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_2_res_b\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_2_res_b", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-19., 1.1634144591899855`*^-15}], 
                    Offset[{10, 10}, {-19., 1.1634144591899855`*^-15}]]}, 
                    InsetBox[
                    FormBox["\"P\"", TraditionalForm], 
                    Offset[{0, -1}, {-19., 1.1634144591899855`*^-15}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pool_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pool_3", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{3}, "PaddingSize" -> {1}, 
                    "Input" -> {256, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-18., 1.102182119232618*^-15}], 
                    Offset[{12, 12}, {-18., 1.102182119232618*^-15}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-18., 
                    1.102182119232618*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_3_upsample\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_3_upsample", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-17., 1.0409497792752501`*^-15}], 
                    Offset[{12, 12}, {-17., 1.0409497792752501`*^-15}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-17., 
                    1.0409497792752501`*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_3_res_a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_3_res_a", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-16., 9.797174393178826*^-16}], 
                    Offset[{12, 12}, {-16., 9.797174393178826*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-16., 
                    9.797174393178826*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_3_res_b\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_3_res_b", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-15., 9.18485099360515*^-16}], 
                    Offset[{12, 12}, {-15., 9.18485099360515*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-15., 
                    9.18485099360515*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_3_res_c\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_3_res_c", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-14., 8.572527594031472*^-16}], 
                    Offset[{12, 12}, {-14., 8.572527594031472*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-14., 
                    8.572527594031472*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_3_res_d\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_3_res_d", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-13., 7.960204194457795*^-16}], 
                    Offset[{12, 12}, {-13., 7.960204194457795*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-13., 
                    7.960204194457795*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_3_res_e\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_3_res_e", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-12., 7.347880794884119*^-16}], 
                    Offset[{10, 10}, {-12., 7.347880794884119*^-16}]]}, 
                    InsetBox[
                    FormBox["\"P\"", TraditionalForm], 
                    Offset[{0, -1}, {-12., 7.347880794884119*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pool_4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pool_4", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{3}, "PaddingSize" -> {1}, 
                    "Input" -> {512, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 18), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-11., 6.735557395310443*^-16}], 
                    Offset[{12, 12}, {-11., 6.735557395310443*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-11., 
                    6.735557395310443*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_4_upsample\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_4_upsample", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 19), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-10., 6.123233995736766*^-16}], 
                    Offset[{12, 12}, {-10., 6.123233995736766*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 
                    1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-10., 
                    6.123233995736766*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"arcb_4_res_a\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_4_res_a", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 20), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-9., 5.51091059616309*^-16}], 
                    Offset[{12, 12}, {-9., 5.51091059616309*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-9., 
                    5.51091059616309*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_4_res_b\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_4_res_b", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 21), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-8., 4.898587196589413*^-16}], 
                    Offset[{10, 10}, {-8., 4.898587196589413*^-16}]]}, 
                    InsetBox[
                    FormBox["\"P\"", TraditionalForm], 
                    Offset[{0, -1}, {-8., 4.898587196589413*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pool_5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1024", ",", "300"}], "}"}]}]}], "]"}], HoldForm],
                     FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pool_5", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{3}, "PaddingSize" -> {1}, 
                    "Input" -> {1024, 300}]], FontFamily -> "Source Code Pro",
                     ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 22), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-7., 4.286263797015736*^-16}], 
                    Offset[{10, 10}, {-7., 4.286263797015736*^-16}]]}, 
                    InsetBox[
                    FormBox["\"BN\"", TraditionalForm], 
                    Offset[{0, -1}, {-7., 4.286263797015736*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"bn_6\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Channels\"", "\[Rule]", "1024"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1024", ",", "300"}], "}"}]}]}], "]"}], HoldForm],
                     FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["bn_6", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Channels" -> 1024, "Input" -> {1024, 300}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 23), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-6., 3.6739403974420594`*^-16}], 
                    Offset[{10, 10}, {-6., 3.6739403974420594`*^-16}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzF1s9LG0EUB/CNtpKLtvVmC4q3loooolgqBUUjHnIwNhSiRnZ+iSARkoh4
MeBJCJ7Egyi0Je5MD+JdSr3Yf6A92HMFPVr0YitofOtO7DRaE83s5gtvIXsY
Pnmz83Yb0VSIVRiGkfDDJWTOdMfj5uzQY/gRjiUmxmOUDMSSdJzGO1El3KyD
eg71wNCeoK6FEFqr1rWWEi0+1rbykBDxWcdaedHh81EiMox+ympYKz8l+yjm
C7YNjMc6QHkpyUexmLRtjIhThkRAF0rJvX0YixD07Mz2EWJFdaKU3MvHTKsL
bCeX+4r5rG6Ukjv7oG8vwHbo9E0su4FScicfQvwpPGs/nb6JTcNIVbgFkyna
NzycqYG+fZNn9evY2Hu/mzCZonzhcKoK+vVFntUfGK/Wug2TKcbnY4Rb0naA
0HqD66q/KegjhKdz85eQ9RYvUEpu9THMY7n5S02r1yuUkv/6oG9v7fkLdY4x
H/ESpeRGHzxjb8D1W864Ga9RSq75oG8vwfbLsfGlcqCU/OOLRj88o4Tvyb5t
eDB/C+XKx8Irj+AcfJfnYcej+Vsolz57/oJp25kjfDcSsZ6UGyZj+3ywl0LO
uH02+rG+3CglQfg+WpS2I5gjzaUuCO/BOV31+pW5JW1/4Kz26PjD/YHprK5q
bRnMBvqS501NA2nD2euSC97V87qqoz0i4HvznY6+5XIBTGFFng==
                    
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-6., 3.6739403974420594`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu_6\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1024", ",", "300"}], "}"}]}]}], "]"}], HoldForm],
                     FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu_6", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {1024, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 24), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 3.061616997868383*^-16}], 
                    Offset[{10, 10}, {-5., 3.061616997868383*^-16}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    PaneBox[
                    StyleBox["\"\:2217\"", 20, StripOnInput -> False], 
                    ImageSize -> {11, 28}], TraditionalForm]], {-5., 
                    3.061616997868383*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"conv_6\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"512", ",", 
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1024", ",", "300"}], "}"}]}]}], "]"}], HoldForm],
                     FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["conv_6", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    512, {3}, "PaddingSize" -> {1}, "Input" -> {1024, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 25), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 2.4492935982947064`*^-16}], 
                    Offset[{10, 10}, {-4., 2.4492935982947064`*^-16}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzF1s9LG0EUB/CNtpKLtvVmC4q3loooolgqBUUjHnIwNhSiRnZ+iSARkoh4
MeBJCJ7Egyi0Je5MD+JdSr3Yf6A92HMFPVr0YitofOtO7DRaE83s5gtvIXsY
Pnmz83Yb0VSIVRiGkfDDJWTOdMfj5uzQY/gRjiUmxmOUDMSSdJzGO1El3KyD
eg71wNCeoK6FEFqr1rWWEi0+1rbykBDxWcdaedHh81EiMox+ympYKz8l+yjm
C7YNjMc6QHkpyUexmLRtjIhThkRAF0rJvX0YixD07Mz2EWJFdaKU3MvHTKsL
bCeX+4r5rG6Ukjv7oG8vwHbo9E0su4FScicfQvwpPGs/nb6JTcNIVbgFkyna
NzycqYG+fZNn9evY2Hu/mzCZonzhcKoK+vVFntUfGK/Wug2TKcbnY4Rb0naA
0HqD66q/KegjhKdz85eQ9RYvUEpu9THMY7n5S02r1yuUkv/6oG9v7fkLdY4x
H/ESpeRGHzxjb8D1W864Ga9RSq75oG8vwfbLsfGlcqCU/OOLRj88o4Tvyb5t
eDB/C+XKx8Irj+AcfJfnYcej+Vsolz57/oJp25kjfDcSsZ6UGyZj+3ywl0LO
uH02+rG+3CglQfg+WpS2I5gjzaUuCO/BOV31+pW5JW1/4Kz26PjD/YHprK5q
bRnMBvqS501NA2nD2euSC97V87qqoz0i4HvznY6+5XIBTGFFng==
                    
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-4., 2.4492935982947064`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu_6a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu_6a", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {512, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 26), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{10, 10}, {-3., 1.8369701987210297`*^-16}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    PaneBox[
                    StyleBox["\"\:2217\"", 20, StripOnInput -> False], 
                    ImageSize -> {11, 28}], TraditionalForm]], {-3., 
                    1.8369701987210297`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"conv_6a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"3", ",", 
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["conv_6a", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    3, {3}, "PaddingSize" -> {1}, "Input" -> {512, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 27), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{10, 10}, {-2., 1.2246467991473532`*^-16}]]}, 
                    InsetBox[
                    FormBox["\"T\"", TraditionalForm], 
                    Offset[{0, -1}, {-2., 1.2246467991473532`*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"transpose\"", Bold, StripOnInput -> False]}, {
                    
                    StyleBox[
                    TagBox[
                    RowBox[{"TransposeLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "300"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["transpose", Bold], 
                    Style[
                    HoldForm[
                    TransposeLayer["Input" -> {3, 300}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 28), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-1., 6.123233995736766*^-17}], 
                    Offset[{10, 10}, {-1., 6.123233995736766*^-17}]]}, 
                    InsetBox[
                    FormBox["\"S\"", TraditionalForm], 
                    Offset[{0, -1}, {-1., 6.123233995736766*^-17}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"softmax\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SoftmaxLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"300", ",", "3"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["softmax", Bold], 
                    Style[
                    HoldForm[
                    SoftmaxLayer["Input" -> {300, 3}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 29), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 30), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[CompressedData["
1:eJxTTMoPSmViYGCQA2IQDQG2B84+m2Kj+ve+DYRvc4BnYfLNQ4/uQfnWB3yi
jcoSTtyF8q0OdIsyCv9bewfKtzxw+vz59bMn34byLQ5wdc3zsay8BeWbH/By
yX15Le4mlG92oOufdVuJyw0o3/TAyR1cykJa16F8kwOcxTf3r+e/BuUbH/DQ
XRHj+/UKlG90oON52c9Xty5D+YYHji90ndZx4BKUb3CAPUbEWG3ZRShf74C7
2OPzh7svQPk6UP+dg/K1oP45A+VrQN1/CspXg7r3BJSvAnXfMShfCeqew1C+
AtT+g1C+DNS+fVC+BNT8XVC+CNS8bVC+AFT/RiifA6p+FZTPAJVfCOV/2A/h
T4TJwwEAP+KK5A==
                    "], 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 20, 20, 24, 24, 24, 20, 24, 24, 24, 20, 24, 24, 
                    24, 24, 24, 24, 20, 24, 24, 24, 20, 20, 20, 20, 20, 20, 
                    20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {1071., 46.000000000000064`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{28., 28.}, {28., 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Scrollbars -> {True, False}, ImageSizeAction -> 
                    "Scrollable", ImageSize -> {800, Automatic}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "conv_1a"], 
                    NeuralNetworks`NetPath["Nodes", "pool_1"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_1_upsample"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_1_res_a"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_1_res_b"], 
                    NeuralNetworks`NetPath["Nodes", "pool_2"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_2_upsample"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_2_res_a"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_2_res_b"], 
                    NeuralNetworks`NetPath["Nodes", "pool_3"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_3_upsample"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_3_res_a"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_3_res_b"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_3_res_c"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_3_res_d"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_3_res_e"], 
                    NeuralNetworks`NetPath["Nodes", "pool_4"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_4_upsample"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_4_res_a"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_4_res_b"], 
                    NeuralNetworks`NetPath["Nodes", "pool_5"], 
                    NeuralNetworks`NetPath["Nodes", "bn_6"], 
                    NeuralNetworks`NetPath["Nodes", "relu_6"], 
                    NeuralNetworks`NetPath["Nodes", "conv_6"], 
                    NeuralNetworks`NetPath["Nodes", "relu_6a"], 
                    NeuralNetworks`NetPath["Nodes", "conv_6a"], 
                    NeuralNetworks`NetPath["Nodes", "transpose"], 
                    NeuralNetworks`NetPath["Nodes", "softmax"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 300}, NeuralNetworks`RealT]], 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{300, 3}, NeuralNetworks`RealT]], 
                    Association[
                    "conv_1a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 4, 3}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 4, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "pool_1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3}, "Stride" -> {1}, 
                    "PaddingSize" -> {1}, "Function" -> Max, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$Channels" -> 64, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_upsample" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_1_upsample_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_upsample_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_1_upsample_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_1_upsample_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_1_upsample_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_upsample_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_upsample_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_ramp_shared", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_bnl_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_cnn1d_branch_1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_ramp_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_ramp_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_cnn1d_branch_main_a", "Outputs",
                     "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_cnn1d_branch_1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_plus_shared", "Outputs", 
                    "Output"]}], "arcb_1_res_a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_1_res_a_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_a_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_a_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_a_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_a_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_1_res_a_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_a_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_plus_shared", "Outputs", 
                    "Output"]}], "arcb_1_res_b" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_1_res_b_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_b_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_b_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_b_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_b_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_1_res_b_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_b_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_plus_shared", "Outputs", 
                    "Output"]}], "pool_2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3}, "Stride" -> {1}, 
                    "PaddingSize" -> {1}, "Function" -> Max, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$Channels" -> 128, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_upsample" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_2_upsample_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_upsample_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_2_upsample_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_2_upsample_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_2_upsample_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_upsample_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_upsample_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_ramp_shared", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_bnl_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_cnn1d_branch_1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_ramp_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_ramp_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_cnn1d_branch_main_a", "Outputs",
                     "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_cnn1d_branch_1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_plus_shared", "Outputs", 
                    "Output"]}], "arcb_2_res_a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_2_res_a_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_a_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_a_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_a_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_a_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_2_res_a_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_a_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_plus_shared", "Outputs", 
                    "Output"]}], "arcb_2_res_b" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_2_res_b_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_b_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_b_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_b_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_b_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_2_res_b_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_b_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_plus_shared", "Outputs", 
                    "Output"]}], "pool_3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3}, "Stride" -> {1}, 
                    "PaddingSize" -> {1}, "Function" -> Max, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$Channels" -> 256, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_upsample" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_3_upsample_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_upsample_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_3_upsample_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_3_upsample_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_3_upsample_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_upsample_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_upsample_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_ramp_shared", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_bnl_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_cnn1d_branch_1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_ramp_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_ramp_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_cnn1d_branch_main_a", "Outputs",
                     "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_cnn1d_branch_1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_plus_shared", "Outputs", 
                    "Output"]}], "arcb_3_res_a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_3_res_a_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_a_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_a_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_a_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_a_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_3_res_a_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_a_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_plus_shared", "Outputs", 
                    "Output"]}], "arcb_3_res_b" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_3_res_b_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_b_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_b_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_b_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_b_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_3_res_b_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_b_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_plus_shared", "Outputs", 
                    "Output"]}], "arcb_3_res_c" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_3_res_c_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_c_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_c_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_c_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_c_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_3_res_c_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_c_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_plus_shared", "Outputs", 
                    "Output"]}], "arcb_3_res_d" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_3_res_d_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_d_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_d_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_d_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_d_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_3_res_d_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_d_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_plus_shared", "Outputs", 
                    "Output"]}], "arcb_3_res_e" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_3_res_e_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_e_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_e_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_e_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_e_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_3_res_e_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_e_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_plus_shared", "Outputs", 
                    "Output"]}], "pool_4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3}, "Stride" -> {1}, 
                    "PaddingSize" -> {1}, "Function" -> Max, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$Channels" -> 512, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_upsample" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_4_upsample_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_upsample_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_4_upsample_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{1024, 512, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 1024, "KernelSize" -> {3},
                     "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1},
                     "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_4_upsample_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_4_upsample_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{1024, 1024, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 1024, "KernelSize" -> {3},
                     "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1},
                     "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_upsample_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{1024, 512, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 1024, "KernelSize" -> {1},
                     "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1},
                     "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_upsample_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 300}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_ramp_shared", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_bnl_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_cnn1d_branch_1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_ramp_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_ramp_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_cnn1d_branch_main_a", "Outputs",
                     "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_cnn1d_branch_1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_plus_shared", "Outputs", 
                    "Output"]}], "arcb_4_res_a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_4_res_a_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 1024, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_a_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_a_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{1024, 1024, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 1024, "KernelSize" -> {3},
                     "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1},
                     "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_a_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 1024, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_a_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_4_res_a_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{1024, 1024, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 1024, "KernelSize" -> {3},
                     "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1},
                     "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_a_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 300}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_plus_shared", "Outputs", 
                    "Output"]}], "arcb_4_res_b" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_4_res_b_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 1024, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_b_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_b_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{1024, 1024, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 1024, "KernelSize" -> {3},
                     "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1},
                     "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_b_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 1024, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_b_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_4_res_b_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{1024, 1024, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 1024, "KernelSize" -> {3},
                     "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1},
                     "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_b_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 300}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_plus_shared", "Outputs", 
                    "Output"]}], "pool_5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3}, "Stride" -> {1}, 
                    "PaddingSize" -> {1}, "Function" -> Max, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$Channels" -> 1024, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "bn_6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 1024, "$SpatialDimensions" -> {300}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "relu_6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "conv_6" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 1024, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "relu_6a" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "conv_6a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{3, 512, 3}, NeuralNetworks`RealT],
                     "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 3, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 300}, 
                    NeuralNetworks`RealT]]], "transpose" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{300, 3}, 
                    NeuralNetworks`RealT]]], "softmax" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{300, 3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{300, 3}, 
                    NeuralNetworks`RealT]]]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4\"", 
                    "\"300\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"300\"", 
                    "\"3\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.7396175695687923`*^9, 3.739617586278483*^9}, {
   3.739617644366316*^9, 3.739617657772005*^9}, 3.739617756259921*^9, 
   3.739618347077156*^9, 3.7396184406611834`*^9, {3.739618510219841*^9, 
   3.739618520750853*^9}, {3.739618581670554*^9, 3.739618584465673*^9}, {
   3.739618628618445*^9, 3.739618698434245*^9}, 3.73961919510461*^9, 
   3.739625832271858*^9, 3.739626310306912*^9, 3.7396352538165197`*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"19e2faac-8886-42d5-8b23-f580bb6739ce"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Net Go", "Section",
 CellChangeTimes->{{3.739621222179888*^9, 
  3.739621222891553*^9}},ExpressionUUID->"a0e0327b-4f87-41ac-8413-\
dbf24362d29e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"inet", "=", 
   RowBox[{"NetInitialize", "[", "net", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7396201539389133`*^9, 3.7396201641476192`*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"8a87b8db-ada4-44cf-a57e-3dfa0d10cc0d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tnet", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"inet", ",", "ds", ",", "All", ",", 
    RowBox[{"LossFunction", "\[Rule]", 
     RowBox[{"CrossEntropyLossLayer", "[", "\"\<Probabilities\>\"", "]"}]}]}],
    "]"}]}]], "Input",
 CellChangeTimes->{{3.739619196568871*^9, 3.73961922505975*^9}, {
   3.739619587577345*^9, 3.7396195895452223`*^9}, {3.739619672843882*^9, 
   3.739619719266604*^9}, 3.739619757950926*^9, 3.7396198808109293`*^9, {
   3.739619988231215*^9, 3.739620012555592*^9}, 3.7396200686156683`*^9, 
   3.739620168284272*^9, {3.739620393778974*^9, 3.739620400257584*^9}, {
   3.73962098972618*^9, 3.7396209906911716`*^9}, {3.739626218201069*^9, 
   3.7396262200671663`*^9}, {3.739626333469644*^9, 3.739626338618868*^9}, 
   3.739635258319916*^9, {3.7397877930141563`*^9, 
   3.7397877982767677`*^9}},ExpressionUUID->"2641428d-74d8-41e9-a5ee-\
b65bfe28dde1"],

Cell[BoxData[
 RowBox[{"$Aborted", "[", "]"}]], "Output",
 CellChangeTimes->{
  3.73961972159087*^9, 3.7396197785295973`*^9, 3.7396198830967484`*^9, {
   3.739620006691457*^9, 3.739620014915139*^9}, 3.7396200710033913`*^9, 
   3.739620325374378*^9, {3.739620397710206*^9, 3.739620402197641*^9}, {
   3.73962098865793*^9, 3.739620992845748*^9}, 3.739625841580686*^9, 
   3.739626226483139*^9, {3.739626317663032*^9, 3.739626341013646*^9}, 
   3.739626457477797*^9, 3.739635457175623*^9},
 CellLabel->"Out[65]=",ExpressionUUID->"fc505867-5dbf-491b-a552-7291b6c9602f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"ds", "=", 
   RowBox[{"Import", "@", 
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<data\>\"", ",", 
       "\"\<test_set.mx\>\""}], "}"}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.739733886163537*^9, 3.739733894159603*^9}, {
  3.739736016752136*^9, 3.739736017004321*^9}, {3.7397857647656393`*^9, 
  3.739785765143692*^9}, {3.7400405468610163`*^9, 3.740040547813377*^9}, {
  3.740040726921835*^9, 3.7400407271377687`*^9}},
 CellLabel->
  "In[449]:=",ExpressionUUID->"93daba4e-06d3-4d43-aa9a-05b76834ccc8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetInformation", "[", 
  RowBox[{"inet", ",", "\"\<LayerTypeCounts\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.739625788610454*^9, 3.739625789754244*^9}, {
  3.739625879015669*^9, 3.739625931128098*^9}},
 CellLabel->
  "In[254]:=",ExpressionUUID->"702fadb5-f3cc-4691-8136-9d5356ff12fe"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"ConvolutionLayer", "\[Rule]", "37"}], ",", 
   RowBox[{"PoolingLayer", "\[Rule]", "5"}], ",", 
   RowBox[{"BatchNormalizationLayer", "\[Rule]", "27"}], ",", 
   RowBox[{"ElementwiseLayer", "\[Rule]", "32"}], ",", 
   RowBox[{"ThreadingLayer", "\[Rule]", "15"}], ",", 
   RowBox[{"SoftmaxLayer", "\[Rule]", "1"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.739625790763605*^9, 3.7396258496747227`*^9, {3.73962588553548*^9, 
   3.7396259317538157`*^9}},
 CellLabel->
  "Out[254]=",ExpressionUUID->"046f8951-e60d-4914-99e1-83f28be4f6a6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tNet", "=", 
  RowBox[{
  "Import", "[", 
   "\"\<~/Downloads/latest_ec2/checkpoints_y2018_m7_d6_h13_s2/net.wlnet\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.73973330604206*^9, 3.739733338112792*^9}, {
  3.739785772953168*^9, 3.7397857785687447`*^9}, {3.7400384825722733`*^9, 
  3.740038484700911*^9}, {3.74003851587189*^9, 3.740038525241416*^9}, {
  3.740038572908124*^9, 3.740038596927033*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"7858fdb8-5a00-4a7f-9e8d-34a1be46e629"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"4\"", "\"300\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"300\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["54", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    PaneBox[
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], 
                    
                    LineBox[{{-31., 
                    1.8982025386783976`*^-15}, {-30., \
-1.4436391420446515`*^-11}}], 
                    
                    LineBox[{{-30., -1.4436391420446515`*^-11}, {-29., \
-3.478639660495574*^-11}}], 
                    
                    LineBox[{{-29., -3.478639660495574*^-11}, {-28., \
-1.4969973982130096`}}], 
                    
                    LineBox[{{-29., -3.478639660495574*^-11}, {-28., \
-4.8286769816737604`*^-11}}], 
                    
                    LineBox[{{-29., -3.478639660495574*^-11}, {-28., 
                    1.5030026034292536`}}], 
                    
                    LineBox[{{-28., -1.4969973982130096`}, {-27., \
-2.4969973979582374`}}], 
                    LineBox[CompressedData["
1:eJxN0m1IU1EYwPFt4T7kqGHO8CVNram1zdSyc+8ZVCiLhaabZo5ladQyTaUa
NnSQVBQWKFHQyyB7WelKY1RqUnAespoRJM5RGtTIkZURVs7NmYPc2Zf7cA6X
34eH8/9wk/c3aA8KeDyeYvGGvuFRwpwOXXg84yc/Yp+ZgjMY3qZvpo7JWFLU
P4mh5cMm6jPysVPyMQwxho3UG9LY6MohDOdd2dRJdAGDOyWLunjeWjRvxSDR
ZFLDaE+g6iKGdfvk1MbbefyzZgzJheupDXQwzMVlUAdC60UYZNvTqNs8aPFg
2FIspU5NCQ0GeW7YfZWRiweDby7sHR1edYeXhetX06k/fwoNC/GS8HvHEhxH
ExwsmOoV1EK9PUJvZ+GRNZvTw4IsPp/Tw0L+NjWnh4VWeyH1GtrDQqBaw+lh
4XJNKaeHAX1vGaeHgZ3qck4PA0ekOk4PA/0FOk4PAypbeH9vzuzJrGIG2l2i
3xEeP1m9atgqwQzsUmQlBu1+Ykv1uqLSGLjSNyi5VuEnC6oD4oxoBkrqXr4f
/+4jK88l7S4XMNCmzakiWh9Z8Ky13fyDIM8g7lVbZklXxQmhYAKBsUvvNL3w
kkTvigbzKIKUWMlAwdAM2dP5b2L5awQFT5WHX3X/JXd9SdWWewiUdsfPnhvT
pLFOYDndioDfOV/r10yRd5F3mofqEXwrjSo5dPwreTjCX1pThuDXwLJbQcEX
EkMSVdVbEUi73Q+M/I8kwhXIHJQheKKt9bDjTmIWX3I0xSMQDreMWOLekCbj
lKhdhEB7v3m6r/E5Cf/PCGTu3Emn1kr+A+XoiwA=
                    "]], 
                    
                    LineBox[{{-27., -2.4969973979582374`}, {-26., \
-2.4969973975771307`}}], 
                    
                    LineBox[{{-26., -2.4969973975771307`}, {-25., \
-2.496997397772502}}], 
                    
                    LineBox[{{-25., -2.496997397772502}, {-24., \
-0.039694395639740726`}}], 
                    
                    LineBox[{{-28., -4.8286769816737604`*^-11}, {-27., \
-0.4969973981805521}}], 
                    LineBox[CompressedData["
1:eJwl0n0s1AEYB3DKSboiXdvFVXNqyEvGxu+leuqPEJ0rtaSTrssVk+QqNdoq
6w91Ssu8DHNap7etdsvlbZpn6Jiwy3HE3bkc8tKal8uIXvj57nn27LM9fzx/
PO6S1GjpGhsbG//lXpmr2YekIINqlLd9fBlusvbP0qhNGM9OSS0C9nAu+I3S
KKDc46/9fg1+XRzznJ7GaLVg1FWpBoctKfoQDY01ZdPr7jh/BMWLIv5UJY0+
/n/XB7k3gTWnsHlnOY2Fc8GsMV4r2GmS6jUPaSz3en4jPrMDtMedHEeu0egh
eeYXWfYFYgKy32aIaGwedhwIU3XDqZNua+3CaLQkVYhiXXtB22M9Fh5Io1tF
EldNf4VWNacwbDuNSQUxm09zBiBkOqPH1oHG9v2poYeVBuDLPdk3ZygML1FV
Z04aITvLlX5poLD/nZt0cdwEib0nJE81FN6/pYpqVgxC8wPdPUJFIf92CJVs
b4aLTCjcFOE1WcQ1w4JS+FsppLD7327Gjy3EclEY6sxnvIu/EgoTMnmMq8Qb
lotCn0NbGUcorEcUVhJLz7MZm4wrIbHWYMtYxmtJ47WQePf9r4kV24tULJGK
xJmh74xX7yFxU0clY6dDt/a0C0m8wnHhC1hmGDkxEHWXJPHcbPETXcEgWMpy
dVkeJJYsfK4z9phgIz+/RreRxDy6urGmxQgS4+Qf2TyBkbVxrxIuG2BIm/dc
bCEQZfXJ35r64fFSzuvSTgKnL+nZezv74IK418mzjkBz0Ru5QK6HhCWZ/l8F
gTkscmzfog4mJBaH0EcEyisLY2TlWjjD5h7YkU7gdW5itHS+DarmndOzxQT6
7+TVLfI+wYJnp+r+UQIfzhW0C882gGex8KcLtbwf++Ot7swHAGG+f5A3gYGd
VwPspa/gYJgibWQbgZrFPtEUPxd8s1KqvdkExk2KGgdu5zSs/jOBvoPBo13R
yob/jP9rGw==
                    "]], 
                    
                    LineBox[{{-27., -0.4969973981805521}, {-26., \
-0.4969973987113276}}], 
                    
                    LineBox[{{-26., -0.4969973987113276}, {-25., \
-0.49699739873949356`}}], 
                    
                    LineBox[{{-25., -0.49699739873949356`}, {-24., \
-0.039694395639740726`}}], 
                    
                    LineBox[{{-28., 1.5030026034292536`}, {-27., 
                    1.5030026036688484`}}], 
                    LineBox[CompressedData["
1:eJwl0n1MzHEcB/DrfkUqY60mt8NQ1tPE2s739/td+35HOHchhaUj9GB1WQ+n
1sNCNianhZwi0kzlqZ1c1K2oT5HTA9GZ1K266UGm3ajDyVXq7r33Z5+9/vv8
8VkdnRwWx+VwOOvnZn7bIgTHMyg9xMWMc2PjVLcnWYj0+1JwtNuMU8KrvIQj
LCj9T/AUmr+4q/Nj3OePLGjOfl/2unEKl7wfSDrRwkJzoOS8+8g/rItqJ4tV
LDyjC+Mz/aZxTkaxvqKYhctF0GC8MoMLedtw0GkWfL0SidCFQzxEnxJ1sSzk
PvymVwxyiBNHdDRexIJYL90w1GJHbou/xE5sYuFN9M/ZdCGXHPH9oGtcx0K3
k3pnwz0uCS1zU711Y0GmK11eY0+RxAdVkyu5LOQ/fxpzKJwiatGNcrWRAeHr
3371Vynie7IP8voYyPwRI29rpUjnthTRnVYGCGsRXPxGkdKKSNbymIGiyqas
2RmKHLOGgQ+pdcy6Bfbkb/nuqfLdDOwKbbC6YAjNlYGMmkarPdfMh4GQm81W
1x5xnisDHQtfWS0uM+0oM9Hwy9xq9UD/fGjoSNJaLedrU/laGkIS3li9QFrt
IK2mIWvMZts9NAhkNr/K6fGRh9JQGaNrf26hSN3miBAPIQ0lL03ZuQaKCDVj
byN8aHBX+EtSn1Bkf3+eKtCDBte6bPZSMkUc1Mh435EGpXhQ0sejiEhgztdM
IbgVHJkTVsMlq2RaRbQRgXfF984/iEsu7Kz8WjmEgDl+Naj9kR3JMyjvnutD
0HVjz7s2ZzuyJFRtaK1FUGwyrdiYYMHjWWGrhq8h8FTWS9IC/mB+VPphQwaC
ra4mr0OyCVxq4d2pP4hgvH/zgZ7AcZyyb8uwPBhB2t5zTThnGF+PN3ovCkCw
fenh6VGpHrsK+Mkn+Qh6hxyk7Wu7sOFFZ22XC4JTm3qDxhJqse2fEfgPCka7
w8qb/gPodlVp
                    "]], 
                    
                    LineBox[{{-27., 1.5030026036688484`}, {-26., 
                    1.5030026038355417`}}], 
                    
                    LineBox[{{-26., 1.5030026038355417`}, {-25., 
                    1.5030026048402207`}}], 
                    
                    LineBox[{{-25., 
                    1.5030026048402207`}, {-24., -0.039694395639740726`}}], 
                    
                    LineBox[{{-24., -0.039694395639740726`}, {-23., \
-0.03969439514241772}}], 
                    
                    LineBox[{{-23., -0.03969439514241772}, {-22., \
-0.03969439514045668}}], 
                    
                    LineBox[{{-22., -0.03969439514045668}, {-21., \
-1.5141362306974018`}}], 
                    
                    LineBox[{{-22., -0.03969439514045668}, {-21., \
-0.0396943954014533}}], 
                    
                    LineBox[{{-22., -0.03969439514045668}, {-21., 
                    1.4858637698420138`}}], 
                    
                    LineBox[{{-21., -1.5141362306974018`}, {-20., \
-2.514136230992476}}], 
                    LineBox[CompressedData["
1:eJxN0l9IU1EcwPGlqIEphSutJKslKjrbufdMbL0UppCJG0I5UnRlSUUoNR1l
cw6XWmq2ZVbYVHRSZCRmtRUa5/eSC0tSFuSfspymTR9Mc04tJXf2cn+cw+XD
4Ry+D3fP6fy0s148Hi92fbu/nhFDUdUNx+SBJeLY3nVl9Q+GqdcV1FujvKWW
SQzR/eXUOuFgqXAQQ+JAGbUoQsJXvMfAdF+nDtvmvoDBpddRy1ZapSutGPTS
UmqwPVs+ZcDAW9JSK1sSNpSrMSRVllDn0sGg8NVQ0+tSDDqipq4Zj19fGOwb
PRbsdQ8Gjf0atUXhb1b4Y0hL8ZwfbVpYXyycSSqmHv3mHhY6+j3vXw61Xgq1
shA/4+nxzejwyehg4W+djtPDwoqlhtPDQjr/DqeHhThBHaeHhXsT96nNtIeF
Ank9dTLtYeCzxsjpYcCS3sjpYWDHeBOnh4HV3c2cHgb4X0zUKdLJRSRjwJj8
Kw5HLZGR6lpt8EEGZra83BXqcpHAsDzv4AgGvIR+zY0mF5nyUZWI+Ax8fTj2
tivWRXIPP13I8WJAm5VQqHywSKoHAnKezyFwFMRY3/1wErm5oTfEjiDku/FF
p5+T9M6ejK63IQhsuCuRBCyQseLEMnEPgg/tQZmZc/NENp+7780jBKnHbE7V
5t8kvCcyu/4mgpaKi6rRvmmSvVwpHspD0Ca6Kq90/CSrVbceF55A0Gn4aJhT
jhGeRvQq/xCCouN9RyKHh8m5T8osawyCWlcNf+KJjcRp003qnQgyg7rDhe29
5Lx+RHd7EwK8f3ptrZwQz/+M4MKsYOhfahv5D8PPljs=
                    "]], 
                    
                    LineBox[{{-20., -2.514136230992476}, {-19., \
-2.5141362311150304`}}], 
                    
                    LineBox[{{-19., -2.5141362311150304`}, {-18., \
-2.514136231030931}}], 
                    
                    LineBox[{{-18., -2.514136231030931}, {-17., \
-0.05138387823714548}}], 
                    
                    LineBox[{{-21., -0.0396943954014533}, {-20., \
-0.514136230075478}}], 
                    LineBox[CompressedData["
1:eJwlknlI03EYxk3SRNMKkjRMTQ2PsvY7ZiqDrwnmtZTEvKaxvCus1A6lpYmz
zDwyykhEO5bpkDWaWat0b2xumbl5tJmpW0xZlqZkFrWmNreH5+Xlw8vL+/zx
7kw/HZdlaWFhsddYa90sKoRr/KaH4zii5Brbwx9/kpDa01AWT6kVKX+H8D10
JPz9SquUFV5HhbSHOzQqEvRqwjN0phVRjmJ37aUkLLiyh75HdaJNqbMePAEJ
t3dLKZrFbrQ5YOgltJDQZcu/o6dKEGVOywyrIoE236bbNt6HCkrcHWmFJDDg
UIVsRoGUc9dGOSkkVIUohOx9I0h/eY8D4yAJU5VSec4TJVr5l/dLipFQLMta
tZweRdq0mJoZFxKiDB3RCQNjqLV1QCnaQEKCd5Pg2MlxFKmaldMXCWiOIPbv
6plA8rm2oroJAjyYBap7vZMI/7Z+5KqUAG1ecv2HMjU6L1+dpPIJUOfP5MCi
GmWbRIDj1sCUTCcN0nNijSbAjnfAxLVTgUYTEF4fYWJPjzURIO2mm7iLaWc0
AZVEjImjWpYiW5ZwqF00z9WTa8JhVG/eL3CR5bvIcMikh5rYmsG3YvBxoH4x
3zfnwUFb4mDi58np7P5YHHyiCZ6zMS+7q7zrUhAOt5pfc4NK1WiA9c7A8sTB
q5gbKxFNorqOgMQ+exxUnwxNQsEEeh/2tjf9DwZcseCmM2McVUSURkROYcAh
FJTpZ2PoRSdDw5JjAH6xF5wloyi3Kq1qWYjBunYiW1ihRPV97Mj+Rxhk8ljL
Yv0wmq8+Xu5Sg4GbTVK+T7wCXZHoClfOYbBZBDZ5rn0o6Yxhez4Tg4Yy4s2R
eDHKuMEtOkvHILuFSe2dfYXavH5U2wRjMBh3ys/b+iny9h9M9PfFYDjYXfxg
4T763B4+pnXGwEYnSrrolItGGhO3+G7EIMMNHluxGkXmf8bgxILnmCGGK/oP
5htwNg==
                    "]], 
                    
                    LineBox[{{-20., -0.514136230075478}, {-19., \
-0.5141362303010044}}], 
                    
                    LineBox[{{-19., -0.5141362303010044}, {-18., \
-0.5141362302740606}}], 
                    
                    LineBox[{{-18., -0.5141362302740606}, {-17., \
-0.05138387823714548}}], 
                    
                    LineBox[{{-21., 1.4858637698420138`}, {-20., 
                    1.4858637696042094`}}], 
                    LineBox[CompressedData["
1:eJwl0n0s1HEcB/BzvxGl1DyUslqdSk34PdTZwvcbOdIT1qg8hN2VZJ07S3nY
VSYMqTRJ85C4MhlWHmrn4TMtymOOwnnY0C2thrgiLjp3772/++z1x2f7/vHZ
GSb0FbBZLJad5q1OXQ6CQXKehWXLPArkCyoK5hgoF/Ic7DIW0Lhv+W4nJQOZ
jf0yP/FfdL+9TzDQx8BzsffbrBuLiN81ejW6mQFVepXNeMESCglow+srGJCs
XTByV6pRkjhnSJrDgMvUniDZ8WX0yZSHnG8ywOU673KXryA39OVKL5+BanG+
raiehUdUHqHhngxcVpvc/lioh9uOjPNnuQwExUq9Ay3ZOJ/T09u4hwFThaCg
KImN/Z+YVXSaMZC23Scid4yNF6Tlc9vZDDTzLlW7ORBYwssteTVFg8y3NOFp
FIF/xisgVUHDNVezd5XPCIx4UZ5F72mYMX+ZImohcJz0/GF1JQ22nZFtyiEC
X9SGBiv94HTjCQIvlpzWlIY70xe0zpxw1JQGIjtUa86u1dDw6HeY1rUh6zSl
AW/ia+1VqDpWqKJg+ZvOoyOroUAeK9BabNUqsmqloL5FZ4OAKv2AKo27dNb9
h4JDMt0+pzvml8ibgheBep3FgwTmZnyO2OxEQdNK/4PLDQQuyE+U++2jIL5k
cjAok8BnCYmNwxYKhrxo6a0TBA5vaI0sNqRgbLZurmeejdvbLxRWLZKQkRfz
3uc+Gyfa8cB/ioRhD+FWlgUb31PGdT+eIEGuKpodTtXD0zP/OqIVJEQWbzg1
OcnC5pPJH+pqSZhX1hhZ71Ujb5eeM4PZJHTbz7i2z/xB+XPDooHrJARYd3i0
2M2i5TVlO2oCSeCmPHTY3/wDieMdg4VHSeBsk4cLTb6ihZOpB9bYk7BkWBr1
Jk2Bsm7m3k2wImHFWJDQfK8T4Y2Rkm5jEiSyDd/5514j3T2TEDHNGVSfKmv6
DxNaYDM=
                    "]], 
                    
                    LineBox[{{-20., 1.4858637696042094`}, {-19., 
                    1.485863770143227}}], 
                    
                    LineBox[{{-19., 1.485863770143227}, {-18., 
                    1.48586377021232}}], 
                    
                    LineBox[{{-18., 
                    1.48586377021232}, {-17., -0.05138387823714548}}], 
                    
                    LineBox[{{-17., -0.05138387823714548}, {-16., \
-0.0513838787861677}}], 
                    
                    LineBox[{{-16., -0.0513838787861677}, {-15., \
-0.0513838786796432}}], 
                    
                    LineBox[{{-15., -0.0513838786796432}, {-14., \
-1.5187114847219894`}}], 
                    
                    LineBox[{{-15., -0.0513838786796432}, {-14., \
-0.051383878660572285`}}], 
                    
                    LineBox[{{-15., -0.0513838786796432}, {-14., 
                    1.4812885150881252`}}], 
                    
                    LineBox[{{-14., -1.5187114847219894`}, {-13., \
-2.5187114843412237`}}], 
                    LineBox[CompressedData["
1:eJxN0ntIU3EUwPEhNYNZuRybikXJdne3u0wUbaBkxZA2SnJiSCPRgaEoWiku
xB4moSVYkYlUNh8zLWoY0jSKfqemucwHpgwrbJZOnVqWj+Yjo+3snx3O5fKB
+4Mv99492jx1hg+LxQpzXe67Z2RQ7DefZTi6QoYjC3+vTTEAqp/ovWr2g9w+
BhoKfqDZmtbNmlYGdl+fQ6cnFNBwk4Hoiln0QZn7AAMO3Qy6bkmpX1IyID/u
QF9p1iyaQxkI5U2jpxRlPn6rUmgxT6L7et0jhfepdjQe10thfWgcHdJ91rVS
6OB+R8cr3COFDcEYOucN37VS6JkcRd8+4HCtBHZd/IJ+9dI9Evg7OoKekFeO
yysloGVb0X6mNI4pTQJq50c05vTS0BpgQS9iDw1Pkru8emiQjZnRmKOgIazN
42zsoeFZfye6CnvE0B7R7dUjhjhbj1ePGJTDA2gO9ojByrV6vR8K+E7P9zpk
KNuRX0dBemPjqfqYFXIsPKAqu5CCh0lGec0WV++ZvERTAgXjvv7r5W1OEn76
vipJQkEgWAz5sU7C9r976TCbgvjikaiUxj+kIDfzV6ldBDmxccbo6WVSVOJb
K+gWQTlrY+t2zjIJVuqubjwWgd7CTf7GWSKJXe2Pom6JwFh1ofTpzAIRJ9zQ
xSSKYF/IkefTtfOEV7/zXTBfBB1rTauBNgcJeq29M2QTwmInb3i2ZoJENKXa
M4xCIMv0tbfVNqI9wTUNlgjhn1xVvTBnJS2DRb6Ck0JQNQfrBzL7ySbBvU9R
+4WQWjGRpfgMREedk4UFuZ4/b4nc9sJAPP+zEFIuL3z9kNMQ9x+JlYwS
                    
                    "]], 
                    
                    LineBox[{{-13., -2.5187114843412237`}, {-12., \
-2.5187114840805114`}}], 
                    
                    LineBox[{{-12., -2.5187114840805114`}, {-11., \
-2.5187114846038687`}}], 
                    
                    LineBox[{{-11., -2.5187114846038687`}, {-10., 
                    0.03598630043529799}}], 
                    
                    LineBox[{{-14., -0.051383878660572285`}, {-13., \
-0.5187114850758682}}], 
                    LineBox[CompressedData["
1:eJwl0nlI0wEUB/DZOlZmI5JZaaKw+xeWhWlZe1jztlhSISZmcyrmlVqkGWXM
ytusJTlFM6+wZipm1rS9YaKzOcg8mpsj2/AkEy3zj67168v38fj89/54ruKU
0Jg1FArFzTr/9v/sxhx6n/HniSbVRV34cvM0gWJJvJbdIVdVdj2sF2gJlD2w
bPTmSSB74BXjuYJAR3Nr3GpeDTivdvtRCgnMt5OeK+puhQzfeo99cQTWZhw/
+ytfCfltKWYhEJiwo3JbA6MHzsAukZc9gfZVNZOHh/rBOK/I2jzFx4Cglw7H
VnXg1Okaq27n4/qShfCIt0Mwt9ibFFTIxxHDksgmeAQWI/dnekfzsbxCabp3
awz2rrmQKzvIR5EuYO3WS3qoG4+vOE3n40q6XJ3FMEDozL626xYe3i1sYXxI
NMIBoldLf8VD5+0FVIcrE3Cq1mWeVsTDKgY/19/DBE9EvnYXonhIzy2qkzSa
QEuGi417tGHJgyZYDqz+FljNxczBYdJOfanWcvFQwjhpIRkuTtEmSCeoGYlq
BhevNRhJywSz9wWzHKQI9aS7lP/CweTJIdIWr2KzVzEH+69rSNt2RFnLwS1O
3aQHyXvYqH99h/QjafjCzWo2ElRORc4zE2gUkdTGNDaO1bCj+wJNEBSstz3s
Z3XZ7ZYD9RPgHDGwwWcnG90++0mH3hgh5JP7jxcLLDRI4wzyMgPoxujj8h4W
fsqa6SzZPQ4NRyUtXx+y8NCAxrE1+yOMuuy52p7Mwi/Jtmv/3BuFs2kXPWeF
LPwer0jNjB4GM8s/ccmehd9K3RWUzvfgI76qX5pmonNev8ODJB2kczbdmOtm
Yim1wLFZpYErl1ci9GVMFNxvigmJ7YXQEEhXpTGR48VZSTmvht9PLerKk0yU
WWzk7mIlZMumAlL3M1EkTRkuamqH0XW+tCPbmUgrd/Oc9VTA/39mYlj2kuld
4mP4CxuCbGc=
                    "]], 
                    
                    LineBox[{{-13., -0.5187114850758682}, {-12., \
-0.5187114838329868}}], 
                    
                    LineBox[{{-12., -0.5187114838329868}, {-11., \
-0.518711485864997}}], 
                    
                    LineBox[{{-11., -0.518711485864997}, {-10., 
                    0.03598630043529799}}], 
                    
                    LineBox[{{-14., 1.4812885150881252`}, {-13., 
                    1.4812885158103777`}}], 
                    LineBox[CompressedData["
1:eJwl0nsslXEYB/Djfa2amltDVKeL9xznvOeEzHQifr9cVodqUcnlIMU0d7WE
SO6kIUkpC2WEXAqxpfW4z6UlyiWX2nKZLiyM4x7v+e559uzzx7M9fzwHLgfY
eRIsFkt3ozenLEKQnyAznSsX0O6WdonphAAC6YrywFApsn7qYBPSLoCdzpYm
WW6LKCmyqKOiSAB/QkD01XMJDVx7PzweKwBpDPWSureMjG9kRGlJBGAcHpiU
0L2CSuN1a2z0BPDaPX9oVbSG9AuTb4et0eBqCHkJH9ZRc29JX0EbDfuX3H1V
K1nYRy21oSuNhpKuPvDOlMPdg41towE0VMj7p60qEbijJa8w4jQNQhW9EfNb
BD7Xy5M85dOwZ16r2LifwF4KjhOm8jREVh6eG+WSePsVA7HnMB/sxdfrjnuR
GP+oilKp5sOLmu+EbRaJiegfaebJfPBYC25VfU/i8yerg6VufMjae1QhoZvE
nUx4QAQLOkoHSDwrzpkT5/BA8f4hxntagzaKB35aeowtmfBgn6o+Y596dd96
dR4cDJE5w2zygdmkDtw8JXPdu83oADtVtj8qSvkpStGBXViX8fa3lzZKBzzc
hIw/MvdwoaFVm/HZ1HTRUC4X2HX+EtsuEt8dMhMqh3ChSOmC8rEqEodXfS68
ascFl4becb84Emtr2JSM6XHB7Mvs93ELEsfIlxglKHPBxurVcsE0gR+H/xOf
nuNArBrLuCyRwJ6R7LEjgxyYtJx+sqJI4MkdBttONHMgrCeUnR4th7U5wsqw
Nxwwqs9p8v/JwvMq1kuxPhywstXUqHVaQevPDBVNaA44tNVLYlwWkGnn76ns
KQryf4mc0KcZVJ4VkF1cS8EZ71V2v9tfZL8V1D0SKWi05S6qro8hA7VhlzYX
Ci5qDMS5SkeQeWNL0DcRBVv0c6WOZT0oXiXC7pEmBQaDFg/1cROS/TMFDndm
Rjp8n6P/EeFaCw==
                    "]], 
                    
                    LineBox[{{-13., 1.4812885158103777`}, {-12., 
                    1.481288516016236}}], 
                    
                    LineBox[{{-12., 1.481288516016236}, {-11., 
                    1.4812885158052616`}}], 
                    
                    LineBox[{{-11., 1.4812885158052616`}, {-10., 
                    0.03598630043529799}}], 
                    
                    LineBox[{{-10., 0.03598630043529799}, {-9., 
                    0.035986300893285354`}}], 
                    
                    LineBox[{{-9., 0.035986300893285354`}, {-8., 
                    0.03598630094296645}}], 
                    
                    LineBox[{{-8., 0.03598630094296645}, {-7., 
                    0.035986300984518924`}}], 
                    
                    LineBox[{{-7., 0.035986300984518924`}, {-6., 
                    0.035986301016692236`}}], 
                    
                    LineBox[{{-6., 0.035986301016692236`}, {-5., 
                    0.03598630104059483}}], 
                    
                    LineBox[{{-5., 0.03598630104059483}, {-4., 
                    0.03598630105727831}}], 
                    
                    LineBox[{{-4., 0.03598630105727831}, {-3., 
                    0.03598630106844798}}], 
                    
                    LineBox[{{-3., 0.03598630106844798}, {-2., 
                    0.035986301075752306`}}], 
                    
                    LineBox[{{-2., 0.035986301075752306`}, {-1., 
                    0.035986301080100765`}}], 
                    
                    LineBox[{{-1., 0.035986301080100765`}, {
                    2.2035254216632553`*^-18, 0.03598630108203338}}]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-30.4, \
-8.661075571252438*^-12}, {-0.25, 0}, 
                    Offset[8], {1., -1.4438289622985194`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"4\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"4", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-29.4, \
-2.664639453115205*^-11}, {-0.25, 0}, 
                    Offset[8], {1., -2.0350005184509223`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-28.400000000000002`, \
-0.8981984389417202}, {-0.25, 0}, 
                    Offset[8], {1., -1.4969973981782232`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-28.400000000000002`, \
-4.288662053202486*^-11}, {-0.25, 0}, 
                    Offset[8], {1., -1.3500373211781864`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-28.400000000000002`,
                     0.9018015620436376}, {-0.25, 0}, 
                    Offset[8], {1., 1.50300260346404}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-27.4, -2.096997398060146}, \
{-0.25, 0}, 
                    Offset[8], {1., -0.9999999997452278}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-26.31111111111111, \
-1.4969973984537917`}, {-0.25, 0}, 
                    Offset[8], {
                    0.17777777777777715`, -1.394575566138201*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-26.4, -2.496997397729573}, \
{-0.25, 0}, 
                    Offset[8], {1., 3.8110670175228734`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-25.4, -2.4969973976943534`}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.95371274713807*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-24.448973997042668`, \
-1.142959546452231}, {-0.25, 0}, 
                    Offset[8], {1., 2.457303002132761}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-27.4, -0.29819843892764597`}, \
{-0.25, 0}, 
                    Offset[8], {1., -0.49699739813226534`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-26.22222222222222, 
                    0.5030026047115146}, {-0.25, 0}, 
                    Offset[8], {0.1777777777777665, -6.924771867033996*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-26.4, -0.4969973984990174}, \
{-0.25, 0}, 
                    Offset[8], {1., -5.307754791239461*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-25.4, -0.4969973987282271}, \
{-0.25, 0}, 
                    Offset[8], {1., -2.8165969556681603`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-24.4, -0.22261559687964186`}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.4573030030997528}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-27.4, 
                    1.5030026035730106`}, {-0.25, 0}, 
                    Offset[8], {1., 2.3959478845370086`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-26.31111111111111, 
                    2.503002604326257}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777715`, 
                    2.1119017645787608`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-26.4, 
                    1.5030026037688644`}, {-0.25, 0}, 
                    Offset[8], {1., 1.666933258093195*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-25.4, 
                    1.503002604438349}, {-0.25, 0}, 
                    Offset[8], {1., 1.0046790066553513`*^-9}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-24.4, 
                    0.5773844045522439}, {-0.25, 0}, 
                    Offset[8], {1., -1.5426970004799614`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-23.4, -0.03969439534134692}, \
{-0.25, 0}, 
                    Offset[8], {1., 4.973230091631642*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-22.4, -0.039694395141241096`}, \
{-0.25, 0}, 
                    Offset[8], {1., 1.9610355006527413`*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-21.4, -0.9243594964746237}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.474441835556945}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-21.4, -0.03969439529705465}, \
{-0.25, 0}, 
                    Offset[8], {1., -2.6099662014944514`*^-10}], 
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-21.4, 
                    0.8756405038490257}, {-0.25, 0}, 
                    Offset[8], {1., 1.5255581649824705`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-20.4, -2.1141362308744465`}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.0000000002950742`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-19.31111111111111, \
-1.5141362308339463`}, {-0.25, 0}, 
                    Offset[8], {
                    0.17777777777777715`, -9.340705986460307*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-19.4, -2.5141362310660087`}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.2255441106390208`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-18.4, -2.5141362310645707`}, \
{-0.25, 0}, 
                    Offset[8], {1., 8.409939411535561*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-17.449352612161093`, \
-1.1580280810709112`}, {-0.25, 0}, 
                    Offset[8], {1., 2.4627523527937853`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-20.4, -0.3243594962058682}, \
{-0.25, 0}, 
                    Offset[8], {1., -0.47444183467402473`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-19.22222222222222, 
                    0.4858637696860044}, {-0.25, 0}, 
                    Offset[8], {0.1777777777777736, 4.024131028401712*^-11}], 
                    
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-19.4, -0.5141362302107939}, \
{-0.25, 0}, 
                    Offset[8], {1., -2.2552637535255826`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-18.4, -0.5141362302848381}, \
{-0.25, 0}, 
                    Offset[8], {1., 2.6943780540023*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-17.4, -0.23648481905191157`}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.46275235203691517`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-20.4, 
                    1.485863769699331}, {-0.25, 0}, 
                    Offset[8], {1., -2.3780444280419033`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-19.31111111111111, 
                    2.4858637703524735`}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777715`, 
                    1.0367129377186757`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-19.4, 
                    1.48586376992762}, {-0.25, 0}, 
                    Offset[8], {1., 5.390174973030071*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-18.4, 
                    1.4858637701846829`}, {-0.25, 0}, 
                    Offset[8], {1., 6.909317562531214*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-17.4, 
                    0.5635151811426408}, {-0.25, 0}, 
                    Offset[8], {1., -1.5372476484494655`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-16.4, -0.05138387856655881}, \
{-0.25, 0}, 
                    Offset[8], {1., -5.490222235171593*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-15.4, -0.051383878722253}, \
{-0.25, 0}, 
                    Offset[8], {1., 1.0652450449510908`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-14.4, -0.9317804423050509}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.4673276060423461`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-14.4, -0.05138387866820065}, \
{-0.25, 0}, 
                    Offset[8], {1., 1.9070911516649858`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-14.4, 
                    0.8682195575810179}, {-0.25, 0}, 
                    Offset[8], {1., 1.5326723937677684`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-13.4, -2.11871148449353}, \
{-0.25, 0}, 
                    Offset[8], {1., -0.9999999996192344}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-12.31111111111111, \
-1.5187114841243061`}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777715`, 
                    6.113598516321872*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-12.399999999999999`, \
-2.5187114841847964`}, {-0.25, 0}, 
                    Offset[8], {1., 2.6071234060509596`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-11.4, -2.518711484394526}, \
{-0.25, 0}, 
                    Offset[8], {1., -5.233573574514594*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-10.455758242477604`, \
-1.1283382721355815`}, {-0.25, 0}, 
                    Offset[8], {1., 2.5546977850391666`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-13.4, -0.3317804425097498}, \
{-0.25, 0}, 
                    Offset[8], {1., -0.4673276064152959}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-12.222222222222221`,
                     0.4812885158204834}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777537`, 
                    2.994832160041483*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-12.399999999999999`, \
-0.5187114843301394}, {-0.25, 0}, 
                    Offset[8], {1., 1.2428813533915672`*^-9}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-11.4, -0.518711485052193}, \
{-0.25, 0}, 
                    Offset[8], {1., -2.032010226749037*^-9}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-10.4, -0.18589281408482003`}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.5546977863002951}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-13.4, 
                    1.4812885155214768`}, {-0.25, 0}, 
                    Offset[8], {1., 7.222524800454266*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-12.31111111111111, 
                    2.4812885163492204`}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777715`, 
                    1.060036503020001*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-12.399999999999999`,
                     1.4812885159338927`}, {-0.25, 0}, 
                    Offset[8], {1., 2.058582193598113*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-11.4, 
                    1.4812885158896512`}, {-0.25, 0}, 
                    Offset[8], {1., -2.1097434910188895`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-10.4, 
                    0.6141071865832834}, {-0.25, 0}, 
                    Offset[8], {1., -1.4453022153699635`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-9.399999999999999, 
                    0.03598630071009041}, {-0.25, 0}, 
                    Offset[8], {1., 4.5798736331148504`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-8.4, 
                    0.03598630092309401}, {-0.25, 0}, 
                    Offset[8], {1., 4.9681092573194974`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-7.4, 
                    0.035986300967897934`}, {-0.25, 0}, 
                    Offset[8], {1., 4.1552476737205524`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-6.4, 
                    0.03598630100382291}, {-0.25, 0}, 
                    Offset[8], {1., 3.21733126251722*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-5.4, 
                    0.03598630103103379}, {-0.25, 0}, 
                    Offset[8], {1., 2.3902595180924635`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-4.4, 
                    0.03598630105060492}, {-0.25, 0}, 
                    Offset[8], {1., 1.6683480985602017`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, 
                    0.03598630106398011}, {-0.25, 0}, 
                    Offset[8], {1., 1.116966935610364*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     0.03598630107283057}, {-0.25, 0}, 
                    Offset[8], {1., 7.304323812462599*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"3\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"3", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4, 
                    0.03598630107836138}, {-0.25, 0}, 
                    Offset[8], {1., 4.348459092806678*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"300\"", "\"3\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"300", "3"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-0.4, 
                    0.03598630108126033}, {-0.25, 0}, 
                    Offset[8], {1., 1.9326137912223373`*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"300\"", "\"3\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"300", "3"}, "\[Cross]"], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-31., 1.8982025386783976`*^-15}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-30., -1.4436391420446515`*^-11}], 
                    Offset[{10, 10}, {-30., -1.4436391420446515`*^-11}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 
                    28}], {-30., -1.4436391420446515`*^-11}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"64", ",", 
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    64, {3}, "PaddingSize" -> {1}, "Input" -> {4, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-29., -3.478639660495574*^-11}], 
                    Offset[{10, 10}, {-29., -3.478639660495574*^-11}]]}, 
                    InsetBox["\"P\"", 
                    Offset[{0, -1}, {-29., -3.478639660495574*^-11}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pol\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pol", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{3}, "PaddingSize" -> {1}, 
                    "Input" -> {64, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-28., -1.4969973982130096`}], 
                    Offset[{12, 12}, {-28., -1.4969973982130096`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-28., -1.4969973982130096`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn1a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn1a", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-28., -4.8286769816737604`*^-11}], 
                    Offset[{12, 12}, {-28., -4.8286769816737604`*^-11}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-28., -4.8286769816737604`*^-11}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn1b\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn1b", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-28., 1.5030026034292536`}], 
                    Offset[{12, 12}, {-28., 1.5030026034292536`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-28., 1.5030026034292536`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn1c\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn1c", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-27., -2.4969973979582374`}], 
                    Offset[{12, 12}, {-27., -2.4969973979582374`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-27., -2.4969973979582374`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn1a1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn1a1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-24., -0.039694395639740726`}], 
                    Offset[{10, 10}, {-24., -0.039694395639740726`}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 
                    14], {-24., -0.039694395639740726`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"trd1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"128", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "300"}], "}"}]}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["trd1", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[
                    Plus, "Inputs" -> {{128, 300}, {128, 300}, {128, 300}, {
                    128, 300}, {128, 300}, {128, 300}}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-26., -2.4969973975771307`}], 
                    Offset[{12, 12}, {-26., -2.4969973975771307`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-26., -2.4969973975771307`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn1a2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn1a2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-25., -2.496997397772502}], 
                    Offset[{10, 10}, {-25., -2.496997397772502}]]}, 
                    InsetBox["\"P\"", 
                    Offset[{0, -1}, {-25., -2.496997397772502}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pol1a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pol1a", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{3}, "PaddingSize" -> {1}, 
                    "Input" -> {128, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-27., -0.4969973981805521}], 
                    Offset[{12, 12}, {-27., -0.4969973981805521}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-27., -0.4969973981805521}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn1b1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn1b1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-26., -0.4969973987113276}], 
                    Offset[{12, 12}, {-26., -0.4969973987113276}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-26., -0.4969973987113276}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn1b2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn1b2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-25., -0.49699739873949356`}], 
                    Offset[{10, 10}, {-25., -0.49699739873949356`}]]}, 
                    InsetBox["\"P\"", 
                    Offset[{0, -1}, {-25., -0.49699739873949356`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pol1b\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "25", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "12", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pol1b", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{25}, "PaddingSize" -> {12}, 
                    "Input" -> {128, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-27., 1.5030026036688484`}], 
                    Offset[{12, 12}, {-27., 1.5030026036688484`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-27., 1.5030026036688484`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn1c1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn1c1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-26., 1.5030026038355417`}], 
                    Offset[{12, 12}, {-26., 1.5030026038355417`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-26., 1.5030026038355417`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn1c2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn1c2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-25., 1.5030026048402207`}], 
                    Offset[{10, 10}, {-25., 1.5030026048402207`}]]}, 
                    InsetBox["\"P\"", 
                    Offset[{0, -1}, {-25., 1.5030026048402207`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pol1c\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "75", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "37", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pol1c", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{75}, "PaddingSize" -> {37}, 
                    "Input" -> {128, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-23., -0.03969439514241772}], 
                    Offset[{10, 10}, {-23., -0.03969439514241772}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzF1s9LG0EUB/CNtpKLtvVmC4q3loooolgqBUUjHnIwNhSiRnZ+iSARkoh4
MeBJCJ7Egyi0Je5MD+JdSr3Yf6A92HMFPVr0YitofOtO7DRaE83s5gtvIXsY
Pnmz83Yb0VSIVRiGkfDDJWTOdMfj5uzQY/gRjiUmxmOUDMSSdJzGO1El3KyD
eg71wNCeoK6FEFqr1rWWEi0+1rbykBDxWcdaedHh81EiMox+ympYKz8l+yjm
C7YNjMc6QHkpyUexmLRtjIhThkRAF0rJvX0YixD07Mz2EWJFdaKU3MvHTKsL
bCeX+4r5rG6Ukjv7oG8vwHbo9E0su4FScicfQvwpPGs/nb6JTcNIVbgFkyna
NzycqYG+fZNn9evY2Hu/mzCZonzhcKoK+vVFntUfGK/Wug2TKcbnY4Rb0naA
0HqD66q/KegjhKdz85eQ9RYvUEpu9THMY7n5S02r1yuUkv/6oG9v7fkLdY4x
H/ESpeRGHzxjb8D1W864Ga9RSq75oG8vwfbLsfGlcqCU/OOLRj88o4Tvyb5t
eDB/C+XKx8Irj+AcfJfnYcej+Vsolz57/oJp25kjfDcSsZ6UGyZj+3ywl0LO
uH02+rG+3CglQfg+WpS2I5gjzaUuCO/BOV31+pW5JW1/4Kz26PjD/YHprK5q
bRnMBvqS501NA2nD2euSC97V87qqoz0i4HvznY6+5XIBTGFFng==
                    
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], 
                    TraditionalForm], {-23., -0.03969439514241772}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"rmp1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["rmp1", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {128, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-22., -0.03969439514045668}], 
                    Offset[{10, 10}, {-22., -0.03969439514045668}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-22., -0.03969439514045668}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"bnl1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Channels\"", "\[Rule]", "128"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["bnl1", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Channels" -> 128, "Input" -> {128, 300}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 18), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-21., -1.5141362306974018`}], 
                    Offset[{12, 12}, {-21., -1.5141362306974018`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-21., -1.5141362306974018`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn2a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn2a", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 19), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-21., -0.0396943954014533}], 
                    Offset[{12, 12}, {-21., -0.0396943954014533}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-21., -0.0396943954014533}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn2b\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn2b", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 20), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-21., 1.4858637698420138`}], 
                    Offset[{12, 12}, {-21., 1.4858637698420138`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]},
                     {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-21., 1.4858637698420138`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn2c\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn2c", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 21), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-20., -2.514136230992476}], 
                    Offset[{12, 12}, {-20., -2.514136230992476}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-20., -2.514136230992476}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn2a1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn2a1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 22), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-17., -0.05138387823714548}], 
                    Offset[{10, 10}, {-17., -0.05138387823714548}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 
                    14], {-17., -0.05138387823714548}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"trd2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}]}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["trd2", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[
                    Plus, "Inputs" -> {{256, 300}, {256, 300}, {256, 300}, {
                    256, 300}, {256, 300}, {256, 300}}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 23), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-19., -2.5141362311150304`}], 
                    Offset[{12, 12}, {-19., -2.5141362311150304`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-19., -2.5141362311150304`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn2a2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn2a2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 24), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-18., -2.514136231030931}], 
                    Offset[{10, 10}, {-18., -2.514136231030931}]]}, 
                    InsetBox["\"P\"", 
                    Offset[{0, -1}, {-18., -2.514136231030931}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pol2a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pol2a", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{3}, "PaddingSize" -> {1}, 
                    "Input" -> {256, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 25), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-20., -0.514136230075478}], 
                    Offset[{12, 12}, {-20., -0.514136230075478}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-20., -0.514136230075478}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn2b1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn2b1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 26), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-19., -0.5141362303010044}], 
                    Offset[{12, 12}, {-19., -0.5141362303010044}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-19., -0.5141362303010044}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn2b2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn2b2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 27), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-18., -0.5141362302740606}], 
                    Offset[{10, 10}, {-18., -0.5141362302740606}]]}, 
                    InsetBox["\"P\"", 
                    Offset[{0, -1}, {-18., -0.5141362302740606}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pol2b\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "25", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "12", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pol2b", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{25}, "PaddingSize" -> {12}, 
                    "Input" -> {256, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 28), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-20., 1.4858637696042094`}], 
                    Offset[{12, 12}, {-20., 1.4858637696042094`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-20., 1.4858637696042094`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn2c1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn2c1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 29), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-19., 1.485863770143227}], 
                    Offset[{12, 12}, {-19., 1.485863770143227}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-19., 1.485863770143227}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn2c2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn2c2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 30), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-18., 1.48586377021232}], 
                    Offset[{10, 10}, {-18., 1.48586377021232}]]}, 
                    InsetBox["\"P\"", 
                    Offset[{0, -1}, {-18., 1.48586377021232}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pol2c\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "75", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "37", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pol2c", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{75}, "PaddingSize" -> {37}, 
                    "Input" -> {256, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 31), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-16., -0.0513838787861677}], 
                    Offset[{10, 10}, {-16., -0.0513838787861677}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzF1s9LG0EUB/CNtpKLtvVmC4q3loooolgqBUUjHnIwNhSiRnZ+iSARkoh4
MeBJCJ7Egyi0Je5MD+JdSr3Yf6A92HMFPVr0YitofOtO7DRaE83s5gtvIXsY
Pnmz83Yb0VSIVRiGkfDDJWTOdMfj5uzQY/gRjiUmxmOUDMSSdJzGO1El3KyD
eg71wNCeoK6FEFqr1rWWEi0+1rbykBDxWcdaedHh81EiMox+ympYKz8l+yjm
C7YNjMc6QHkpyUexmLRtjIhThkRAF0rJvX0YixD07Mz2EWJFdaKU3MvHTKsL
bCeX+4r5rG6Ukjv7oG8vwHbo9E0su4FScicfQvwpPGs/nb6JTcNIVbgFkyna
NzycqYG+fZNn9evY2Hu/mzCZonzhcKoK+vVFntUfGK/Wug2TKcbnY4Rb0naA
0HqD66q/KegjhKdz85eQ9RYvUEpu9THMY7n5S02r1yuUkv/6oG9v7fkLdY4x
H/ESpeRGHzxjb8D1W864Ga9RSq75oG8vwfbLsfGlcqCU/OOLRj88o4Tvyb5t
eDB/C+XKx8Irj+AcfJfnYcej+Vsolz57/oJp25kjfDcSsZ6UGyZj+3ywl0LO
uH02+rG+3CglQfg+WpS2I5gjzaUuCO/BOV31+pW5JW1/4Kz26PjD/YHprK5q
bRnMBvqS501NA2nD2euSC97V87qqoz0i4HvznY6+5XIBTGFFng==
                    
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], 
                    TraditionalForm], {-16., -0.0513838787861677}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"rmp2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["rmp2", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {256, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 32), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-15., -0.0513838786796432}], 
                    Offset[{10, 10}, {-15., -0.0513838786796432}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-15., -0.0513838786796432}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"bnl2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Channels\"", "\[Rule]", "256"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["bnl2", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Channels" -> 256, "Input" -> {256, 300}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 33), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-14., -1.5187114847219894`}], 
                    Offset[{12, 12}, {-14., -1.5187114847219894`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-14., -1.5187114847219894`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn3a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn3a", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 34), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-14., -0.051383878660572285`}], 
                    Offset[{12, 12}, {-14., -0.051383878660572285`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-14., -0.051383878660572285`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn3b\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn3b", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 35), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-14., 1.4812885150881252`}], 
                    Offset[{12, 12}, {-14., 1.4812885150881252`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-14., 1.4812885150881252`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn3c\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn3c", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 36), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-13., -2.5187114843412237`}], 
                    Offset[{12, 12}, {-13., -2.5187114843412237`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-13., -2.5187114843412237`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn3a1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn3a1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 37), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-10., 0.03598630043529799}], 
                    Offset[{10, 10}, {-10., 0.03598630043529799}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 14], {-10., 
                    0.03598630043529799}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"trd3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}]}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["trd3", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[
                    Plus, "Inputs" -> {{512, 300}, {512, 300}, {512, 300}, {
                    512, 300}, {512, 300}, {512, 300}}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 38), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-12., -2.5187114840805114`}], 
                    Offset[{12, 12}, {-12., -2.5187114840805114`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-12., -2.5187114840805114`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn3a2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn3a2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 39), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-11., -2.5187114846038687`}], 
                    Offset[{10, 10}, {-11., -2.5187114846038687`}]]}, 
                    InsetBox["\"P\"", 
                    Offset[{0, -1}, {-11., -2.5187114846038687`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pol3a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pol3a", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{3}, "PaddingSize" -> {1}, 
                    "Input" -> {512, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 40), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-13., -0.5187114850758682}], 
                    Offset[{12, 12}, {-13., -0.5187114850758682}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-13., -0.5187114850758682}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn3b1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn3b1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 41), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-12., -0.5187114838329868}], 
                    Offset[{12, 12}, {-12., -0.5187114838329868}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 
                    1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-12., -0.5187114838329868}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn3b2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn3b2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 42), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-11., -0.518711485864997}], 
                    Offset[{10, 10}, {-11., -0.518711485864997}]]}, 
                    InsetBox["\"P\"", 
                    Offset[{0, -1}, {-11., -0.518711485864997}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pol3b\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "25", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "12", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pol3b", Bold], 
                    Style[
                    HoldForm[
                    PoolingLayer[{25}, "PaddingSize" -> {12}, 
                    "Input" -> {512, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 43), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-13., 1.4812885158103777`}], 
                    Offset[{12, 12}, {-13., 1.4812885158103777`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-13., 1.4812885158103777`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn3c1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn3c1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 44), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-12., 1.481288516016236}], 
                    Offset[{12, 12}, {-12., 1.481288516016236}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-12., 1.481288516016236}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn3c2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn3c2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 45), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-11., 1.4812885158052616`}], 
                    Offset[{10, 10}, {-11., 1.4812885158052616`}]]}, 
                    InsetBox["\"P\"", 
                    Offset[{0, -1}, {-11., 1.4812885158052616`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pol3c\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "75", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "37", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pol3c", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{75}, "PaddingSize" -> {37}, 
                    "Input" -> {512, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 46), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-9., 0.035986300893285354`}], 
                    Offset[{10, 10}, {-9., 0.035986300893285354`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzF1s9LG0EUB/CNtpKLtvVmC4q3loooolgqBUUjHnIwNhSiRnZ+iSARkoh4
MeBJCJ7Egyi0Je5MD+JdSr3Yf6A92HMFPVr0YitofOtO7DRaE83s5gtvIXsY
Pnmz83Yb0VSIVRiGkfDDJWTOdMfj5uzQY/gRjiUmxmOUDMSSdJzGO1El3KyD
eg71wNCeoK6FEFqr1rWWEi0+1rbykBDxWcdaedHh81EiMox+ympYKz8l+yjm
C7YNjMc6QHkpyUexmLRtjIhThkRAF0rJvX0YixD07Mz2EWJFdaKU3MvHTKsL
bCeX+4r5rG6Ukjv7oG8vwHbo9E0su4FScicfQvwpPGs/nb6JTcNIVbgFkyna
NzycqYG+fZNn9evY2Hu/mzCZonzhcKoK+vVFntUfGK/Wug2TKcbnY4Rb0naA
0HqD66q/KegjhKdz85eQ9RYvUEpu9THMY7n5S02r1yuUkv/6oG9v7fkLdY4x
H/ESpeRGHzxjb8D1W864Ga9RSq75oG8vwfbLsfGlcqCU/OOLRj88o4Tvyb5t
eDB/C+XKx8Irj+AcfJfnYcej+Vsolz57/oJp25kjfDcSsZ6UGyZj+3ywl0LO
uH02+rG+3CglQfg+WpS2I5gjzaUuCO/BOV31+pW5JW1/4Kz26PjD/YHprK5q
bRnMBvqS501NA2nD2euSC97V87qqoz0i4HvznY6+5XIBTGFFng==
                    
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-9., 
                    0.035986300893285354`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"rmp3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["rmp3", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {512, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 47), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-8., 0.03598630094296645}], 
                    Offset[{10, 10}, {-8., 0.03598630094296645}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-8., 0.03598630094296645}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"bnl3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Channels\"", "\[Rule]", "512"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["bnl3", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Channels" -> 512, "Input" -> {512, 300}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 48), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-7., 0.035986300984518924`}], 
                    Offset[{10, 10}, {-7., 0.035986300984518924`}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-7., 0.035986300984518924`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dsc2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"256", ",", 
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dsc2", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    256, {3}, "PaddingSize" -> {1}, "Input" -> {512, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 49), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-6., 0.035986301016692236`}], 
                    Offset[{10, 10}, {-6., 0.035986301016692236`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzF1s9LG0EUB/CNtpKLtvVmC4q3loooolgqBUUjHnIwNhSiRnZ+iSARkoh4
MeBJCJ7Egyi0Je5MD+JdSr3Yf6A92HMFPVr0YitofOtO7DRaE83s5gtvIXsY
Pnmz83Yb0VSIVRiGkfDDJWTOdMfj5uzQY/gRjiUmxmOUDMSSdJzGO1El3KyD
eg71wNCeoK6FEFqr1rWWEi0+1rbykBDxWcdaedHh81EiMox+ympYKz8l+yjm
C7YNjMc6QHkpyUexmLRtjIhThkRAF0rJvX0YixD07Mz2EWJFdaKU3MvHTKsL
bCeX+4r5rG6Ukjv7oG8vwHbo9E0su4FScicfQvwpPGs/nb6JTcNIVbgFkyna
NzycqYG+fZNn9evY2Hu/mzCZonzhcKoK+vVFntUfGK/Wug2TKcbnY4Rb0naA
0HqD66q/KegjhKdz85eQ9RYvUEpu9THMY7n5S02r1yuUkv/6oG9v7fkLdY4x
H/ESpeRGHzxjb8D1W864Ga9RSq75oG8vwfbLsfGlcqCU/OOLRj88o4Tvyb5t
eDB/C+XKx8Irj+AcfJfnYcej+Vsolz57/oJp25kjfDcSsZ6UGyZj+3ywl0LO
uH02+rG+3CglQfg+WpS2I5gjzaUuCO/BOV31+pW5JW1/4Kz26PjD/YHprK5q
bRnMBvqS501NA2nD2euSC97V87qqoz0i4HvznY6+5XIBTGFFng==
                    
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-6., 
                    0.035986301016692236`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"drmp2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["drmp2", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {256, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 50), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 0.03598630104059483}], 
                    Offset[{10, 10}, {-5., 0.03598630104059483}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-5., 0.03598630104059483}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dsc4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"64", ",", 
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dsc4", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    64, {3}, "PaddingSize" -> {1}, "Input" -> {256, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 51), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 0.03598630105727831}], 
                    Offset[{10, 10}, {-4., 0.03598630105727831}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzF1s9LG0EUB/CNtpKLtvVmC4q3loooolgqBUUjHnIwNhSiRnZ+iSARkoh4
MeBJCJ7Egyi0Je5MD+JdSr3Yf6A92HMFPVr0YitofOtO7DRaE83s5gtvIXsY
Pnmz83Yb0VSIVRiGkfDDJWTOdMfj5uzQY/gRjiUmxmOUDMSSdJzGO1El3KyD
eg71wNCeoK6FEFqr1rWWEi0+1rbykBDxWcdaedHh81EiMox+ympYKz8l+yjm
C7YNjMc6QHkpyUexmLRtjIhThkRAF0rJvX0YixD07Mz2EWJFdaKU3MvHTKsL
bCeX+4r5rG6Ukjv7oG8vwHbo9E0su4FScicfQvwpPGs/nb6JTcNIVbgFkyna
NzycqYG+fZNn9evY2Hu/mzCZonzhcKoK+vVFntUfGK/Wug2TKcbnY4Rb0naA
0HqD66q/KegjhKdz85eQ9RYvUEpu9THMY7n5S02r1yuUkv/6oG9v7fkLdY4x
H/ESpeRGHzxjb8D1W864Ga9RSq75oG8vwfbLsfGlcqCU/OOLRj88o4Tvyb5t
eDB/C+XKx8Irj+AcfJfnYcej+Vsolz57/oJp25kjfDcSsZ6UGyZj+3ywl0LO
uH02+rG+3CglQfg+WpS2I5gjzaUuCO/BOV31+pW5JW1/4Kz26PjD/YHprK5q
bRnMBvqS501NA2nD2euSC97V87qqoz0i4HvznY6+5XIBTGFFng==
                    
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-4., 
                    0.03598630105727831}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"drmp4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["drmp4", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {64, 300}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 52), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 0.03598630106844798}], 
                    Offset[{10, 10}, {-3., 0.03598630106844798}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-3., 0.03598630106844798}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pcnn\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"3", ",", 
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pcnn", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    3, {3}, "PaddingSize" -> {1}, "Input" -> {64, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 53), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 0.035986301075752306`}], 
                    Offset[{10, 10}, {-2., 0.035986301075752306`}]]}, 
                    InsetBox["\"T\"", 
                    Offset[{0, -1}, {-2., 0.035986301075752306`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"trsp\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"TransposeLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "300"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["trsp", Bold], 
                    Style[
                    HoldForm[
                    TransposeLayer["Input" -> {3, 300}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 54), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-1., 0.035986301080100765`}], 
                    Offset[{10, 10}, {-1., 0.035986301080100765`}]]}, 
                    InsetBox["\"S\"", 
                    Offset[{0, -1}, {-1., 0.035986301080100765`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"sfmx\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SoftmaxLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"300", ",", "3"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["sfmx", Bold], 
                    Style[
                    HoldForm[
                    SoftmaxLayer["Input" -> {300, 3}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 55), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.2035254216632553`*^-18, 0.03598630108203338}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 56), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[CompressedData["
1:eJxVz11IU3EYBvCjm18hFSJhImhZa4xpNjfd2aegoIQZrC4Kr1S60IREC8GN
UKxVTEEIAkkwwisvyjAvYqUPiQWJU5ZIprVNh2IY04buTMSPPGfnvB44HH48
7/m/z/9c7T3bnXiGYfSH7/8v/1hx6YM9bisjYOJtwXTceGlk9O0n3mbMOUcS
kD0u2ATutt41HI6MxcxeazN8dn0T8+QO/YPKVM7K24jdu88n5qMy8NZD7Sta
8doGhP8N+HjDSXIW5hPdxEYs2X+oPR6fOL9c05AnmUUwu5nYiCSuguw34Enj
TWIWSa29xMXQWTcDUp8iWELrxDq0uZ6urbCc6HKfKkjzRGffmbNfIsJ5Wpjr
PffDWXKh/xU0hHLnd6sGhflCmPu9JNfgoXuaWIutPrd3qsUvzm+//Emswfbq
HLEWzvwusr8QCew7Yg0ecyPEBWixLvyS+uTDsb+xKFkNR2qofqCSE/3o1Ndj
uXxV9qJ6OHaeCntNf7Q2Raz/Bdxq//d7svG1kCsxag+QXAFLa5hYhaj75GxF
b+w+SkTX6r5LVmCnwE5yFeTPdGS/Ep1vSokVkF2m+XlcfxVYkvrkoNxftSw5
C5aSQeIM6JhN4nSoey4GJZ9GbslV4mRkztQSM0jzNxNvjKU0OY78fr2m7q+t
zMQMtR/5ABseMcI=
                    "], 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 20, 20, 24, 24, 24, 24, 20, 24, 20, 24, 24, 20, 
                    24, 24, 20, 20, 20, 24, 24, 24, 24, 20, 24, 20, 24, 24, 
                    20, 24, 24, 20, 20, 20, 24, 24, 24, 24, 20, 24, 20, 24, 
                    24, 20, 24, 24, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
                    8}, NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{28., 28.}, {28., 18.}}, 
                    ImageSize -> {1141., 221.7599931125544}, PlotRangePadding -> 
                    0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], ImageSize -> {800, Automatic}, ImageSizeAction -> 
                    "Scrollable", Scrollbars -> {True, False}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "cnn"], 
                    NeuralNetworks`NetPath["Nodes", "pol"], 
                    NeuralNetworks`NetPath["Nodes", "cnn1a"], 
                    NeuralNetworks`NetPath["Nodes", "cnn1b"], 
                    NeuralNetworks`NetPath["Nodes", "cnn1c"], 
                    NeuralNetworks`NetPath["Nodes", "cnn1a1"], 
                    NeuralNetworks`NetPath["Nodes", "trd1"], 
                    NeuralNetworks`NetPath["Nodes", "cnn1a2"], 
                    NeuralNetworks`NetPath["Nodes", "pol1a"], 
                    NeuralNetworks`NetPath["Nodes", "cnn1b1"], 
                    NeuralNetworks`NetPath["Nodes", "cnn1b2"], 
                    NeuralNetworks`NetPath["Nodes", "pol1b"], 
                    NeuralNetworks`NetPath["Nodes", "cnn1c1"], 
                    NeuralNetworks`NetPath["Nodes", "cnn1c2"], 
                    NeuralNetworks`NetPath["Nodes", "pol1c"], 
                    NeuralNetworks`NetPath["Nodes", "rmp1"], 
                    NeuralNetworks`NetPath["Nodes", "bnl1"], 
                    NeuralNetworks`NetPath["Nodes", "cnn2a"], 
                    NeuralNetworks`NetPath["Nodes", "cnn2b"], 
                    NeuralNetworks`NetPath["Nodes", "cnn2c"], 
                    NeuralNetworks`NetPath["Nodes", "cnn2a1"], 
                    NeuralNetworks`NetPath["Nodes", "trd2"], 
                    NeuralNetworks`NetPath["Nodes", "cnn2a2"], 
                    NeuralNetworks`NetPath["Nodes", "pol2a"], 
                    NeuralNetworks`NetPath["Nodes", "cnn2b1"], 
                    NeuralNetworks`NetPath["Nodes", "cnn2b2"], 
                    NeuralNetworks`NetPath["Nodes", "pol2b"], 
                    NeuralNetworks`NetPath["Nodes", "cnn2c1"], 
                    NeuralNetworks`NetPath["Nodes", "cnn2c2"], 
                    NeuralNetworks`NetPath["Nodes", "pol2c"], 
                    NeuralNetworks`NetPath["Nodes", "rmp2"], 
                    NeuralNetworks`NetPath["Nodes", "bnl2"], 
                    NeuralNetworks`NetPath["Nodes", "cnn3a"], 
                    NeuralNetworks`NetPath["Nodes", "cnn3b"], 
                    NeuralNetworks`NetPath["Nodes", "cnn3c"], 
                    NeuralNetworks`NetPath["Nodes", "cnn3a1"], 
                    NeuralNetworks`NetPath["Nodes", "trd3"], 
                    NeuralNetworks`NetPath["Nodes", "cnn3a2"], 
                    NeuralNetworks`NetPath["Nodes", "pol3a"], 
                    NeuralNetworks`NetPath["Nodes", "cnn3b1"], 
                    NeuralNetworks`NetPath["Nodes", "cnn3b2"], 
                    NeuralNetworks`NetPath["Nodes", "pol3b"], 
                    NeuralNetworks`NetPath["Nodes", "cnn3c1"], 
                    NeuralNetworks`NetPath["Nodes", "cnn3c2"], 
                    NeuralNetworks`NetPath["Nodes", "pol3c"], 
                    NeuralNetworks`NetPath["Nodes", "rmp3"], 
                    NeuralNetworks`NetPath["Nodes", "bnl3"], 
                    NeuralNetworks`NetPath["Nodes", "dsc2"], 
                    NeuralNetworks`NetPath["Nodes", "drmp2"], 
                    NeuralNetworks`NetPath["Nodes", "dsc4"], 
                    NeuralNetworks`NetPath["Nodes", "drmp4"], 
                    NeuralNetworks`NetPath["Nodes", "pcnn"], 
                    NeuralNetworks`NetPath["Nodes", "trsp"], 
                    NeuralNetworks`NetPath["Nodes", "sfmx"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 300}, NeuralNetworks`RealT]], 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{300, 3}, NeuralNetworks`RealT]], 
                    Association[
                    "cnn" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 4, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 4, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "pol" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3}, "Stride" -> {1}, 
                    "PaddingSize" -> {1}, "Function" -> Max, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$Channels" -> 64, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "cnn1a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1a_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "1a_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "1a_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_cnn1d_branch_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_cnn1d_branch_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_plus_shared", "Outputs", "Output"]}], 
                    "cnn1a1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1a1_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a1_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a1_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a1_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a1_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a1_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a1_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_plus_shared", "Outputs", "Output"]}], 
                    "cnn1a2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1a2_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a2_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a2_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a2_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a2_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a2_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a2_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_plus_shared", "Outputs", "Output"]}], 
                    "pol1a" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3}, "Stride" -> {1}, 
                    "PaddingSize" -> {1}, "Function" -> Max, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$Channels" -> 128, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "cnn1b" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1b_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "1b_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "1b_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_cnn1d_branch_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_cnn1d_branch_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_plus_shared", "Outputs", "Output"]}], 
                    "cnn1b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1b1_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b1_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b1_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b1_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b1_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b1_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b1_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_plus_shared", "Outputs", "Output"]}], 
                    "cnn1b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1b2_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b2_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b2_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b2_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b2_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b2_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b2_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_plus_shared", "Outputs", "Output"]}], 
                    "pol1b" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {25}, "Stride" -> {1}, 
                    "PaddingSize" -> {12}, "Function" -> Max, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {300}, 
                    "$OutputSize" -> {300}, "$MXPoolingConvention" -> "valid",
                     "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "cnn1c" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1c_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "1c_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "1c_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_cnn1d_branch_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_cnn1d_branch_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_plus_shared", "Outputs", "Output"]}], 
                    "cnn1c1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1c1_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c1_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c1_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c1_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c1_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c1_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c1_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_plus_shared", "Outputs", "Output"]}], 
                    "cnn1c2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1c2_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c2_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c2_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c2_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c2_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c2_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c2_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_plus_shared", "Outputs", "Output"]}], 
                    "pol1c" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {75}, "Stride" -> {1}, 
                    "PaddingSize" -> {37}, "Function" -> Max, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {300}, 
                    "$OutputSize" -> {300}, "$MXPoolingConvention" -> "valid",
                     "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "trd1" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "3" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "5" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT], "6" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "rmp1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "bnl1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 128, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {300}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "cnn2a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2a_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "2a_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "2a_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_cnn1d_branch_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_cnn1d_branch_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_plus_shared", "Outputs", "Output"]}], 
                    "cnn2a1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2a1_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a1_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a1_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a1_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a1_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a1_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a1_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_plus_shared", "Outputs", "Output"]}], 
                    "cnn2a2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2a2_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a2_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a2_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a2_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a2_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a2_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a2_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_plus_shared", "Outputs", "Output"]}], 
                    "pol2a" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3}, "Stride" -> {1}, 
                    "PaddingSize" -> {1}, "Function" -> Max, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$Channels" -> 256, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "cnn2b" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2b_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "2b_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "2b_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_cnn1d_branch_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_cnn1d_branch_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_plus_shared", "Outputs", "Output"]}], 
                    "cnn2b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2b1_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b1_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b1_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b1_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b1_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b1_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b1_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus_shared", "Outputs", "Output"]}], 
                    "cnn2b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2b2_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b2_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b2_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b2_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b2_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b2_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b2_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus_shared", "Outputs", "Output"]}], 
                    "pol2b" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {25}, "Stride" -> {1}, 
                    "PaddingSize" -> {12}, "Function" -> Max, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {300}, 
                    "$OutputSize" -> {300}, "$MXPoolingConvention" -> "valid",
                     "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "cnn2c" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2c_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "2c_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "2c_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_cnn1d_branch_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_cnn1d_branch_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_plus_shared", "Outputs", "Output"]}], 
                    "cnn2c1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2c1_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c1_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c1_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c1_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c1_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c1_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c1_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_plus_shared", "Outputs", "Output"]}], 
                    "cnn2c2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2c2_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c2_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c2_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c2_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c2_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c2_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c2_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_plus_shared", "Outputs", "Output"]}], 
                    "pol2c" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {75}, "Stride" -> {1}, 
                    "PaddingSize" -> {37}, "Function" -> Max, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {300}, 
                    "$OutputSize" -> {300}, "$MXPoolingConvention" -> "valid",
                     "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "trd2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "3" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "5" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT], "6" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "rmp2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "bnl2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 256, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {300}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "cnn3a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "3a_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "3a_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "3a_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_cnn1d_branch_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_cnn1d_branch_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_plus_shared", "Outputs", "Output"]}], 
                    "cnn3a1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "3a1_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a1_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a1_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a1_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a1_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a1_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a1_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_plus_shared", "Outputs", "Output"]}], 
                    "cnn3a2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "3a2_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a2_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a2_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a2_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a2_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a2_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a2_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_plus_shared", "Outputs", "Output"]}], 
                    "pol3a" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3}, "Stride" -> {1}, 
                    "PaddingSize" -> {1}, "Function" -> Max, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$Channels" -> 512, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "cnn3b" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "3b_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "3b_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "3b_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_cnn1d_branch_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_cnn1d_branch_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_plus_shared", "Outputs", "Output"]}], 
                    "cnn3b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "3b1_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b1_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b1_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b1_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b1_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b1_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b1_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus_shared", "Outputs", "Output"]}], 
                    "cnn3b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "3b2_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b2_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b2_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b2_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b2_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b2_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b2_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus_shared", "Outputs", "Output"]}], 
                    "pol3b" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {25}, "Stride" -> {1}, 
                    "PaddingSize" -> {12}, "Function" -> Max, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {300}, 
                    "$OutputSize" -> {300}, "$MXPoolingConvention" -> "valid",
                     "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "cnn3c" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "3c_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "3c_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "3c_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_cnn1d_branch_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_cnn1d_branch_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_plus_shared", "Outputs", "Output"]}], 
                    "cnn3c1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "3c1_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c1_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c1_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c1_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c1_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c1_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c1_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_plus_shared", "Outputs", "Output"]}], 
                    "cnn3c2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "3c2_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c2_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c2_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c2_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c2_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c2_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c2_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_plus_shared", "Outputs", "Output"]}], 
                    "pol3c" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {75}, "Stride" -> {1}, 
                    "PaddingSize" -> {37}, "Function" -> Max, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {300}, 
                    "$OutputSize" -> {300}, "$MXPoolingConvention" -> "valid",
                     "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "trd3" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "3" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "5" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT], "6" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "rmp3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "bnl3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {300}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "dsc2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    512, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "drmp2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "dsc4" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 256, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "drmp4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "pcnn" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{3, 64, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{3}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 3, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 300}, 
                    NeuralNetworks`RealT]]], "trsp" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{300, 3}, 
                    NeuralNetworks`RealT]]], "sfmx" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{300, 3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{300, 3}, 
                    NeuralNetworks`RealT]]]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4\"", 
                    "\"300\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"300\"", 
                    "\"3\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {308., {13.1669921875, 18.3330078125}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.739733340059794*^9, 3.739785784743812*^9, 
  3.7400385488023787`*^9, 3.7400385999800034`*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"f3dfe85a-0708-48a6-98ca-429c2f9e6b31"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"probabilitiesToClass", "[", "probMat_", "]"}], ":=", 
  RowBox[{"Flatten", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Ordering", "[", 
      RowBox[{"#", ",", 
       RowBox[{"-", "1"}]}], "]"}], "&"}], "/@", "probMat"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.739735614753537*^9, 3.7397356543131742`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"e6986eb4-151d-4f94-88b2-67131c428778"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"randomN", "[", "ds_", "]"}], ":=", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"Length", "[", "ds", "]"}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"n", "=", 
   RowBox[{"randomN", "[", "ds", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Total", "[", 
  RowBox[{"Abs", "/@", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"probabilitiesToClass", "[", 
      RowBox[{"tNet", "[", 
       RowBox[{"Normal", "[", 
        RowBox[{"ds", "[", 
         RowBox[{"n", ",", "\"\<Input\>\""}], "]"}], "]"}], "]"}], "]"}], "-",
      "\[IndentingNewLine]", 
     RowBox[{"probabilitiesToClass", "[", 
      RowBox[{"Normal", "[", 
       RowBox[{"ds", "[", 
        RowBox[{"n", ",", "\"\<Output\>\""}], "]"}], "]"}], "]"}]}], ")"}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.7397333428264093`*^9, 3.739733390466482*^9}, {
   3.739735492679481*^9, 3.739735589160358*^9}, {3.739735670499115*^9, 
   3.739735840407653*^9}, 3.739785789478539*^9},
 CellLabel->"In[14]:=",ExpressionUUID->"ab6eb204-e2f8-43a1-be0a-26f5be03a5cc"],

Cell[BoxData["30"], "Output",
 CellChangeTimes->{{3.73973568916385*^9, 3.739735736681759*^9}, {
   3.739735781450946*^9, 3.739735849764049*^9}, {3.739736023918639*^9, 
   3.739736025497405*^9}, 3.739785803697521*^9, 3.740038614348069*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"757e2623-2f1b-4c8a-8e9d-94faabd9faae"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"n", "=", 
    RowBox[{"randomN", "[", "ds", "]"}]}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"n", "=", "6028"}], ";"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"s", "=", 
   RowBox[{"Normal", "[", 
    RowBox[{"ds", "[", "n", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Module", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"to", "=", 
      RowBox[{"Transpose", "@", 
       RowBox[{"tNet", "[", 
        RowBox[{"s", "[", "\"\<Input\>\"", "]"}], "]"}]}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"no", "=", 
      RowBox[{"Transpose", "@", 
       RowBox[{"Normal", "[", 
        RowBox[{"s", "[", "\"\<Output\>\"", "]"}], "]"}]}]}]}], 
    "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"ap", "=", 
    RowBox[{"ArrayPlot", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Join", "[", "\[IndentingNewLine]", 
       RowBox[{"to", ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"White", ",", 
             RowBox[{"Opacity", "[", "0", "]"}]}], "}"}], ",", "300"}], "]"}],
          "}"}], ",", "\[IndentingNewLine]", "no"}], "\[IndentingNewLine]", 
       "]"}], ",", 
      RowBox[{"AspectRatio", "->", 
       RowBox[{"1", "/", "2"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"Background", "\[Rule]", "White"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"Frame", "\[Rule]", "True"}], ",", 
      RowBox[{"FrameTicks", "\[Rule]", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", " ", "\"\<Predicted Exon\>\""}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"2", ",", " ", "\"\<Predicted Intron\>\""}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"3", ",", " ", "\"\<Predicted Unannotated\>\""}], "}"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"5", ",", " ", "\"\<Real Exon\>\""}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"6", ",", " ", "\"\<Real Intron\>\""}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"7", ",", " ", "\"\<Real Unannotated\>\""}], "}"}]}], 
          "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
         RowBox[{"{", 
          RowBox[{
          "0", ",", " ", "50", ",", " ", "100", ",", " ", "150", ",", " ", 
           "200", ",", " ", "250", ",", " ", "300"}], "}"}]}], 
        "\[IndentingNewLine]", "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"PlotLegends", "\[Rule]", 
       RowBox[{"Placed", "[", 
        RowBox[{"Automatic", ",", "Bottom"}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ColorFunction", "\[Rule]", "\"\<DeepSeaColors\>\""}]}], 
     "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], "Input",\

 CellChangeTimes->{{3.7397875782240057`*^9, 3.739787654856988*^9}, {
  3.7397876903571444`*^9, 3.739787701179632*^9}, {3.7398000773839903`*^9, 
  3.739800113151392*^9}, {3.7400386858059587`*^9, 3.7400386882911577`*^9}, {
  3.740039333997943*^9, 3.740039337353135*^9}, {3.74004002554974*^9, 
  3.740040026164176*^9}},
 CellLabel->
  "In[504]:=",ExpressionUUID->"988831a2-4fbd-4c8e-81d4-9db834bb0df0"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[
    RasterBox[CompressedData["
1:eJzs/Hk0lV/4OH5TEVLmiBDJkEgDKXJFoiRjUQhJpck8h4zJmDnzPE+ZSZJM
x+wMZjLPKpJCRb/TZz2/9z7f549nPWs9f3zWs36ntd6r1Xq973Pue599X/u6
9r73zWdioXVvJwUFxW7if8coKSh2Ef9+GyBx6W3ZPAwoZxW6RH2B1ptPt41+
LAPF//xZAbKTnexkJzvZ///RDy3fEGVxa/p//ZuCgrWsdSJcjUB2spOd7GQn
O9nJTnayk53sZCc72clOdrKTnexkJ/v/qv9vz5+TnexkJzvZyU528vo02clO
drKTnexkJzvZyU52spOd7GQnO9nJ/v8k/9+ePyQ72clOdrKTnexkJzt5fZbs
ZCc72clOdrKTnexkJzvZyf7/PP/frp/JTnayk53sZCc72clOdrKT/f9b/9+u
n8hOdrKTnexkJzvZyU52spOd7GQnO9nJ/v+b/3/++//+Q3ayk53sZCc72clO
drKTnexkJzvZyU52spOd7GQnO9nJTnayk53sZCc72clOdrKTnexk/393u7y5
g3xPcdBl+wYzPjUJtJ+OgLb41//+v69HgmImHuBg1ysLLjHcJNi8e/3eXRA5
Y7glU/kADiq8Xapk707DMmV1QF4XchfnJ2l8KzhoHilvKa+YBk4/rHnkN+RB
rq3i6p04OMzsU5J4bhrcdghbFr5HfrPt5BO3YhyoQ7bv8/4pMJ6VWZWOQP7Q
qvlySAwOnq8H10p7TsEqPedKkCXyOMydDXY7HPD8vnVTgWIKonAtIifPIa/4
QVBX0sLB1PXHB8S9J0GlXF1flRp5gc+tAZDAwaPU7uUvdJNQKXTZLJLw5T8f
ak7aCGLHgXSCadqXkgno9nqX1VyIfG1EwcGTEgdcPxjfG5pOQHXi/I6lIOT7
H9Av2Y5hIUSlWJdqaRy48/96iOgjt7icpuCKwULhj0up8ZHj0O7pp255Brnm
w0YByzIs1MwstldpjkNELeMGHRdyr7Tpa0KFWDCM30jUlhkH/xte2/lMyEOO
Gee2BGHB+9KliO+vxiC4KLv+6cTn/7ynsuNhtx0WDtHd79g/MwqxJYTjJe+R
Vxz1E6DRxQLzU4xLNe0o/FJM5Me/Qj7afP/V8EUs/KyyCGL2+ATnl5unz9sg
t5raf9XwPBbokgoC8FqfYL0jrDn0IfLLE86spcew0GDSU041MgLSZm/c3mog
Z/aq4/9wGAtRRVJdUvEjcNtcQu/OReQcXw2KXrNi4cLwo0RJiREwDQulbT+G
fCHRTiyLEgumtyRwZ3OGofbhr+shjMh33MnK/trXDYuH3vzl2DMMVtxT3m7L
S+j6ZoMa6nK7YXzdIjPn6RD4GR/Eh3Yhp6HcrA9/0Q2zrz8mf/g8CNfWzzHE
lyL3cXrl9f5KN+DahfetsQwCxU55vUsvkA+PK5524OyGH8ocsy6PB0Bw7AkX
3V3kAVKYh4yU3RCS2jW9zjgA6hdY5rg0kD8Mku+/TdENrZiv/s/2DcC3muv4
KHXkFf2ehoSZLsi8l84z96YfpNp+ne+WQf7O/XWMWnMXxPucL4iEfgi/wbSt
KYA8bDf/M+r3XbBfwuOiJ08/hBxPkXjAjfyo1p0n7LldEHuBKYB2uA/KdhYu
qTAgd5b2GDwR2QWs7WJsYSF9kL+jXLDq7yLq/712wq/cuqCU3urJPPRBH++d
7MGvyKnfBlietOgCubCwbRHaPuBVKeu4P4Wcx++1UKFiF+ymq9HOsuqF5AaX
K5UNyK+3UkxzQReIVTn3i9b3gNvp+GszYcjjpd8u877tgplDJ9V6hwiw4Kb2
PkUcue5tX8GHmt3Ad+FFNGc1Hu5wFNm5FS/85+bi2+I7v3QDr5Vb0P5wHBhW
XylMOYE8Q/wAU4UsFtwt19jGX2KByzQs/0Lt/H/eQWNxnNqbeH/bSvN+XusC
2+UJz71XkCuf23mEaxYLbUz9O9j2dkANncj2cNbcf15FXZHZKkmM31Vlt1uL
WiEn4+3cnADyqN0LcQ8f46DFvOgaJ2cLZIy4RjZ3zP7n/fsTFzgacbC1Q8LY
16kJBqP7s6llkOtVe2bZ8OOhnt/uy1pBPQQJeer/SJr5zx/HTb4X4iS2S464
2fjnemA9wrf0ugD5FEdr3Qs1PKQetzEoNfoIq/FiDC90kYtbOuW+ZSeAaNXD
I3mEChCf00oYoZ9G7YObqqSXIcCnqJZ7vPMFoDfMyveXOI79397z7KhyvXIb
7F43fPBwPATcdobrUPgM/OdfRM4K0fW2wVgFhdtDfBg8vLW+jOUZ/M+P/7YT
2vrWAgYcwfSPdF9CS/Q7ugXG/v+81ECq+lVzKxg/2FyhPBkMo7ozbrobyCPS
KIptB1phlK6mS7goGK6pso/h96Dvz/E1o+f/0ArCiaWuaVtBkLK/gVN+BR2f
zFoQv+9tK6RH9v3qxAeBGb1NftoC8sbotb+KDq2gNRZEs2tnIBC2DBZ3piIP
qjiaMqrQCtYmt6zjQv2hLyLddt0M+cWzOEEnsVYwn5zWafzlB1m3A3fnayIn
xrfvCqytQOPf6Lf7ih+ky7w8d1aK5PppJTqMjrfC7XgFDlEafxDodRh8r438
g/LW7Y6TrTBkeP+d2iF/ONOUdtxRF/kxYfrqJwdaIbv2fOvTp37EeNeoOCCD
XFFDkk5xrQWyFJ8qOTx4CVTT7Wl3WZALah6X/tHRAsUOkhZ6Wr7gdkOcOXq+
7z9vnuhQPlDRAoy0Yzanil/Aj02zn2XdyEtYDHO70ltApl++UvXMC6jRP5Ay
UYN8foidMSG8BaRuxKvvr/UBrd5dviK5yA/Iqmpz+bRAaoDsGZyuD9gqbmsY
xiLf/HDY39KmBcbbg90Uh73B89VHZX5f5JYCWMb9Ji2QZOi99sXYG8R5DAvP
2yK3YaBlv3GtBZbKBIITu7ygpmL9VsZt5Ndv5mDpxVsg8PtIP9uqJ7wxkoiN
kkFexvd3zYemBYQ7mqx8FzygsTzW+h0z8qbZqcneQQzM0Dc13U12B/n3g7vm
xnr/828e3GcMyjCgz0lbaCrxHHpps6U5K5E/pZCqYn6NAdbcGRq7cFegj6YI
PfMaeeWezokn7hg4xnh+gu+6CzCsrei/ckP+g2ljiekBBuy/tWymfHWGiGtO
fmsmyO/9+U3PqYv5dx9muex1Bim9fRRhmsiLdmlZs1/FwMSrz7+PmDqBddZa
kpsi8qMB9YJTChhgMhrJd1xxhJrdwn9fySC38aY/PUl08d53ao+JXpi88DOY
xAcvVNeZKmMgnaXwD6WEE7S2631zuIDcmH90VfUyBhi6K4faZZ2AuW7ve1t5
5LpUj3z+XsKAzRHVozcOOoG+cvmu73LImaRk9z6SxADnSZ4mj5OOwKnVNDt9
DLmBvqPKKSEM7BV/UMXxyAEULiZpPuZGPuF6Y1ZGEANcIhRxjgYOcHod++v2
QeSxiu+LQgQw4LrP99A3RQcY2QgfDeRE7iPo98OHBwNxqoIDdcv2UDTrvrjB
gvxPSwGOlgMDNUqCAZoR9iAnyOy2QI/cf4erc8NBDJya3HHhW5893JK87LiP
GfmFEyXjxvwYkJxe2OYSdABxPjAV5UDO4HH4vBjx/JXLHKdz9B1APzpjlxrJ
+ReobsjHH8XAkE3MSbFYB/g8mvuOjw952cH5lH4RDFjdDhy5+coBHFcXcq4e
Qt50hnUHjygGavMhWSvFAewDkrcLSY4/eHgwLloYA9q6Ux+bXR1gw0ZFZ4UH
+Uux8y/2EF2r6eILSnsHmGt5VKND4hFsDWwlxN9nfFLWgdWK+P1CSQY/SH6f
aynf+zyJ7Y8PNegTI7Y/te+ZNleS9peZ+o2/cQQDSmpsqR3qDqC3zuB2l4uk
/yw1ntAgHt9RH1R/V94BpEraM5VIjv97mDDx5BgGYlcypRpLHcBq5nM412Hk
r3Leje4ntp8++1OXnjDi9f/d8AwhaZ+frtKqepzE4+ejL3wvs4cTezpfmjMg
x/FZevvSY+Bo7PvJPat2EJSo33mHAvm7Z+71UjQYoGYrunCq3A64fLxp3vzu
QfnZuzvPOmgxcHavZlNAux2Y7aGpM9tC7l80ccJ1Hwa8OGtvFOy1hwn62j9e
O/6P9vvpwPA/7bfflcv+X/tRRu5EHqW3LEPBjIFzEhZPToA9hFa7tupQI7ek
pzS4yYaBkRBJq5vm9hB8Pu7TL1rkOzzPNuOI158v3Yv3fWcPT0o141dIrj/Z
PPmYMh8GaDsS2aP3O8B3aumSjf3IV12or/sdxoBKfh/BQsoB/JQcBMwPID9J
+aFvgdj/3OUdggPzHeD9odT5QH7k5RyysrhTGDgosJC0xeUI5n4jWCFR5Gcr
EjtpLmDA03iBAVocYUIxYshWGvn3/HRJSmL8Y6BytflsQoxPu88/uk8S/5oO
7uL7q42Bn4UBEWUTTsAQzxIsoYYco9LBxalPjL84JdupS87Qlr06//kG8idf
XL/+NiUez+P4VRrnDFXO4sfeGCN3m6QQv2JGvL83D0Y1/3UG24ulZsqmyI90
8nodfkL8/Ht3nA5IPQOFSnZwMkMesy/h175nGNB08nlgT+MCezk5QysdkYvR
agyruGBgm/mb4MgBF3j0ctGBwZlkfNmbNh71EgP9+cHr5zEuEJHN3mztSxK/
qbzCC+IxcPqT0tdnk67wRkSjSjMBOeXTvEjJNAxMM+4PC5Nzg4iJaEbzdOQu
b9V5CMUYCGe6U5BO/xyofzX66ZYhbw3turmnBgPP3rVZ1MQ/B7OVM2MOH0jG
R95VHaU24v2bhgsvOukOLitDDD+7kPfuDmMXqsdA8UB73Mjqc+iyUbzF00zS
fravG93eYoAuPFqn3fE5bO7vu1dcg3xlVDPcrgID3IJ257euPQdhljPyd98i
PxFz9PJyNQZKvFRk2YOew9GO37EKtcj3/26voOol3r9m+pJ2bu5wn3Pvy5wh
5OE5nlecsBgYtZOSNTV0h5GHeR3lvch/yx00levBgNn3cKoNR3ewefTgBXaQ
pH+eP8xXsLcF7DRjdIf3esI9GaMsXQ6Uf7BXM/vNnWiBWHFnKoW9xPxGr3Ck
BZBPzizIOt5sgezM1lB+bm/AXD1j3fQQ+bHBYr5EYn62IGI9wE3Mz45ipouO
kuRnAoLZHvTE/LB2fmLo21VfCNC9VRE7hzyV7rmbwe8WCBNKn3eJeQndPjg5
bi6UX9YJRIpsnG0F6iD1yhEtf3i/U3ZQyQj5PuZUVaaAVmAWYfeOCg6E9fas
kdBK5F2TTfjHe9qgjOaQdPWeENgpcsJL/SLK/3sd3E5srLcBx6t4Jb9r4WAb
S3V1QBHVH6IsbjGH+9sg8nLqcvdgGOxgCGTk5EPO7ma5XebYBp4uH+ZWA0PB
2ND9g0o1+vyT2VJVDYfbwUjSp3F+jvj57sbOL2zR8bXHvvQ8HmkH8bubIl3W
UYDt1bENOT+E8usJhcQHd7uBUTTM55NlCgyIP/XOZh39z0fWHvzdJ4aFH8nJ
a4WH06A/kF5QgW/sP1/K6T0z8QALqk53s6i+p0GV2y8rnRTk/FoE8adxWDjo
zcpelZ0OHsbBs6004/85fShBuacZCxE6/RHl8hmQravygU4a+VmC99MXQjjQ
YNuwCIrKhO87dak0U5B3SZQfUSnEAdPPM9aRVtnweud5R9rTE/+5lPWnXQZU
eDjiKfTbLT0HTgjN9/eEIf95+JJtryIe/IQFX8t650KHqO7Ucj/yY8+YWwpU
8LBDknG7LzoXatzk11VHkTNxLO1p1MQDp0seO744F5gtuCV2zSKn2VLd6tXH
A9Oxm6yavbkwmrvU92uF5PP3/ol+zoWHfVhM4svVHIilV5ZdzkU+NDaYKPEd
BwmWdEo2pjkQbtvZQv8c+axeWVHacWJ9/aJNy/dsLlx6598wUofcjPobbuMq
HkpPZ47eS8gFvfuhRuVjyK2TfYfydPFwoISNIa05F9yoHvJYf0Z+eb9Ecbwf
HkR992vm2+dBFZ/SSRw/qr/jT++l+zGIh0/jvzInQvNh2OKLhooz8pozL7Bj
SgRo8v8Q28lUCFjc0ZbRFeSjPN7RTC4EoDQNgjcTRVCryhr5/cHUf656YneG
iiIB6L7ml5QcL4N4K07LxAbkM9QXL/myESD96Z+HW2sV8FdAbsqREc0ffO2+
FH5sEQ9PHBhCwl+8hTsWJofe6iLXltt1JyAbD6tHNpt3P3oPd3Jjjkc2IHe8
/cEZf5fYvh6loidr62DKStP4xWk0f1F/TSmv5RQe2qyZxb2O1sPSjIO6kxdy
d/dy+rt78TD/5cCH8msNEORiOB5ej5x1p8D9ma84CKH3al893QiyT4P4i9aQ
iyx2PNOqwwFhYGemcFQTKBjPfDsnj+Zn3vvxNUiE4yDfgirS/HMzsX74+/d+
AHK5ztatUlscJEbe+pFOINZBB2mwHu+Rb5o25Vbo4sD+uLz28zfEOrXtobXg
F+QtR4KNBc7hQGXP66cNr1rhc+3d2Q/caH6p++e86xI3Dnje/KTuuEeMUw6r
xXyqyM/HLupa/8aCGkUZVvZxO2zovrJt9UYeWsY1QzOBBbrTA43+pzpg5YBf
/Iki5KW3U4xEcVgIHviEH8nrgKZbTEGKbciPj7xVs8vHQtWjoACl+k5QUIgY
j6FG82ePy33P82RiYaP3foH+aicwi09rUjEhX7zFaKb5kej9sp9ZBDqhbO5k
puY0+nyGPeVrqzNYUCyi6ri0rwMiq4LpeLL/j/OrPPTnf87PhPl++7/zm8j1
Qu4seaHcdR0L7tLbnrJ+7bBHuKfgSgBy07z2phg2HFA/2R0wld4GyaOBHZ23
kO9j2dviLYmD0936uYSSVmgR3Nx/6whyYdEXMqcUcHBZoO5vplYraN3jeOPB
iNwmzvKvnA4OLlDL6iVXt0Dzo+/9r5bR76uuQ98e6okDUz+OqmePMPBrbWCk
MhP52UvKLU1ROEiiY6FSxDVDxebzRS8f5Pvfa0vGEOOvoe+j+rCDzaA6xd6o
b4hctKb9jm4HDiYN1wYoZZqg8SLHCWcx5PXvDGh+b+FAr6Y0J7C+AQJHCKUz
w6j/D2fs1U2Xw4OdupnX0YGPUDtcQ5tihdy/pUhLxAYPgtQjbp+u1EEU3dFm
DS7kep6BSpfL8CBlW6q8XVkDDqPNDSpF6P7+SW3UpUpJgJWCbepuoSowLZp0
qjyBfOXjYw83dQLoyLG9xfiUwkvx7HOSxSj+xEs6douEEiBDeYMrl/0N8LRh
KevkkY+ovBGbEiTAmRQ9t70pBfClPyFvTxeKf6wd0Z5sdXgw3mdlUiiVD8Fd
myK8hsj3cgi4Hn+Ah25txzytrVzI3xXApbOF4rOhSHtyyAk8EA5wTGhcyAVa
bVaLH/Uk44votVhlejzYJiilTtXkQAvddvTtWOTPEnowEks40OnyGrhwOQc8
26cu6tojF754I16a+PvJX6AZ2j+cDTs81KqTriPPdDSY7n+OA8nQKfdPnVng
4iqm60iJPLAm3y9MGgeq5+8/S8dngn8n5tp4KRq/E4RpF/oFcXBxZFZZMCIT
ak9fogpPRv7IVPec+RAWeMQ4dDpfZMCN031jd64h96eqNWkZwUK+ffYE+6sM
UDKSt/2mjryPOyDhbCUWCoq628roMoDhncWbvULIp99FqKx7YaFMIO4rlU46
XNTvMnAbRfnLI/EzG282sUDA9Of8WsuAFzdqPB9aoON75A3f7PXBgpH7wPnh
W+nwuuBHwMg4Ol6QiyHqwbNuKAhlWROJS4Eie9aQVnGUX01pU4w0609CZs+R
tHzxRZjcPXfpdjJ6P6rLpUq55waTIBgsG8JwfBFSjfSX7pN4oojt171J4/CT
bk8h84UFULWuEz7gh1z1xtDJXbPjYPl58NSR+wvAr2kW0B2IPCddTUOfMA5u
Bzs1+Q0WQK9HKK03APlQY+vTiL0TMKZ9Vszo2QIUsLx+OBGMnPG2htHN/HF4
7HFe8LTyAjB2yoq0k3y/wcHIuFtK48BQ7X3xGeMClHiOCdp5k3x+IKHo+pUx
oOE7xFvzdh7UHRKr/z5DnlzPNP37xyfYvstXXWo4D3eaWTV4bZB/rgnqbLw/
AgKMb5bivs9Bx531rQIz5MTCe1oJNwRfhbuYel/MQc/aYBqzIXL22KWeuJuD
8KjuUE4r3xy8PtdyTfo68uHTFZV7TAZg4rY4f8bYLMhwFEs2XUPOnPGeb/NN
P+i6XOQbfzMLFwt7Ph68gtxkbYSfc6EPRJzsul44z4KGlvHuhYvI6Xo7m17/
7AVayYu5jmdnIfW2D2voeeQTimsBzPS9sLTDUPDVrxmofteVbH4GuXYo3cUi
wZ5/edMd6vczsLnhHWZ+ArkUP8eDPEkCTOx9GGHoMgMVKSaxh0SRV3Ven3fy
x8O9MTZKa7UZKBQJOZMpiLz5RBi3sTwe/pZpfuo9NwMFLxpLawSQW2INv7Ts
w4O3aPLGt8MzcHVHD/YSL/I5Lpwdz248vL/+JDmZZgYM5lXqB1iWSe/Ppis7
8KDg2p78cH0a9j8NdsqgJ+kfPO8/HqfAg0r3msnn5Wl4b6UV4kVL4gFmAYRf
OFhse2CFH5mGFoMDl19QIre/LinvRcyfPW/8sK6vn4YbL5VTk36i9X/P/Kxt
ms/E8efS8+mD2dMQVEVh7ryEvIc+Z3F4Bgdd2xcyOMOmYaTnQu+lSeTbb83G
Vz4Rx+c03hNTdtNwi73S17EPuc4xNxvHXhwIiEXOlRLzTj8sjdtAK3KqTIIJ
YxcOVh69Pa5+fho0/HXMumqRU+QdzvpST8wP/SLsk9mI4xL37F3JQuR5Ubay
Om9xED9B7Wj9fQo8r/u/XkhCbrl7UUCpBAdVJYqgPDQF5o3hKSaRyC/8dF7W
KMbBExdBi099U+Ac3HLkRzhyFayRtOkbHEisliRSYqfgqczTj/tDkVdGJxEy
84nn35gvKtc8BdDKfZ0yCDm97ZedigU44K9b0DRvmQLhhMuJSyQufqgsk4no
coSrA9WYKXhlsRyYTOIqt08KrhF93kfm90TbFNC91TqyGkxy/r9Dh94Rz//a
0HUrvYEpeB141zOC5PmRxblrP7gqcXDoUoK859IUaN+ue/06HrnmENfpD7U4
cDxW8ekt9TR476ue3MxCvi/JthrXTMzP7vtQux2ehniJO3Q7ypCPTlfS2OBw
QKXO52t0ZRpuq9seGWpA/ilitf7WBA5ESuXraT2nQVo0NSRoGPkv5THFc8T8
35JOlOrLm2mor7+y48NX5IX3Ew58JuZHB7hD6obmpsFQfDLyMDXq39yHor3c
r+CBy0fg+87zM6BiRMP7XeD/iK8rFsaEf/E1qd935l983ZY7hnwsbTt2/mEP
6NxXydvXPQN3TouWS5wiiV8pfWUSZ4jxZ2erzCHqWfCgkrj9Shr5h57u3yxX
+6AzNDKJX2MWruYH9jQD8gHF+11xTP3QsjLwypSYNxZryStvKCIPUbZsGBvv
B2H8lsF2zSz0GHNKm6qQvB9c8WT67eIBaLzz0Pjz2iyMXOU0GlBHXsb3N/8M
+yB8tNVblyPmvclNWo88tZB7TmI2rLkG4Y72XOgdpjkQpwiqSyRx7wcKpfpx
g4Cf6UwpPjUH5U8KrqzfIDn/75Kix4dx8EDkliHjk2m4PHo23wBP8vzQw9Hi
eeL1jYYdlHAiXt9pD36VXyTXJ5iR/DiFhwDqjrQVq14FkHIt2GRfE0n9/DPi
oJ0MATiZ441eLRTAZm1Vi+U08uxT68Y323Fw+9aWLcVANrRdl4/N00b51YZk
WKMBsT648S2EoI3JhE9fZ5LvFKH8xLLrJf6xCw52f35k3fkxC/BZNwJrt5A7
Rpa/tyHeX79So9+kmGcDzasKukOn0OfPpwU6phHjjweXTYv622x4UBn1XUIF
efb4CvOPTRwo6NH8veaSA4x4wvKjF8grv87mBAri4fQD1zaXA7lw+TG9ynoF
8m/4a/iSi3hwj2s6LOueCxLfExxL+5DvMVyj6iR62pFXz6OJnuKr97ebxKke
x3/RPosH7R27Fwr0c/89v0T3sB35KY0DSTxX8fBWd/a9aWzuv+dbcBjS+RtN
1eD2m8T6/zK7eExbLmQZ3LmZ9wW5+1HzjkaiN756ZuBBdGeKPVtpJC5VwBq2
dg4P+gt6Lx/dyQXV1tUM8U6S+ZX3TzPfaeBBo0SCV7wwFx7l1NyYnkb+VFtW
Tu8yHk7V5WLSQnLhs+T7143DyHVu+y4eJ16/SMTRCnO3XPDNrv8uQHL9bP62
H4pZ8OCSfvABdX8OpJadEbBMRR5WPBS41YoDMfGFpbOEbGDTZaM8qUXicgUn
lyJxwBXh3FLAlQ3ZfEd3eRxAHt4gFPTTFAdhIV+cuC2yQJBTwOP0NOo/t1/8
ZW07ToxvXrfmCkszwcBgylAjFzlfGF/W379YsDhk3nJ2TybMNfm9vGyP/Ngz
5vm1aey/+bWuubwMeOcmn9h/E3luz+eJUxgsKCwHhVJfzIDVqLwea5L5wSKZ
Tw/7ArDwmMWTpskqHbTWKUVSl1H+rT1fozRohIWUR2u5FX1pYJj9p2HwFXLl
/KbKHn4sBK38bEn5m/pvPXPnFh3yS7GOmK7pbjjhyWf/9XoqPDonk+afgvJ3
vVh9j2rNbqg+ZX6+QjMF7qu9Xn1IiTy/LqS8PrsLyn/f4FgUSoZ488FY2yuf
UP7goEh1b08XpL+TPMd3JBHM69+PHkoc+c+lYw8P8wZ2wuw3hq9epvEg/dvr
eCgLcoH4/aomop1gamA16MUQB3VxX13kcofR8UfPUF5Y7oCI1b++gTKxENZT
b9NshlwvIX4i/mMH7OjeXV4YGwPitz/27D+D/OS2q/3b5A7YHZ9x8KNgDPxk
crS/zDL8f9xfRqkdcOt0gljosRgwP7eDhZUN+b1s/4f7GztgnmOp70FaDJxz
PR/achZ5D8OiZ8XnDkg3YuKPOxkLE5eMdHbeR96ysPRwJ1MnFLtk5b0qiQVz
qb7Cl0HIb1w9d670QidsZdlvZurFgUabQIDNR+STb1p/cTl0Qt85q4eWnPGw
+YSbqugP8gWF/H2ikZ2gEBSIMfWOh1kR0daH3Kh9b4bi5OVfdkKFjJ7ouE48
5FZSl+kxIJ9sG+QS9OsEtt2ig9R68WBskDuszYh8MOzGN4X4TrDQ0Hl9LyEe
5NfSm/iPIBeO3c2o5dsJS172NJHa8ZCsWX1FZx9yw+fMRlb1nTAvUmP3+3AC
3Gs9eLtMDfkiRvDhhE8naB2OCfNQiwdT/iNfG+mRE/NaGv7iTjhOqW21PhsP
Qux3p4ZlkN/bn+KYxdYFOSoUp65eSQT95TM3VHOQX5S+78TB1w6p57PvuY+G
w72dCwmJVmh9YUecjaP4NAZKYubrtBfcQf3rmYijS2h9aMyi7Pv84xaQeRtp
ejzTG44lvCpcdkPrM+XmXlru0q3Q2BTH43XZH1Y4T+cW3EbrKxwusd8Pq7SB
wOS6Zdd8CAznvD0Q7YvWPxZnHKpf7m8HTf/i9UtvwyH8kAEF7310fhQhLNTs
ah1w+EvIiNPOaNiXdkhe8y1a/0g00A7BRXdCgsYUTiE0HiYv0p66y4euf+0l
7q7rbCeEWfVd2ZOWAPSfi5m+2yGvKhDr+KLSBbxZFxdZqZLAOYQnUXUK+d1o
FlaccRc8W1RekNFKggLzH5R8v5HLSrgzPq7ugqjg0S0a5WR4YZCzXWCA4sPG
E+6Dbird8PhUjssPxRRoob8u5beJvGDjhVbebizQl0U1TSWlwtFzYdYD3Sj+
pFyVNj32AAuOT48ovFxJA9mP22UdSSi+Kb2hnndqxULpt3cCdFczwEzIy/Xz
ORRfa2QT4k7twYHrrec0lSczgTuS64uzJ3J+qZs0q6o4YNW8HWbLmQX9+3k8
9rWRzN+cUvv+KxwH/lGvXw2wZgOBQ6zWlB2NL6V8f1VL5nBgS3tsZlkmBxax
C0/9rEnG5z8W5ZTE8TF/Mqjs8atcMDsidtqUZHy0mtpvI1uGh2bPB0JL9PmQ
5xS866wmyp8Eeh0MN1kI0PX8VpyJYQE8S/+oZvsWuZCn9F86bQJ02JmqlcgW
gmDg7A2ebeT7H1cNZQUQoPh3MNPLxTcgFRpTf0MNze8perH2BAYRQM8fjjAW
v4G/rs1vpa8ipz469SohhAC7Olw+vGN7A6uraxpCJPODDp5blcZuxO8fjAq0
7i2EcqvGi6piyAPprYUGbhJAXibqxhHNQnCVD7hgsQt5mS1Ve+lBAvww930r
6FoA6dr9P9fq0flTV5azLS7iIbA9615WZz54v6d1rQtErvP5eHtSOR6yMRVl
3Uz5kCjEM/VOC7mj/eZ+S29i/Z+ifs7CNA+ipQ6yHudGzrPpRempj4fuupY9
Ij25gL9R/SCJZH3r6KQts68YHn6b7yplO5kLmftWxUNqkaebP1ju24MH5egt
V513OeAWeHZ5Mgb5RKRAkg4DMT8TPVGSh8mBX6uebCUJJOt3S2oYjRN4KPix
iLWAXHCMtl96QzL/OXmIr3rsHjH/asQIlG7kAg0tLnj+N3J2ugG1e/54oEmK
d7BwyoO+hQvxeYfR9RkZ5Jpg4vGw7hq+IFOdB4yHd516cwa57D3JAs1uPDDA
FRaTJ/kg/eerbrk5crPbafc4WQmgI7lO3U/sfzxa9IrRJP3PMXwMf0KeADss
zli0bBWA99By+5tF5G45SQ/CPAlgIb4tLjNdCLusEk9/OkHSvzwphFytCKDd
IS8t7FkMrkdC2nWckH8Q6sviu04A1SdyOlZQChjW/JNROcijfVVvCRO//8Fq
Z4WMURkwm5/81diCnFiXuTOdIQB/3I+0ixtlgF2Vbb41iLyRZmLPGVECVB3X
8dybXw71OQyYns/Ioxx6nT5wE2BDNc5Q07ECCOZrFT93oPn1TLfRFxgGAkgx
elhJqFZCOufP1KUDyBfPRzaVbONhP2vexUvqVSBy8QbLtiTyP9eE1byW8HDG
WIn3kvVb6Ow888nnBvKb+RN1fSN4WGO78rJfoxqGGwxj0p4it2+oYK/vw0Pm
7+VXzAXV4Ng/OJfigBxzl/pXSDse3K4cmCPovIPcIfNYan/knMc/VVtG4+Fy
Jeu+q4a1MHaKOYp+FPnl0x4uyzZ4+DPukrl9sQ7YpAcP7OFE6xMNLk4nBIn1
Ra9o3WrV/o9AY/PuebkycvoOuk9z1/CgZrXHwMz0I5w9tlci4Cby8gajBqNT
eGiJr29KFKv/95xe1RFv5BaeFiWRB/DAsYzZOvWtHsoDe5Z9C5EnGkX8UuDA
A+eGZqvs73pgUeaJKytCrvGHI0mXGw/xMjcmynrqofj0yl79bOR11Iqrc0fw
oPJMOKw+vB70lwIYLsciH6CLLfkkRTy/3ZNXDrPUQ9D3M+FmbsiZGvYJ8dzC
w7LsN1tjho9wIHz7D7cS8vteqhpCgXg4lk+3lMXxAVojGFbPr6L2Fb13QI6q
Dg9mb/krv1PVQPcT3XMUCchfqd1+zbmbANJO7lSY7krwDH2dKSaMnP/l9+s3
jQiQrfklWz+yBFg/fzAQfo36rxqxAF29QYBBxfuFK0qFoJgXfvUyJfKBrvWd
Exj8v+ecdIS18qFxT2pZ3H10/9bdUqm4RKx/O9Riiz05csE8jXJPLkn9+4hJ
M9AjAAdSd3TSNn9mQWyx2fjRfci7q5X2cIxiYVBv157K8Aww+SA0bahJ8vyE
TOCtOGL98rbGK7R/OxVUA+8dcCepX0I8ZOMIm12gdm6Yqq0iGYqc6zIqUlD+
MP18VfcGdRcIUHzlUGFJBN79j+QSo1F+siX+5OkfDmL+8/0WbW5XLKg2n2iS
ikL5s5lNPJecRAe4MWSbKca+Bta7Mbb4aJRfeWIqhTgftRPrJIrk/rEIsKm9
eZ/zI8rPLCOFQiYr2iChxbOKxywM2JN2uPzZQvldnqzHoVG6NvAT3/mxmTYE
jLH1cuUKyMPHUglqXq0gv9f7yqRuIORe9hHifYPyx4XL4gwnvrdAZVVz5bTR
S7BVfn5Rmhm5xbeVQjbjFtCJCmrAaXmDkJp5P4M1yfPV09/oOxcwEGvy0OYb
owccMbrSevkbym9ze3XjguIw4PC6tyAJ7woMfWOnOOJJnh/T3cFmaoqBX5+P
LA63OMOr7JVBWpLn6wLFdrluHcDAbId9Qd8be7h26r0rLcnziS8or6aGdjbD
/kEbpevO1lBsufqr9x16vvJJkWWwXEgzeJle1dA/ZQ4cAgk8zE7Ie5TsDo4Y
N8P1deZ4wd9msOrW4frsEnJe8bOZ+orNcMSpUP1J/z2Q/pBSZiOIXP6Oxq8v
Es0gWKCNDS69C+aTii2qTMgNHL5H2x1qhuUgPo2DU3fgc2D3DcO/6P3vl8fS
r2jsb4Zg/ytXdjQZg2fn2RitNeT3hx/yPmdshnvzp/ZsHjIG+WtBmltfkLMF
lQedYG0G5UvrSWf9jEExe7Ji5yryfcyp26/5m4HFSuSSKq8JrLezSxZTovNj
f5uVEufRDKsabcxJUU/AmWK4mf8hckZnqQD33jb40xDVRdcTBv6Huno0eVH/
HOJyyTBq7YbWTydcsvtwwBPw9OOiGtrfM/3hwmWOS9h/88IjU36fgOto8zqb
Hdpfxm/965GBAxbqCt5dEVgZhREvxs+Udcgn7gw5FOh3Q9LZpdIx7UHQqQn1
SAtH+6cGw+teVDB0w9Pp6hjRSwOwWBKdT62PvETpvK0n8fxClS2XLg4Pgdxh
piLXGeQ59/s8XTWwUPjO6RzX8CdYqe/jYH6Bvp87TG8A0rBQcTyZ15F1/N96
g/YTSrR/0G2SgnkEhwUf51/HQqvHgcb+z7UZJeQ3WBS3tsaw4Myh1/nl8zj4
mv/s/kGyv5Hr57NzN35igePi2Uh/2Yl/+zV1FFyR14Srq3uw40AjE+ddVzIB
r6SCW0pJ9leqsgVWmyngwOuDkW361UngbtMIzfyK/OCXKqZ0MxwcjC3hmiRM
QozpdHSqEJqfjXr9R/e7Dw44qmRNrstOQWQP7TktbeTe9/s797wjfn66eoPf
5tS/eqPVLhX5E/t0z8VhHKRFMG7kmU+Dq33dnA0BObWZflB/Lw7UjM91Ut+a
hsTX/ufvtyGfTwu8ENeDgwj/5syk69Mw8iCyPbgFubGtk7bKEA7Uix+Nj5tN
w0dKscjdOOQeYTtknnbjYInbXP2owjRovpc06KsjcbnQJP1qHKxJSS2zrU/9
yzckLFKQj+992BgYgwP9bkapY55TYFzEVfKSZP8ss7o9S6Y1Dp7Qbq4ErE/C
rEOsYpAUyf5Zd6zJC3Uc7G1QTr7jPAn2FI1Cp3YgdzcOLnwmgYOYtfWjDXsm
QXWTMforyf5ZWraDXSvMODBuF33ukjoBsiyxh2azkJ+cLexNncXChpbjQOyu
CTh+jenzyD3kdD402MK3WLj+95D9Q9Nx+N7qf2aEn+Tzx+/7HYjFgi3hvmn1
3BgEel3lbv2O+vdSS2hflAcWEp+/20V3dgx+3dUruNCN/KjOXpM3T7GAZQw+
K543CnRiS7ORxci7NJV5KdSxcDYumMYV+wmKAvemDXohv6pzqSXoOBa+76p3
u70yAs9eKsX9uo489Jvw1usDWJhPvmo5pD0Cvn7U2nAa+bTnKbNNKizMXmCg
om4ZhlRsyVFKduTqsg9EWye7ISbhUpKO5DBscH35o72B7u9J27Atk6puSP7E
dx4ShyCPz2qhegC5+qHPu2i9uiFe46XZofFB4KNSV98oQl6vuarSTow/h1lW
fl+5Pgg9iknv3pLEH4kr93IH5bphvO/TkyNfiPFnt125kBty64blvsjd3VBd
fXfztPAAEGqm6DauI18LYLZdIuYfTa1bap7r/aAeMjDaooJc+Ni3Q7qc3RC9
kRZN93gAaM4un1o1Qa4mrJis8W//7Kz0bkvmQaB6dOL0mg/y+6k0IkfudMN+
Lbcw/QeD0Er1ILniNfIXuwITqYnX9+csFV+Q5iBECj8TESK5PmL8l1H16wa9
71O+Vj8H4bWFK2daOfKWqBlRs7JuqOJdSWYMGYKpj/vTGnqR8/y+Fb/d2A0v
797eJdY+BJJVBVcPTSJPUKHWyBjrBmMdYTrBo8PA3Tqz8OcHciuuvdLW9FjY
xqcqCf4cBi3hPRmZh9DvT1/4Nq+W83/6f+4+gxH4efRk4E9J5M4W9PLH/j2f
m2B0/d7YCEi/7OM010SuPBv6YaciFl7wnPgl4fnp3zpfuxPJ/uwArsrxHDMs
HGjzUzP1HYXZfPXhA7nI+fSjfAnRWPDvTpjPHB0D1esWp6a+IVeKTk3f+oiF
NY4Zn12e45BmuyAvdxzdnyUshpzXifFf9KVH2Ati/P+T8y37Akn8x19XF6eX
wsGppoOWr3knoa1BofvsCHIebQfuKDscXGO+OrpzxxSw8SaJfyXZ3380eOfu
PwU4MEmV37fdNgX3X96d2iJZH+5QkHnuQozfFWtmXw8T675FwRNfu0nW7wLS
P9E8o8ZDrpjdBT3qmX/rh8dmmNH6ndGz+7RbRwgw09NVJOI4AylMT6IrjyJX
tjHNECTmS7Q3HtlP1MzAlbe/Nx6RPH8xtLOAgmG2B0YXusINVmZA9M8BZksp
5JwpSQ+/RPZC3cJtWX/eWXhDs91AK4OcoNZ5KZenD17s5IuRVpyF8vq1xwly
yNXovo++u90PY6OSZtiYWUjELu35qYQ8TP7rjqupA8A8/OnixMoszKvssrQh
WT/VEXpw+d3+QbiRXh/NzTgHfDdviDwnWR/lvcobq3FnCGh2mAp3mM2BxT2/
aQF95F4n+IuZXIdg9rCIiJzlHBjL3fowSuIc5b/Z2imHwZjPZmYgfO5fvHmh
a4ScPn/qptLcMPiH/75thpsDTRZX2Zv3kC9pB9OyLA9Cv++PZkGVOWBn1JsS
ukny/Er3Ue1hjhGoP9FuWD46B1sSCgrp95G/aFnIU+8dhTyBklfxsfMgkeLZ
/dMRudZFLvejHm2Q4hLA0ZgbCn1BDkbuDai+SJreJ8P5vQ3MPdRM7siGg/DV
grYAQPnh5/TajoJ3HSDpq3eg0ScGFo23fiVLoPpoz56vurbGHSC8U9NPUjEa
Pi58ylHvRPVRBFvDJT3XDuBNknRhzo0GRyHepabPyF9lMHRGXe/491ythwln
NDyJuppmWod83xUx06K2Dngotn8gvzoGaKiOOG9cQN/vLrJz9/MrnRBPJamb
7RQHzAEcPLvbkevKtbP0EOs/M9qTeBq2RFg5HSMtHIPqvxZeegOp9i7YXvmu
nGqaDLJslhU/zVH9OHIpOvVecTfcTv8Rr/UrBZ5tJoyGPkTzz2cyhfLLieOn
Uyn1cUJCGvxItXcof4Lq0yjaDz1PqrBQ7H+mZHlfBnjsphY2EEb17ab7hazz
W1gw/NJ52oMyE7yTpGeVbZDz9hY9dz5JzP++fXAXeZ8JbOfejJwvQC68KiDC
a44DbjvbP/deZUFniRCv2FfksbeuUi6X40BgulPUNzAbhmb0l/VlUf1t8u4Z
tvg3DgwZpXKeeubAtavH+NVfIh+d4Q82ATzsMIuo2G2VC75/SmUp8ciLfX/i
3vjgQc6+Rq7PLA/CqCuPBfCQzB96cm0GVOLB0fp1VBRHPggkK7wjXEc+VHDP
5FIXHvZduGVUZJYPXdt1EPoUefQvJ22uWTz482xwlNfkQ8L7U/7eviTz1+zK
Mx1beNiVrpxwlrEAJJ+rymikINfrEbrVQ08Au9pgt1OXCsC0+BpVQTFyBd5j
4dssBDh0/O+arWEBZE8VbzqRzF9eyFBpbBEggDM2NSMtpgB2dfxx/diOnHmN
vY1ShgBxY71jG3MFcF2bWeY7yf79rJndX1M0CbAp3BLx9kwhGEQqykb+QS44
ShncakoAoUt2BnLPCkFKBj9jwYTmXx44+6UUuRBAb8fYs+fdhUD3c6zfThT5
D091TE0I8fw/Xpwz0ngDo3Mbtb8vIU/+qX840YcAScZ6DIMaRSC68ZRV4Sby
139DohXsCFCUVJa4drkYrM1Z+ARskNOut6moPyAAK72CbNDBEjA1KnnE5E8y
P+ok7aV3m/BvfdEhpLQEyv3Cz5nHIp+TtM9TMCDADadv9EcaS4C7xOPwuXjk
U1qRl7NvEWCAni05eakEIj12anokI/+j8VAp9gYBpBsJo4dESuFQpdF50Szk
3l/DVBp0CHD25GKnL3sp0EQd5rqYgdxMbs7ZmeiVBqnHB7hKIelmVmM1iatT
NL1kuEmAHyadTwd2lkL74yOsfGnINePT+DeI1wcFqW/O5pZAQ0ql+OMY5JmV
cPf0fQIM7piT1xArAY/iWv3JAOR9Oat8TNYEuIN5XnzXqRi2l19G33VEzrLy
eH++GwEmFZyYT1YXQa63kEz+XeSCI6I2ba8IsI6NYWB/+gZC/nyk8FdGPm1C
/2Qf8fvdddRdKp8Xws2gI1E4ZuS61L32t88TYGkTGi+vFEBDjbK99+wkqf8c
oSOAT/gg9yW5//FfL98g71K3ijd5j4eMEE5aUbF8oDHQ3RDXJ+m/UrzrtY/w
sMl89OUYbR6c9yiylqJEvkPsdsoAJx7yrYZZZFdyQPt1oO1Zkv0/2q0UISMD
OBiMH72QsTsHan9PNZiYIC+b5GpT8MJBeXL804XBLGhu0hyWoELeZ/1Ah4FY
P9dNHfnItpYJaqtpEadrUfwbPVg4M06Mr2yn8Ul1OzMhWvJE8iZJfCXmM09S
iPUXjSaN/XGWDLjPsX4oXwQ5TOqOPArHwj58woJLYDqk8XcVMFEgp2UtbhHw
wULLz/KcY3rp4GjS179vAsX/o78ulhYIY4Hl3KabHGsaBI7mRFexI1e59YLG
IBkPuqVdFMPNeaBK4SYaKYPaT04vXp7tLBbOp5z0YFJLg2qp68OWMuj4Yyq0
VofF2mBEmaUj3DMEWC7Tzu8yQ+O7YZUNnx5zGwQ2rDkKC4TArwpjmWEV5MKK
dXe29NrgIrfOwEmBUOCt45dciUE+mccteXyrDebwhYxLRuGwvJPxg48Kyg8s
GBTqxmTaITT6UtC0bAToqGawNAcjN1xjKzNzbQf/0CNxM4cjidepZsnbh7wt
49vjlrF26B39lpXlFgXbDzpNz8qj8T8MQ6hPV+4Avt77Q3WfXwOdWWqkagny
g2F6ZkDMT0Rlbv6S844Bgwtm7cIk+Yn/QX4eZmJ+cEZzxUrYMQ7c2ooDQtqQ
a7C4unENdQKtu0z1PYcEeN1RvOpghvKDZDOe5ArLLjjI3pip6J8EpgsXoy3o
UX5gfTVP/iFbN5yLSME/mEsGjtIjbbUfkDd/OlRN7dsNpWt/XDLepMBSSFym
pQzKHzpKw34eWu8GeHEqX9ouFajr1T67lCOfCxTeGhbFwmvuSYwtbxqwmohn
Z/Cg35/pb9GPS3bE+l3lbaIMfzoYmhWqudcib9xhdEeoEQtZOW+MlaUzgJE/
ho1PEvXfE1SPP/ccxoGLsH3KS79MYr4nl3o1AflimNWf8gAcRBVSOZesZ8F2
lev6XZL5+zWzXIfn8ziICIf9DXI54Hb9YoeZDfKoHfiuqGt4MPvqwn8gLReK
XnXtd5xAjhW+7TwWjYeYwAO6Dvl54H2CP9L8FOr/Lw7qW8T/wkNxyZP837sK
QO6ZuE5/Asn64bU+mgMmBJgQrb7XYFUIax9PXvXch+IfgfEGKy1x/Jwp2PVE
YrII9NJ4IijNkLcNM3GUXCXAhS+ZO+59KIWpraqbNpXIy/23m4GZANcLfFKq
BStB5+q5VyNsaH0lplo0ToCYv9BwH8DWHn8HV07m+bb5IL9d++PAiwA8fNWb
E5Dk/wDuHoemlb4jZ67h6681woPC5Y7tg5/qIN86JeisDFofsh6c1ys6i4d5
vOmH6q2P4P1ie7HRCblz4zx31i8cfJWNetY63ADslzXabk8g/8NO49hfjYNt
rkdfqz40wcVDr9/LqqD9Sa852unu/3uvk0+E19BiM+SKtFowkOyv0xKxT3d/
goPPT54K9jG1gILgAco/bci/ieWnOV3DAcWdqBGBrRaI91vY3txC7hfNnNYv
gQPLmqgslb5WKDk+GEAjhvZvnbTTbVs6iIN9odMyRk+JcSZ4+0vTNeTjvdZ3
LYjx24zV47KwQTs8G7Qf8fZAHny4z1hqFAt9RnRyq5c7wE3Gj7a3DDlFfrB9
WB4WomnuzW23dALNfO2bfTRofxzvW0m+YjMsHJMpnTrd2A0z38rGN+yQC9UO
BTAIEfN3Sf31jSEsONS0hvVOIBdvuvHR+VM3UPNGvPMrwsEhF+Fz9+TQ/LmL
MWb3ScNu8NIX0/qUgocREW66rUwSJ6zhLMO74D2/9hdl/h5IePB5b8w19H6u
8j91VKryXZCoP4+PvtcLwWG6nSc+In+RG60i79kFBpMtO1mv9cE9DoeG2G/I
R+1TbgX97YLPDc7hEXsGQIwq3eq3Gpqf+fVVJ1PsYTdMX36w8dtrECzeZ54t
TUAulJEcV2ndDS97eSl/ZQzCzCVBju505N4MR9rac7rBh0Y6/8KjIdCwWb0w
3Ilc8U/D9vAVLOTf/DM6kPcJIFTo+3EXNL8irLBY+Ocs7t9zYZdTxCZBsNXm
N8ckyfv9PGR/a2pPwpCekcDho4ug82N15+ckVN9inYK2TG5PwI4B95cSxHa1
nsyT3xeOnDbj+PU4Yr2R8f5jP4F4/FnFEbktkuO3yzS5V9LHQfQDffO5iwvA
ODex9oBkf4/xXObTYx/GoOYmx+TNwXlQNWcdZn2OXPPalb7P9Z9A+uOZa5Sa
87AxGXC/1Yrk/L6GKNh5DsPwU/Yhg4o5mAx15C03Qc6WI/FT/+kw8OeuzJUW
zcE9q7+9QiRexiuSuo9jGEz5MwZxMXOgWZuc8JlkfoGmSUfjOPswMB3Q+RZJ
9Gxz8eZZEn9/5kXdYPoQrMZ85l10noOQU9cEFgyQp4Wd45u0HYRz/GP3jETm
wMUkIf0Hyf4g7tDlMCWmARjSKVX71ToL57qe6mRfRf5o1MpfdKkP5By/4Fmf
zYJthfv4T5L9P+eF3jPsxfbC56enevmOz8Iu7oI/wbLIG765zFoc64UTXWON
53fOgsrz4/rKJM/fd7FlKAY/7oGtmpyW590z/+apamRInt8XwLW/3AoiwNvm
B6sMETPA799KaylGMv9yjq9H2gsP8RxhhOeqM1CdXJtmR7L/Jzr9pKTkNjE+
LZkrjc1P/5v/DQoh2X/wibqcmA7gIJd+Cv/EchpMWHdlHO9B82s43tiYzloc
BN4VEP1CPQ2cp9d0GbKR+9v05Ezm44CHvfc+C2YKemJnvfRI9n/EFQqtckXj
wG6WZ5bWdQrCLSrWTcxJ3j/qxuFRl4SDCaF9EkrRU7D9peQMxolkf8aUakNk
Hg7kZK9yWNVPgUDFO+1HAch5WUR8hKuI3z/JqwLLU7CyeWdSKBF5RL9K1Wwr
DpTmH6Q6iU9D9aYSTWwV8lNPIn6cmsSB/F1BTRbiuHY+drEVP4IcWxH73mod
BzSltAebsNPwvYCh89kf5K+zR9v+7c8MkMLIU3HNQNcT3dP+XKh9R1Te7P2S
gIdlS5myHO0Z4OPmsRcWQi5z+hj1ILF+UaZSkwpxmwEv1ZOGuiT7u65Pnrsv
MEGAZIs9Ooa5M+Akt3Mk/jjyXnuWP40aPTDvjZXXaJmB6fePbr88SbK/MOLK
tXcKPeCzpCkd2DgDSuUvDY6SeLY2z3mRLgLU/uzAK2XM/HsPZR03yedTPu4V
/yFBgMffRCi4ns2AbBLlXkqS8zPxeJPt1oKHvTdOsLEZzQDzyGWfS8LI+3/s
qfjyEv9vXK7arTYDz1nthuJI+ie2kqqUn9h+XU1jzB6cM3BMuWVRi6T9zh49
09r0AwfNqqnM2LZpYC1UXt7aRO0vFXzznf8cDoSNZcYPRE9DUZvPT8w08sfC
5XMeWBxc5/l0YZfSNLR7G9Va1yNfbsz3PV6Gg5+lN0+yT0yB1yMvBtlo5L4f
BKd+EftnojDt+f3Eujjza5ssjzPyD19tkyLDcLChfmb61sMpiNLXWxK8T9J/
qiwvbxPzy4iB8s0RzSm4N+6+om2AnIt5fXycWP+xhfzcs3p6Cq78SAiV0UDe
f/JA5o1nOMAqFX54vn8KTj+qdX9+keT9u3n23LzWuH/72CjyfkzC7i+9XI2S
JPurNAfHO+7jAD8r/Verc5JYP/ldmRZAXp/ZdfiVHvH8/PSbSlMmIefJTZsM
ZuSXJ5xN0zVwYHJiEW/gNvnv/a7Wn3YiP0vwft+gSsyvxebtAiwnwfjWw1m2
bTS+PZ2crvhykeiuBUn7NCdBo6Xr1uIKchPvFcaL/Dj4c5A3h21wAj5S1MvX
1CInjg+xCfQ4eJ/96e5qwARwKKaXOSYiv6zxZ97mDxZeadH63tKagAqfOac7
L5A3S8oFGPzEApfnVGa67AQIvaw+f41k/YJhT7nco2ksjKvxZxb9Gf/3vJVl
kAnyUw1KmhZ4LAR6js8k1IzD6teW5jpl5Izhlt9McNh/71d+OVE1/u/9yg0S
JOvrNqYzuro9WPjioUPxsGH8335KsWgV5JPhai7Og1hIH6sNq+wdB/OttXsX
tJCH2aetD0xhYb1z61vur3EwOC80V3YHueGQ5UroJhbkFt+8Y7k8AV0aI75s
nshpbAUjJbhwMO4etTjxYQKqT5x/d6IM+aWBlXwtWRwIXGFUWJOchJYYQZWI
GeQUO/p26D7CwVC22p6VwUkos2ocP3oU/f6HzTro96UR4y+Xx/U96f9XVXce
TtXWBgA8lKjMEiFDlCJOZqHXHJnqFtecUsol4ZhShjIcQwghisxTJIpMuShn
UDKG4so8nSiEBunb/lr7+/v3rLP3Wc+79tp77fW+exyySB9DngUhl/g8WNvV
j7XfFprE7TgBGjk6FVbtyCPrOAbSmLuhoe3jDirzJER+lePnweWX/mF5NTLd
0QNOrK65jdj1SfByz7VDuOtTZwqx+Mf4e6gqkRQOUJyCDvmYK7y4/Fu1F6xr
S/oDYNSgkSE4MAUqvz9wsOLyf4Oa3a3mBz6Crpe851jkNCTtixjWx+UXSybO
XBra8R/IcPP0ZonMAP3Y2Z7vbrj5l+pwjbl2GJ5kSLEyJ83Aftktl9Rw7yfK
5+erT0mMQNBocp7qxszmPpuzZbdx+c2CtUHCoyPQMCPNEuY0C6IPzadjcfnd
60OdeupY3LeXT2nRGmfhoreWlncy8gVNOy8H4TFYnkhnPMo2B/JqVUSBDOSt
xywamcrGIEjVMFLHZg6mWAQMM/KQS+lavK3nH4cnQW6JbPfmQFeIvgQlyGW3
5QlPPhoH3oDftIShOTiyAAf+qkDuMh55Se7wBET7lDS8OkAHVWOaVlwN7v3N
sdItk8kT4CF10zfWkQ5nRzvaCI3Isftny4v9ExDyRflaRSgd0mqbfmc04/L/
CiT7FBcnYF04mjEmgQ7ZR5Nq1lqQ37pODTNRmYTLwVlCB17QoY7viG8OGfmW
kYFnb/0mN+sQE5o/0DffE5sztuHyF0mNdC1sXmM2epTyYJAOsmIiiQScb9cV
JkuFT0LKvO6+zyN0WO0J1qjC+WrncV+1m5MgW273RXQIO7+T7YmaOBf/Jfp4
xWoSdu6ytlei0eG3S67BJSry9MTS0BtKk5v7N7JkqulQWnpVPBp3/loRcaY3
eSeBPZM11h97LjlotqDU+fr/7p+7OccmgFk23sc1ig4uyvGLMrj+EXxE26Ck
TMA2/hTYfp4OkQ2TJRq4/l/SOba+g38CphJL5rcL06GV3GDw4AVyQvj2jNLF
MZBk0nrPHzwHlTnM7xWLcPUJhCeqXN2H4dRVjxzG4Blg5SN16Pvi3v+Nvvl6
jrkD6mbDcx0MeyB4+KzawS/o+ZDEy1RNONUN1l9uLfOeaQaZy1+Y2s6i53ut
vE+VzW3d0Fti0i/oVA93wwK1bWPQ+kKonIlN7e1u2E+7oP2k8F/gf2BJeMmA
2q9WzteUYvcfhMJzR9xM/93Mz72/sobaT0rccxCV74G7lfGfVHWrYM8l5e/+
o2h95Of2BJne4W5QCGMpY8sthUiTH3vuB+PyE8TXbdmauoBp/PDM0adFUMhq
K+B4Aq3/aL0UsDDq64SkB6m0o/75kFf6aXDYEK0/aQe+EVqV7Nys751ZsiN3
M3/7TzsXWt8S+nt//YW9HSCb0aot8zULdDLtjx9qRetvD3P2u1gMtEOexREx
Sc8M6CNb3YtyRut7hEPHh00738IV9452v3dpEJZfd2P3CbQ++N6nKEVv9A2Q
mrOfj4emwJfJRqN+HbT+KJX20KZR9A3sF75er/NfEjisWYZo4PKHnFfY/cRd
2kD4ZsMbdssEcB6zjLEsRuur/PbDdle/00A0/jBvbEI8/HP6UUm2LPIIr5yX
Wrk0OCBST+dTi4X0xerUqS60v5P5Q2XDR08aXBErONQ/FLP5vrFk30PkMfy+
RcxqNFhRbZFSNokG7/MSdHBA3p/r8ZJ1Nw1MecVWQsyioGRJs5BLBbl4nA+X
3lcqsK8l3NAzjoQa7fluFg7kfgN6Dhf7qbDCXBw4+4AEXDN35L8to/2lpNzH
DcbtVBAQiLJvOEsCIbYs3VVcfWOGPOVF02YqpGVFfJHfQtrcHy8yM4i8um+P
Z1YTdbMudZvrrwgIvWajLo1zrebWC4GvMbeuzy/kI0Hkz4zZc5+QazQlMY9T
qDDrHuueLkuCT0pXnnOPI4/QnJ/52UKFhQUGbqZdJGC/qnWg/j/kSgvthYHY
8anSrnG+PyOg4yqj3Tbc8RVaBnXl6qhQohTqzvAuAu7vjm482ItcJ9XD8PUL
KvDMUutXGiI285MGwruQ50WPhddXUUGvWvNG5pMIYKzfO26Gq+8sVNWi0fuS
Ci2jjpWV0xHQx9B5U2QAuezUdEQY9v/8w2Q1tsiQ4Cv5dvfjMeSnByNumdOo
8E0hfTFXlQR6aqfDH00gd+cO9Q94RwWW9idJ3PYkELblGIQ55HzuP6QSh6jw
Sqmbza2JBD3mqg9TfyAfee/1t+MSFRSezppI2kSCuua17RZcKD70Q3qMDTao
oJlHLGZ+Egl6+QnKRvuQ5+dUKKti8VccbJNCNY+CnAe/QQ8XfyrK6nOjB2kQ
L2brYtMTBU84pLuSjZGPHsiNVlOhAc9IyflQiAaPnSkTRnbIX6TQtPx1aJAZ
fr+aFhcNQjtE/pBw9cOP37vCNXKCBnIpA2cmn0cDh+Hte/+4I+eoHthdZUWD
lq+2zPHSMTAttD76MgQ5xOQbRmI+JtUre+ZwDNQK6gnG4vwOQT/Ky4AGsUrc
l3tLooFXh5Q55IaccaejTpMeDb4czekbzoyGFd7rnUyuyNUtGveU6NNgRkv0
tHl+NIR3p15kxLUX6tLs6cc8k/dhTUJBNIQYN8kq4lw7SHmHnDENhP+qMFN9
Gw02Ef4VW72QpwqPqWhj52f3q7DGvzgalpx2zRfg2u/eG2mhgfVvMhOJKxXr
3z6v6QUTXP+2+4Y3ekrSwKPcU/xwSxQ4uwbqLxgi98qljrlw0sCmtoF5+kgU
iPzQbWWRR36ONe8tCYufxFN6/uq2kdh8SlkPxsXP/X+c2Y5h8SkjVeFhYkuC
fbTJmh+zKP4e+Tl9SEmjAt3t6obyTDgYKViyPH6KfDV9n0b2KSqIDc6k/zcZ
CsLlW5w0ziOvsfstasVGhbunf+wN23kb9FpeCP3agzw5I+hKVhsF/NQGo6WV
QuBfWSYRqw60fz37+9GFuCQKrEpnnJs6HwiNLTrLTknIB3Z5sBlfpICE4AbD
DUoAhGRPpy2cQ77GtI/zuyoFLuocjM+66A/L9tH5rwjIM5bPCC3xUGDOvOtE
ho0v7EoOfu/NgtzZ2dnAY4kMRRbfThy57Q1mTjc2foyj/d/+HbdWEjbrmqWV
9zdWekF9vZns0SbkW+I0nUJayMBjLFloOOwJUQsCjrRy5FWuOkt3C8lQf+Zr
3a0LHnBo1w6CbyLy/JfNi38FkyHdUfWciqUbsMbUqRQ4I/fR7PJRPE+GUWON
X6NbXTbzkcoGcfvzpV/VcA0CGR4uSAf6Wl0Cjgf8n+6IIX+xeFA2XJoMmnGE
gq2CTjDnsF3MZSfysqGdHuOYr9QGZztLOoFBTfG/HTh3XTzEKc1FBsLJzkez
Co7QPG4bWrOA9tffPjaZXKZNhti+0uEPMZdgdDmXHLkftSe70Ya4lluBfvmX
519ka2DknK5dbkftp7Q4Gk6utUJYsdCo53Mb+LUjPfBON/KMLNNGyKZA0Jnf
HQviQfAXd+Iz4xxc/XerV7EhshRgbTZP2NXlB9fCtrk6SCJverqeXWBLAc/x
elqWaQCweZdNhVsi1y3duLnkTIGzji/IU58DYHdS6qluXP35KZHAL5znKLDR
sHUvNTAAtm1wtmra4JymxKZlQIFEi+qt4yLXIdRNwEANcPXXq4O7HmtSoJc9
eNt8gT9s71WXH1NCHhCv0Np4lAIdceWG5A0/OGvJc3JKCvnPBcsDpMMUIIg/
SGZK84OQ1dymHbj65W4Vg4Xaklj8mwrqPTXzA9ugkUhTXP3w40m/zadEKJCz
JjYmxeQH7fNBJP/dyH3i3eo0+bDzE+Uj/gzwhQW6Y/K3Hbj62B/o1ov8mPdW
snFn+wLh0du7k2y4/O2xUU/pvRQQ0zbJd6j0hfRumwh1XH7KGxOX5p/Y+DPn
uCS9x9YXqij040G48afLVEGo2EWBcjmq99/ffOBDELdMPK6+uFlfUUfeNgpo
L73zXL3rA4k746rHvqP4ulzVtCG/QYYlYyvlPwd94M9N2y7KV1x+i5Ptuy3f
yXDaSCc1p9MbhsW/TrPMIb+2ZGsnvkyGB/f+U1mP8YZ/irhG6yeQW3ZH5/Z8
wcbfPQeqtb03nPVrZRUfxeW/nPzscIdOhrrHlUvMYt7Aadeadn0IOU1szODK
NPb7EotseVNEaKYp+6z1I+98uGIkOEmG24MSdxXIRGAvOK/i+x65jYw+n+84
GVQ0Q2lbyomgP3Qz/3EP8ttt3xWCRsmgmG10TCuJCMfaxTlIXcitWz5KeXwi
g9XNzGMnfIlwpKfc6mQHcib/nXqMw2SItvMwEL1AhF6Zzt/17chD2CJDGobI
MDt+d7/cKSJc0S46Y/0Wd/2RP/aw6SMZ8u/wcCsrEoF42cCR0IbcNkDRNOwD
GRLfSECbOBGePbBmGKAinyqrq+PE3DvqQ62bEBE+irPK2uBcMef5KzbMT7z9
TNfBfPJC6bIlzuesOdu8sOOPnCvu+SxHBN2nJQWDNOSUPoWLR7HzL7xMaAg3
JMJegYlPzW+QyzMeZqnB/n/OkNve/W5E+BMgOXbrHS5/qnxbLdcIGUT2EBSP
BBOhj6Z2/Ceu/yRuhG3IYf2f+M9s6GIcEdrirs4exfV/9eWUpy6Y/3k29Wdf
IhFEcodqPXBe0G3+1mqMDHxWtmdPPiLCmN3+XT7dyCtyPWecMHea8P0xhTmf
0n2JWzinZAfJOW3Gx/ZGw9UyIsTdu8qViouPpbTP6uYTZFi8znF9tY4IPnNz
7Pd7kbOHd/CtYZ4xL3hI6TURLjHwvDPDxV/Cznf8pCkyHPqTJ6j5kQgBynQT
Rlz8EuUIxl4zZNijkUI9uUKEay5KPAIfkPMet33FMI/ND5/aslKVvCEpLnEf
5zBu/GTaH67H5t8nxWOKphHewKZmSTLGjb90vZdajtj45SsStZl47w1D33m6
PXDjt+xU3t/cDNj1sUzDPPiUD6yeUL08s4zc7PljQiMLBfaf+v2qqMEHbPKi
AnTWkX8fFbVe4KQAz1XxRkGCL9St6qfLbEPXH4Hpa3WqghRImqh1V2j2BSW2
tkpHTuRivgUyydIUmP8W2j1W6Af850vqCbj6/jksxR1X1Ckwwm+vzUryh5Nd
h7tdFZCXvtZQZzCjwB++M6AWex0K+qcSS07gvk+y4vQq9zwF2rIkzLhyAiBV
jH3XTntcfXgfxuoX3hRopRxcZy+/Aeqe1kadnsgLOq+HU0kUcK1ndR+pvwn2
RRpCiRHIPyZa+Cxh86vF4FImWSYItL+F6bPn4r5/YfIjq5+bCo8mnlUYyN8G
K7FLN9aE0f3d9uqTVy7mUEF2VkrE4EAECBn+Ha5Vh5xT81AS7RwNusNUqvzt
Y4BOW5cmRqL70/8BwsrVvg==
     "], {{0, 0}, {300, 7}}, {0, 1}], AspectRatio -> 
    NCache[
      Rational[1, 2], 0.5], Background -> GrayLevel[1], Frame -> True, 
    FrameLabel -> {None, None}, FrameTicks -> {{{{6.5, 
         FormBox["\"Predicted Exon\"", TraditionalForm]}, {5.5, 
         FormBox["\"Predicted Intron\"", TraditionalForm]}, {4.5, 
         FormBox["\"Predicted Unannotated\"", TraditionalForm]}, {2.5, 
         FormBox["\"Real Exon\"", TraditionalForm]}, {1.5, 
         FormBox["\"Real Intron\"", TraditionalForm]}, {0.5, 
         FormBox["\"Real Unannotated\"", TraditionalForm]}}, None}, {{{-0.5, 
         FormBox["0", TraditionalForm]}, {49.5, 
         FormBox["50", TraditionalForm]}, {99.5, 
         FormBox["100", TraditionalForm]}, {149.5, 
         FormBox["150", TraditionalForm]}, {199.5, 
         FormBox["200", TraditionalForm]}, {249.5, 
         FormBox["250", TraditionalForm]}, {299.5, 
         FormBox["300", TraditionalForm]}}, None}}, GridLinesStyle -> 
    Directive[
      GrayLevel[0.5, 0.4]], 
    Method -> {
     "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> Automatic}],
   FormBox[
    FormBox[
     TemplateBox[{
       FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           GraphicsBox[{{}, {}, 
             RasterBox[CompressedData["
1:eJw1Vgk0lev3NkSGlFKKlBSlydSAwiNTaTBF3ZQhQ4mbMpQrQpSUm4RElKFC
lFRSlGTIlOEMOObhDBxn+iKKbuXnv5b/u9a71ru+9a397v08z97Pq+J2zs5T
VEhISHh2N8zu/zuvIRw2y4V9htDcWlrcMJRoRYWWomRGQOdn8M+rWSuOHkbL
lMnYVBEVxuYflrTp1M59d8cNww9CznJtsDl/Lnr7rVq4b3x3MbfvLEwjd8hW
X2iDa9ran0kj//9/AP7UFiqrd7bBr7b97OSeOqg3C+iujH/wTlpd89audlwZ
ixlySK+bi3MZATZZRuPp7bijZOBQ8r0OpCpjsR8+V7D1rqLV0Zl2ZO0l6uVt
6+fiR4Hdlej04WQHXvpnGwQV1ENKWSrV8FQ0slfLnFWp6UDlA4cimljD3L0x
OOEeHRq9ngZyvYSqnmsDLEKoW666xmJ53kwsN4YG+rf391LKGubyuQUy7580
Gy4N46vPSU8vbUSlj5Wr59Z4/Ks9nv/mUCdE9q8NP3aucS7PO7C46FOmWNSJ
JRfax0sbGtGvsC0/Jj8BQu+ZDeFLurA2M+aUouqXufwT8X7GqYsZ2AWdL7u7
L4V9wa+65RMFG+7iohmNbUnrgsl3waGezi9zdSVD64bNVKF+N+xUsit3b2uC
wsVfhq2P74HT3DB/aXo33A467Ei/1TRXbwqeLDFdHvynG/5BEk9/jTRBV3Xo
+rjKfbgc/bC+37UHUdnvlZxMmudwSINi+o6dptU9SGz2jS9Pb4YD5TN5WUY6
2gYLzfPUevFoSmXe6h/Nc/g8QJyauoNMTC9er2sPCrNtgX9E/kp9pQxYemd5
+HN6UW0Vw+0vaJnDLRPzXigG0g72oS14twvEW7HvXp1OYVMmPn5LjDJ40Qfm
YwElw7V1Ds8s/KMnk5i1uB8TrVkWQu9bcURQSoN0NnQuR2eLB/Yj8vImpyIp
0hzO2eBXzrz06eiHlNy8e4O6JHiaPwslWz5CnnhwJUlvAAl5fSRZT9Ic/o/g
dmCctCNtAIpGb6X2JJAQmP5QxT3mMZTifQbv/x5ANjXezK+CNMfLE/ztPf5j
RnMQm854h2XxSLj6Lb52ovYJGha8CNc5OYhXf0zfkRXIc3zlYP0Ln/meCYPY
lbRqXHgvGQn7o3yixXIRZat++171IKo2/tisE0ie4zEXg9+Y8o0Tg9hfQfJ0
yyIjK+uC7AqzPBglZz38pTYEin1+RkILeY7fPKTpOa/XPDoER05UV9V/ZBRN
nX7zNPIpproVC0/GDIEe7iT3TZ0yx3s+HC7TdiSVDsF7me6hdUco+Gjt6Li7
Mh+vlJPKazlD+JYve/1wFGVODwWQrbIxn15JR4gx51NUEQXNOQdnmmYKcNZD
pnnzITpEO6p/vu6jzOnkGRrFG+2dw+iI9XmwnSlFRe9vo8fORs+h/jS6N/4F
HXLCQb5L9ahz+nmOqwdMPaoH6UhLtskz86SCY69t+TW0EHT+DHdyMQPrtmyi
ByZQ53T1Aoj/EKBuyoDIi4oyj5DZOCGWhnxuETSo+woXnWFgUNsh0d6DiriS
cl655Suskm9nf49joKKY42N2iIp3Y9rpcbmvseDYyXX9xQw80I0w276TCsaW
nAMuYm/wXxrf6XM3A6Fly1apKlMh46X4n6Z7CTj9wSnPhJhwNCyYlJOgQu9R
XL5Q5Vt0qYhTE9czof/JuEV0jAK3fhFH8upS1HskyIQcZGKFaUfOty4KYhSC
JLNDy1CSu3qfmz8T3z/7hDOqKHhlz33n3/0eTzj5kZYpTLTvE/6LWkBB320X
L1O9ciRt1S3X+shE8ZdkreokCiS+UJcvTf6IqPPVP5YzmUiw2iL5+jIFOuL7
6pjfKuD/2lpnRpIFP3LlUPYpCgrXOL/vzvuEk997/h7WZMHa/mhZgjUFZkYr
5KqPVsJG3yu32YEFDRovIVKPgs7jFO8C8SogdGKoOISFBY6RPv4qFPgG/1uV
+KYKGhURSulZLHB7l5u5SVEges9CMdSjGkoiMkej6lhodHmuZPeNjJRiIX8P
uRpIm6fe8eazkEc3mdzTS4YGpazhYFUNfl5Xa7KVG8Z1z85m7c9kVBGBKjv8
PmO08aW4vv4wTrHP5qgUknFERjN41ZpadMoY7VnjMgwzH9HwxffI4G4aJYm1
1qLOpjFk/rVhrBOkHBWOICNi3yN1weU6lCQeKRHkD0PYT0NrzIsM+VNOER1b
6vGkg/61nTQ822fVEkO2ZORHLe/82FOPJIVzm8u/D6Pi4rEh0i4yjLPImrk3
GxB54j/Px0ojeDAtKP20joy2j7HXb+s3wi/jemasyQhCQ68mFC0gw7vXfCCI
3QhXulyPv9cIHGcUfDInSRD6ObPT9d4XWKtlLnOMG4F+5AvT+H4SkpaXxe2z
aIKR1xabPcUjWCFmrhRRR8KmHYHDWpNN2Frw7qZ69wi+X++eOFdEwkc7DSOF
x81QEph9XiTERrvU+WaXVBLsz7PvCh9ugbQ2eea7GhvFt8RyrCNJYN/K5o8K
t+JngNOu/gNsJMimhcGHhNCCE+aUolawS0YDP/ux4ZeodVTTnoQbHrFWfZok
0KYvvHh2jw1r+VpNZUMSDgd4XbK9TkKtgQgnsZwNjdTjEovWk7A60jzn82wd
b8LjVEMYbCxQGhv8s5CE0fi1FP2dZDyuUnRxkxxFh6FMQB/RitcZM7+f3yIj
USw31VJzFImmeqrlla0IK+zduJZFRuS+bW1aDqOwsXRvT0+c9YXyUodkAwr8
YisWrggZhYx1XHSoZyvkmpKvSM32gWvLAcuZzFE02pfqntBtRX93wPMwLgXW
izujhmtHEePIZO+WbEXeqE3XuAkVRvYeH5t5o7BwXXR/Zc+sT01tFTt9n4ot
975OFS/hQOTUrgP/PWuBwXxp7Z4xKlZ2h25L1+Pgk4/nr+6wFsyXZ5+wtmyD
1CpJ3yhnDi77xT8vs2kBWfVzTHVmG6Zd7uZ5X+VgV9B75/trW5C+LbtYd6oN
7GwVhm0+BzztV4MOe1ogZhoz9t6zHVYx8Wr6lRw85OW5LXZtga+dr4YxtR3F
Z2dOr+nkwCY3g9k0ey/tpL1PjXEHFA/75s8nZvN0Sz4V86AFxn678vYVdiBC
r48nEOOiWOkW2/RDC/Ij1rCaVtIwvOqgZocSF6doUd4z3S2Qixdfa3uDhoOi
7/3Kt3GxIuESr2y6BaEZPOf27zS8Ym8sfryfi8aDfr4XV7SCVUhJO+bRiRUt
Kd9jT3IROt/rq/YszlYf33X2kTsR9nq+fsA/XGhUOfvzHVrxtvnhMjd0gZly
McTxNhcDoQ4TeYGtWNN31W74WRf2h7HK9+RwcUf34EWPWX5v8Lxveyt2o8jd
XmhjORem4yZTyq9aMf6fTZPgejfkLatNZNu4mHymf6mH1IoT0rqSAZPdCNXQ
ufaDw0Xuaa1fybO6qlFcZfHDrQd0uay6fmEettyRw8b5JGzeJBoVQurB3ulF
UrUreLgmWCh0XX627/RHK2YMe/G8P+zgc00e+g9IVTLVSPi9r/VXVEEv5Gr4
cUkWPOg+FYs02UHCqb/e6Eso9CH46QlyiBMP8eLCpplmJJBOp138N7oPA3Ff
5NwDeRh1/yX65zAJekFXXstO9ME8cNeR/bE8mFT+qDnuTkJ29OmvSSf7UXDs
aYp2Ng9pq79dK/UnQTr50FaF1n4sxoqeFaU8TIQILJbP9m/gk23eDwwGEKR6
fZUQiYdDXaPzL9whoa9YIVclfwB9kt9dRoZ5yNnJqqdkkrCOPjNGkR6EKeGR
3fKbh5nEwRtas3Ojc9Rf9q7JIJ62UZlvlvLx11jP/rjZ98y/YyyNo8GDWFRm
suHBZj5eWtGkeS0k7Jn+65BC0SAuZLw8c9WED6lnlCbL2T6fFGry6RkeRM/V
Nc98jvHhLtlyK5dPQr4Ebj5YNYQ93rcFduf5+HCqwUrsNwnOsq/yXOyHkGv9
R2vXdT6W1dQscp+dk3Ir1OpUYocgs+NsgMpDPnxVPpE+rSSjXjmFxagcQoBi
7xuJN3zUhb2/s3ozGaEbpOflTA2ha2b/FPGFjzW9JXahs/NZSzNsrZcmHWCV
7qLR+QjWfyXXbUkGa+eY8aZTdDxpVL/8cZoPSvLzNt1jZNw38nDhpdMhXXSv
4omsAJsn8u7enfUFKwva5UIqHX53xUVubRDgqu3jI9+CyBC12p9+XooB2qUL
ZoFGAvQWZiy3vU5GiUN5mc4eBgxcmdHHHQTYsSCtszB5dv47aXVNBDGQbX64
weRvAeLOJKcuyCFD2fPRj5JCBiQ2V0lvihJgpPaOo/ebWR/5W14+mMWAr6y2
1eL7Ahir3lpZX0NGTOCN7buVmGibzIifKhIg9UpMr1obGYahv+x+2zGxq2ch
daBOgPH+qAdRDDLGo875VdxgIvPT5WV1/QIcMAh3HhonIyeWfvvKJybEc3hH
CycFeJx6SRkiFDgmOhSa/mDi79jj9+8uIPD7+4XB9MUULEqrbxLTYIFyvrE3
dB0BWv5PtvwrCirzhr2XHGMh6adG6IsNBIqcw8fi7agIKJknqXyVhaNXE1fS
NxO4uWTeT6lvVKjVrM3d/IIFhYVTZUu1CLjXxohcS2xDJ9nYXK+bhd57Jxz3
bidgeElGemZbO24OODPMxIbxUKVyOliPgLxGglxwWzsM+KFXbLWG4VqglvrM
gMDXIXmlb4EdEPy8r+x8fNbvd9zUGzAm0HA3TfXsMhoyJUrLvaOHwfoooC02
J/DIcs3WkTc02MnTjge9HEbuvsNBZpYEQn8/3nHySCfmqU5OR/UOw5vyVj7o
EIEjLzca9XzvxFttuZT4+SPYckKp5KktAS3PQguHe104A+2dD3RGQLAiHHod
CEgqbLNu1e3GykPWbU+dRvDyHGtioSMBetPbo5ad3Wh2POtfEjOCgGnLpD3O
BD5EGLhW/9ODcK9Y2erXI9gZVbgt0I1A8vZKL0OFXmhffFrY2j+CqQVy1JxT
BHzY5n5vS3tBj6o72CvJRllykH+XNwGz9MZgbcc+JN1hcdjb2bi8pnfxgnME
VttYRxb87MPeDNEbky5sIN/4pVEAgSnRtptqaf2YfqayQSSWDZHtT2z8gghQ
3v6VmLF7AAVl+LywhI2acsmvj0IIFPj0pSn0DsCp3sl95RAb0Xt9b3eEE6ha
pE2xNJqdFx0hwuoLRmFJpmhIXiXw4kxAR3TcICoZqRnbdUchfVy3ZXcMgfTq
N93V/YMIHHtruMdtFC3MtLO+/xKIWTXVL6Q5hPUz7T2Hbo0i3ldIJiuewMWg
XQzD8CF0LpgIdnw3Crspj2fUJAJu5NCRS61DuKm4ZMVpxiiWRTYcEE8lYL25
gvtWmQ4Dda2SgIUc0KQ1uHoPCBhcE/46cY4OwQ4r+wh9DlLvJtz0ySKgPmA6
of2JjkzTv8f/9eDghPKPjQ+fEFimHz3lK8uAne3N+NTbHKx+eryB9JSASGL9
rwJXBsRc8jRyyjgY0vnkJVpIQMCTEh4tYuDt37VNr1gcPPqgKrHzFYFei0Ni
64WZOHOJ6V0hy4WnxY1crxIC9Zm3Jd1tmVgZIyLZtJsLdRLfIq2MwJufZJnM
LCaa767J7TzFBeeY3XDzRwLZ9kuX9I0xEf7IyJx1h4tnjJJrQtUE4gqPyCua
sKDz8gRj7AMX586uVNtWN6tniVTFowksMD9euvJnhAvtH+E1nl8IeLn1rE6i
s5DclKIsLTfrKxFM95RWAoc/rFpH1hnG3u6S8uVGPJRIWYp+oRIwlnfdsDBq
GNMjbcdVz/DwT9Lz7N80AlvOZ28+QB1GweT4tFYSD7tXLzHR6iWg0MjUjFk3
AifRxSmGFTz8zr045DZIQFx1w/bPASOQXay5cz+Hhwrtnoi7TALjl8/oidSM
oGr1obYjy/iIfI819WwCg7QCAyxlI3CLj7+7MR9m5o8rfvIINGkLjEM92Fi/
64bseR8+5rdKuGwdI1Aaq2VeWsxG597cwtBkPhr+OvvHZZLA/wCuRpEH
              
              "], {{-110, 
                Rational[-15, 2]}, {110, 
                Rational[15, 2]}}], {Antialiasing -> False, 
              AbsoluteThickness[0.1], 
              Directive[
               Opacity[0.3], 
               GrayLevel[0]], 
              LineBox[
               NCache[{{110, 
                  Rational[-15, 2]}, {-110, 
                  Rational[-15, 2]}, {-110, 
                  Rational[15, 2]}, {110, 
                  Rational[15, 2]}, {110, 
                  Rational[-15, 2]}}, {{
                 110, -7.5}, {-110, -7.5}, {-110, 7.5}, {110, 7.5}, {
                 110, -7.5}}]]}, {
              CapForm[None], {}}, {Antialiasing -> False, 
              StyleBox[
               LineBox[{{-110., -7.5}, {110., -7.5}}], 
               Directive[
                AbsoluteThickness[0.2], 
                Opacity[0.3], 
                GrayLevel[0]], StripOnInput -> False], 
              StyleBox[
               StyleBox[{{
                  StyleBox[
                   LineBox[{{{-110., -7.5}, 
                    Offset[{0, -4.}, {-110., -7.5}]}, {{-66., -7.5}, 
                    Offset[{0, -4.}, {-66., -7.5}]}, {{-22., -7.5}, 
                    Offset[{0, -4.}, {-22., -7.5}]}, {{22., -7.5}, 
                    Offset[{0, -4.}, {22., -7.5}]}, {{66., -7.5}, 
                    Offset[{0, -4.}, {66., -7.5}]}, {{110., -7.5}, 
                    Offset[{0, -4.}, {110., -7.5}]}}], 
                   Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4]], StripOnInput -> False], 
                  StyleBox[
                   LineBox[{{{-99., -7.5}, 
                    Offset[{0., -2.5}, {-99., -7.5}]}, {{-88., -7.5}, 
                    Offset[{0., -2.5}, {-88., -7.5}]}, {{-77., -7.5}, 
                    Offset[{0., -2.5}, {-77., -7.5}]}, {{-55., -7.5}, 
                    Offset[{0., -2.5}, {-55., -7.5}]}, {{-44., -7.5}, 
                    Offset[{0., -2.5}, {-44., -7.5}]}, {{-33., -7.5}, 
                    Offset[{0., -2.5}, {-33., -7.5}]}, {{-11., -7.5}, 
                    Offset[{0., -2.5}, {-11., -7.5}]}, {{0., -7.5}, 
                    Offset[{0., -2.5}, {0., -7.5}]}, {{
                    11.000000000000014`, -7.5}, 
                    Offset[{0., -2.5}, {11.000000000000014`, -7.5}]}, {{
                    33., -7.5}, 
                    Offset[{0., -2.5}, {33., -7.5}]}, {{44., -7.5}, 
                    Offset[{0., -2.5}, {44., -7.5}]}, {{55., -7.5}, 
                    Offset[{0., -2.5}, {55., -7.5}]}, {{77., -7.5}, 
                    Offset[{0., -2.5}, {77., -7.5}]}, {{88., -7.5}, 
                    Offset[{0., -2.5}, {88., -7.5}]}, {{99., -7.5}, 
                    Offset[{0., -2.5}, {99., -7.5}]}}], 
                   Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4], 
                    Opacity[0.3]], StripOnInput -> False]}, 
                 StyleBox[
                  StyleBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["0", TraditionalForm], 
                    Offset[{0., -7.}, {-110., -7.5}], {0., 1.}, Automatic, {1,
                     0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"0.2\"", 0.2, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{0., -7.}, {-66., -7.5}], {0., 1.}, Automatic, {1, 
                    0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"0.4\"", 0.4, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{0., -7.}, {-22., -7.5}], {0., 1.}, Automatic, {1, 
                    0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"0.6\"", 0.6, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{0., -7.}, {22., -7.5}], {0., 1.}, Automatic, {1, 
                    0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"0.8\"", 0.8, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{0., -7.}, {66., -7.5}], {0., 1.}, Automatic, {1, 
                    0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"1.0\"", 1., AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{0., -7.}, {110., -7.5}], {0., 1.}, Automatic, {1, 
                    0}]}, 
                    Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4]], {
                    Directive[
                    Opacity[1]], 
                    Directive[
                    Opacity[1]]}, StripOnInput -> False], 
                    
                    StyleBox[{{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}}, 
                    Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4], 
                    Opacity[0.3]], {
                    Directive[
                    Opacity[1]], 
                    Directive[
                    Opacity[1]]}, StripOnInput -> False]}, {}}, {
                    Directive[
                    Opacity[1]], 
                    Directive[
                    Opacity[1]]}, StripOnInput -> False], "GraphicsLabel", 
                  StripOnInput -> False]}, "GraphicsTicks", StripOnInput -> 
                False], 
               Directive[
                AbsoluteThickness[0.2], 
                Opacity[0.3], 
                GrayLevel[0]], StripOnInput -> False]}}, PlotRangePadding -> 
            Scaled[0.02], PlotRange -> All, Frame -> True, 
            FrameTicks -> {{True, False}, {False, False}}, FrameStyle -> 
            Opacity[0], FrameTicksStyle -> Opacity[0], 
            ImageSize -> {220, Automatic}, BaseStyle -> {}], Alignment -> 
           Left, AppearanceElements -> None, ImageMargins -> {{5, 5}, {5, 5}},
            ImageSizeAction -> "ResizeToFit"], LineIndent -> 0, StripOnInput -> 
          False], {FontFamily -> "Arial"}, Background -> Automatic, 
         StripOnInput -> False], TraditionalForm]}, "BarLegend", 
      DisplayFunction -> (#& ), 
      InterpretationFunction :> (RowBox[{"BarLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{
                 RowBox[{"Blend", "[", 
                   RowBox[{"\"DeepSeaColors\"", ",", "#1"}], "]"}], "&"}], 
               ",", 
               RowBox[{"{", 
                 RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Row\""}], ",", 
           RowBox[{"Charting`TickSide", "\[Rule]", "Right"}], ",", 
           RowBox[{"ColorFunctionScaling", "\[Rule]", "True"}]}], "]"}]& )], 
     TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"]}, {
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "Below"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.7397875841532917`*^9, 3.73978765576225*^9}, {
  3.739787691675602*^9, 3.739787761456337*^9}, {3.7397886378599167`*^9, 
  3.739788898114155*^9}, {3.739792343753422*^9, 3.739792367043935*^9}, {
  3.739799968697645*^9, 3.739800138189157*^9}, {3.740038622374917*^9, 
  3.740038693760952*^9}, {3.740039341993683*^9, 3.740039369425997*^9}, {
  3.7400394790335608`*^9, 3.740039579651469*^9}, {3.740039620299714*^9, 
  3.740040285697057*^9}, {3.7400405191543694`*^9, 3.7400408668800993`*^9}},
 CellLabel->
  "Out[506]=",ExpressionUUID->"2c17b2de-9359-4880-af60-8b33443f477c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"i", "=", "6"}], ";"}]], "Input",
 CellChangeTimes->{{3.740039375431716*^9, 3.740039446049438*^9}, {
  3.74003963399188*^9, 3.7400396342867537`*^9}},
 CellLabel->
  "In[137]:=",ExpressionUUID->"723af58a-67f0-4df8-b173-79c1e1be6a8f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Export", "[", 
  RowBox[{
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", "\[IndentingNewLine]", 
      "\"\<imgs\>\"", ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<incept-net_\>\"", "<>", 
       RowBox[{"ToString", "[", "n", "]"}], "<>", 
       "\"\<_test_data.pdf\>\""}]}], "\[IndentingNewLine]", "}"}], "]"}], ",",
    "ap"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Export", "[", 
  RowBox[{
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", "\[IndentingNewLine]", 
      "\"\<imgs\>\"", ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<incept-net_\>\"", "<>", 
       RowBox[{"ToString", "[", "n", "]"}], "<>", 
       "\"\<_test_data.svg\>\""}]}], "\[IndentingNewLine]", "}"}], "]"}], ",",
    "ap"}], "]"}]}], "Input",
 CellChangeTimes->{{3.740039375431716*^9, 3.740039467763205*^9}, {
  3.740040211291759*^9, 3.740040214240653*^9}, {3.7400405992367992`*^9, 
  3.740040603949958*^9}, {3.7400407328266783`*^9, 3.7400407405608597`*^9}},
 CellLabel->
  "In[507]:=",ExpressionUUID->"79692c5e-0bb2-4b17-bcd8-8443be86ffa9"],

Cell[BoxData["\<\"/Users/sumner/Programming/WSS2018/Detexon/imgs/incept-net_\
4110_test_data.pdf\"\>"], "Output",
 CellChangeTimes->{
  3.740039471441386*^9, {3.74003950197255*^9, 3.740039529815571*^9}, {
   3.740039571944603*^9, 3.740039614217907*^9}, {3.740039650266823*^9, 
   3.740039690739224*^9}, {3.7400397321421967`*^9, 3.740039746620719*^9}, {
   3.740039814307411*^9, 3.740039845190184*^9}, {3.740039904188436*^9, 
   3.7400400547974777`*^9}, 3.740040094386342*^9, 3.7400401288299837`*^9, 
   3.740040166374316*^9, 3.740040215284627*^9, 3.740040271598192*^9, 
   3.740040534524578*^9, {3.740040605661767*^9, 3.7400406214015703`*^9}, {
   3.7400406899234333`*^9, 3.740040718394617*^9}, {3.740040767851327*^9, 
   3.740040871102126*^9}},
 CellLabel->
  "Out[507]=",ExpressionUUID->"c4ff9790-6987-41ac-ae09-ddccc2a55128"],

Cell[BoxData["\<\"/Users/sumner/Programming/WSS2018/Detexon/imgs/incept-net_\
4110_test_data.svg\"\>"], "Output",
 CellChangeTimes->{
  3.740039471441386*^9, {3.74003950197255*^9, 3.740039529815571*^9}, {
   3.740039571944603*^9, 3.740039614217907*^9}, {3.740039650266823*^9, 
   3.740039690739224*^9}, {3.7400397321421967`*^9, 3.740039746620719*^9}, {
   3.740039814307411*^9, 3.740039845190184*^9}, {3.740039904188436*^9, 
   3.7400400547974777`*^9}, 3.740040094386342*^9, 3.7400401288299837`*^9, 
   3.740040166374316*^9, 3.740040215284627*^9, 3.740040271598192*^9, 
   3.740040534524578*^9, {3.740040605661767*^9, 3.7400406214015703`*^9}, {
   3.7400406899234333`*^9, 3.740040718394617*^9}, {3.740040767851327*^9, 
   3.740040871359118*^9}},
 CellLabel->
  "Out[508]=",ExpressionUUID->"88fd5da7-1b25-4607-b058-359409051aa1"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"to", "=", 
   RowBox[{"Transpose", "@", 
    RowBox[{"tNet", "[", 
     RowBox[{"s", "[", "\"\<Input\>\"", "]"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"no", "=", 
   RowBox[{"Transpose", "@", 
    RowBox[{"Normal", "[", 
     RowBox[{"s", "[", "\"\<Output\>\"", "]"}], "]"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7400387381298943`*^9, 3.7400387585337877`*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"cb95b0a8-9397-4b6c-a8dc-ef5463312aed"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"to", "=", 
      RowBox[{"Transpose", "@", 
       RowBox[{"tNet", "[", 
        RowBox[{"s", "[", "\"\<Input\>\"", "]"}], "]"}]}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"no", "=", 
      RowBox[{"Transpose", "@", 
       RowBox[{"Normal", "[", 
        RowBox[{"s", "[", "\"\<Output\>\"", "]"}], "]"}]}]}]}], 
    "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"ap", "=", 
    RowBox[{"ArrayPlot", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Join", "[", "\[IndentingNewLine]", 
       RowBox[{"to", ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"White", ",", 
             RowBox[{"Opacity", "[", "0", "]"}]}], "}"}], ",", "300"}], "]"}],
          "}"}], ",", "\[IndentingNewLine]", "no"}], "\[IndentingNewLine]", 
       "]"}], ",", 
      RowBox[{"AspectRatio", "->", 
       RowBox[{"1", "/", "2"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"Background", "\[Rule]", "White"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"Frame", "\[Rule]", "True"}], ",", 
      RowBox[{"FrameTicks", "\[Rule]", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", " ", "\"\<Predicted Exon\>\""}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"2", ",", " ", "\"\<Predicted Intron\>\""}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"3", ",", " ", "\"\<Predicted Unannotated\>\""}], "}"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"5", ",", " ", "\"\<Real Exon\>\""}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"6", ",", " ", "\"\<Real Intron\>\""}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"7", ",", " ", "\"\<Real Unannotated\>\""}], "}"}]}], 
          "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
         RowBox[{"{", 
          RowBox[{
          "0", ",", " ", "50", ",", " ", "100", ",", " ", "150", ",", " ", 
           "200", ",", " ", "250", ",", " ", "300"}], "}"}]}], 
        "\[IndentingNewLine]", "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"PlotLegends", "\[Rule]", 
       RowBox[{"Placed", "[", 
        RowBox[{"Automatic", ",", "Bottom"}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ColorFunction", "\[Rule]", "\"\<DeepSeaColors\>\""}]}], 
     "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]], "Input",\

 CellChangeTimes->{{3.7400387381298943`*^9, 3.740038851216888*^9}, {
  3.74003890086692*^9, 3.7400390365347977`*^9}, {3.7400391616040497`*^9, 
  3.740039168418446*^9}, {3.740039207868816*^9, 3.740039320814858*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"ea8f036d-ab0e-4b19-a481-15b38d2fda9a"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[
    RasterBox[CompressedData["
1:eJzs3Hk0VdH/MH5NKCSUkpCUJDOZ3XeERAmZEsmYZJ6nZMocyiwiQ6SiZKiQ
BvcaIlMZKvN0uW6GSknpOT3D5+zn98fv3+/z+z3XWi2r9Vr7nH328D57Ovit
XQ3sNtDR0TFg/0TW0dFtxH4/i5PQeFZJhv7jxWVBaVRoMXVes/w+D3T//WcB
aE5zmtOc5jSn+f99vnfe6DBHMPF//p+Obntly2iybg/NaU5zmtOc5jSnOc1p
TnOa05zm/1f5f/X8nOY0pznNaU5zmtOc5jSnOc1p/v8N/6+ev9Kc5jSnOc1p
TvP/8/y/enxCc5rTnOY0pznNaU5zmtOc5jSn+f8J/l89P6c5zWlOc5rTnOY0
pznNaU5zmtOc5jSnOc1pTnOa05zmNKc5zWlOc5rTnOY0pznNaU5zmtOc5jSn
Oc1pTnOa05zmNKc5zf//7P/vv//XD81pTnOa05zmNKc5zWlOc5rTnOY0pznN
aU5zmtOc5jSnOc1pTnOa05zmNKc5zWlOc5rT/P/pr12Pnby6cRp6TUw2pZfN
gfz3UOU3Q/jfV77WqVos0TYFAcQzp62S5iBbdpy36xPuXk+NdfbMT8Guiuep
PAVzwBTg+q5wEPcU9rAdO09Pg5yLJGT3zgFPItfR0jHcr67YpgqdmwajZYuu
HYNzcMTaflRnHHfHom1CMXbT0Ha+mqd4bA52VSZ97kV83xGq2mbfaTAe8CVu
mZuD8XEOwqsJ3E29jblLYqYhNSRDnXF5DniHh3KfT+K+2Vmhb+7WNGxPZbn8
4e8cLPZ3aJdP4T7VmucoXDINXn6MBfb0VMgPuKx4Zhp3TWrwtQ3PpoFtT/pj
N1Yq/NExGJYh456hDZKPWqeBUuKoNreLCq42T1L5Z3Dn1OewOPJ+Go7UqPUz
8FLBccid8w7imvwtTmwfp0F81btYhJ8KTFlpSfOIZ+ed4jUZnIb8bIedX/ZR
YUNQjQ33LO7yEs/WfR7Drp8RyT9xgAqxbea6dogb2D4MfTk9DYIT4bwRQlTo
Tlp8fxdxXh6TguBv02Dx2/m0mTiWf2utYH0K7u8+H5PavDYNOmSxFj8ZKvxa
EDnehfhyzcYR5/VkWL2xT+q9LBVmhAd5mOdwn1s+q7F3Ixk6e1+p1stRQf3H
g759iLs33TJv2USG6GtmZ+7IU6F4enC7AuJ6Ces3bmMgQ6h/c4qeAhXeiFQe
1kZ8aKKm2QhL/+INVc8GS5/WscQojfjosZjlESx/1dk6i2zY/amHFATYETd8
E9whvoEMfPWjBGXMD1HkjnEiPtsRLGNBRwYHwV0JT49Q4Qijp/cC8vxJHIJz
vd+nwa3Mip5DggrWooRQG8QnRE06GijT8CK6WuCeMBUOx8xZfEbKv7HcNHly
Akt/QGl5VZAKfzc8SA9BfL36KydDrP47RL2K5rD6V/IoBLT+W9bV/tqJta8n
HTbbf/JQwfTvdHwu0n5WwkNN6tqngY7Y3J2wmwqTGoL22ohfUNq1+J00DUl9
4SfmOKlwUi7m3jzSvhfEdt5wqZ+GCLbViA42rHzfajK5Ib58qGnjtapp6Iv6
TkpiocLObWYc9IjfYe/ryrs3DXmFL8PEGaig2Pqq0x7pX2VZ07s+ZU/Duh/K
YERHBYNvL1/VIv0zsilYsCgFiy8jX8Opq3PQ/y2v9RTiX+adchkTpkEzrc3d
6ifW/xvfEb4j/T+LXqPAJQK7fqHsY8Wvc+Cbp1vshfiZ5JFBjqtY/z/YD+cW
5sD4ee2CCOJbI2xVgwKm4RGfdfgEdQ52nJlxnUfiz9Lsng2iWHzKYm76yoPF
p9uMY3veIB5zTHZEzweLv3xW/cWUOdgXn5tRgzh75LpPXO7TEN+rn/qJPAd1
rR9fuiOeXEqtzvSehtVyz2QNLP36r0kbyhDvNeRMJQVOQ+aCTn3qlzngeL9Q
Q4fkX0b0sQE9lr/fCaOSm7H8pZx6xonGz+1qDDk3sevnd/E0qmLXb2TwKXyI
+JvDJ4LTsPxRDAS8eGfm4KgUj6Yf4qPV1RcmHaZhfqKnwGtiDhw5HQY3IK58
aTR/83msfg54q90ZmgPhkhI3DyS+vw9osHqrPQ1hyrXKuu/noNWAUuOGvD+e
X5LeOqAwDTYaLHdl387BqR+Kr66P4l6XYd/aLzwNj6Otjgu/mYOuvZsGGkdw
d5YXaQ/nnoYJzq+eC8/n4Io5d9iPYSQ+i93Xo2fFrm/9dVG5cg5yva8r6iFe
QtKJGlmZgq+8F80mSuag74gZ3RHk/clMIXF7jk+Bk//kr0/ZWPsMlspnRN6P
z1yreIXeTEGS9KmM6Lg5OCBwUcAUeb9qOY+liORPwb6igaBe/zkIo+NyuD2A
e3yeZPJjwhTsMDT846M+B5/7Qjkc3+Ne05kqlDE0BXy5STyqWXOwTSDiVtNn
3D+6vxl+Vz0F1pdGosgRmAfIvqr4iDsbl/Fjde92iGiwFPnKkQ1iZYuUsl+f
/uO3VY+Jh3m9hcP6y1sjN6ZCgGEQyaVt4D/+aiRr9dNIO6i+jvOXSsyBk0ee
NHe5fv6P685c4Enq7YAHiVH2PUr5MCV01JPx5tB/vFLeZpfelw74u/hsa7ld
PuxT/vh+/D7uDxTv2+Vs7gSTCH3Xhrv5sM6Fc2X7e9xzSfWZk+7v4ENI9i23
hFz4dXLZ4xnL4H/8W31kSLdbOzzc/ET4+MZsyHAjv+z7jj+f8/2zJhuq2oC5
K2idhksmtF1g5rc8hPuSqbQB2642aFI9k8SikQ5twk45IcEf/+NqPkP0dtfe
QquHcwHT0VTQrOTh7xrCyyegwFj+HOdbKOU4nFD0NBlm20u8qHa4f4qqM3pZ
3gobue56rujeBHuOEWX55f7/eNielJGj0Ap5dLEnXF4nQcX3+Df1gbjbrSbx
dQ60AIPES/7nzxLg21/HvadYcD8R5jao7t8C5stHUvawxYN4o7CkZGHff/yF
NuHFFvUW+CZaLz6cGQtrPe2SBEfc0/atCLMcaYG/b81YJSVigXCwXmjuLO4r
OYIF7zRaYKPYwJLe3VjQFvojKuyE+20mATtOuxYQJHRv6A2Lgwfe+RbyCbjr
uXyKirzSAl2OciG84vFgy/88qqcEd8ZWZ4Hqsy2gG2QmVSAVBxUND+o/hOLe
qVkWKCPVAkU9G1f59sRC/PbWnm5j3BWB+PgMcwt4DhPTdrLFgOPdwDeporif
5jdhvzzXDO+2rHrtl4gGhboRt/4tuGfWrUvb8b4Z5BroB9IjoiBt0VXbbKH3
P+6xq03OvrEZcqMT9TdyRgHbuPcjzWHcv7698F7uYTPs5J3dkeERCYoXdnZt
JuFep8J4SDqjGdacsrwvD10DhfflLQfLEWc8M3cjoBmalEc5YliuwcPT/rcm
E3AXGBCoTDjXDEb7QHJaKgIsl2DLPmfcS6skAg0IzeAgfmOxzTYczAXW9546
hTtr5tKo+iEs/cKB81adYbDqR95hLYt7vnW2SR8T9vxvWNwodGHQ+1ZcwpQT
d5WnSpddRpugyYHHaOFDCLTZtG8TIX/A35/PIyg3Cprg7vRBn5JjwbB4LSa9
uxB3/6Tb7Bo+TbDfoj93sTEQ0h9VT4V44j7Px6TywaEJzP7mnLvCEAid3VUT
w7a4b5KdnnC0bwJhsv43l8kAmGH/8ohgjbsd0c0/3bMJytJ1fojlBoIgv3tA
mhvuMP56XbVbE3w00lpJ8gmEl1b5qZ7OuBf4pbqLWzTBy3LZY8dsAmDxx/1E
SVPc6eJ+B9zSaAKOkdI73Zz+8HpYfHckAXcsflXVyjbBcDh/9m4NP/jE/Tvc
UAz3zTuXTI9INEEP5YIY94wvDO2PXFY4iHv62oF6ZaEmuBhPdK7x84VQJnb9
eF7ch3i43jhxNsEN3ye3blzxgUovjdaDTLj3SRxbhfVNcOZl1Mk9Vt6gUn+z
XeL7ezz936YjDl9I8Fv1aarRCS+I9PlikTaMe5V+zl3LNhIEmGRsDrjkARt9
Rwain+NucVdwkS2FBO/y90iq5LrAzNcuW+UruDtZHg3cZEqCdncO7dl1DjBu
5LP3sxLuyS467+6Ik0ByY9GHHwk28Kpp2/5xVtxFGSd1rLeRILzujXAbzwUQ
EjOZH6Ti3xe57P5E8VgmQljbIfOpCDOQEJ2NutOFe9KO38TccSIk91wnyFoa
A0f99r599bj/8ONfKe0lwr7ZTK6QiDMweXxPM0M57mOPZHpY3xKhYqr68MJ3
PVBqcthil4/7UwZ+9dwXRLgafsv9qdtJ2BRX8G0gBXfbh3cK5auIcOP6spjR
SS2IPFrWnROL++r6gIKKMiJwDcZxhTlpAKfLTEl4OO5zjh4G2qVEeFdkce9c
4DFg55pVqQnGPeUjk/PFYiKMtXCkth5Rg/PXFlpvBuKedazb8WABEd5nxdXZ
Gx+FzNsyaks+uK+999twJpcIW4rEG/tPqsCrt8ojJA/c05uycr/cIoJFQkVm
5mlFcOtudN/hirtAA8GXPZMIlmck0y+2yoGixYjhz8u4+560aNTMIEJ92XP/
KU45eOVbnLgbcc+lfIncdCI0JvaKKobLQgf7Tx5bR9wtu0QLHqcRwTNh4fP4
4yMwuKh9xeoS7vzTV1KmU4mwJ9+O8cNfGVg3Fht6zQF3p27q+CnMJf1L8u38
ZEA/zlls6CLuS4KgEpxChKLd+pMOr6SBoaqA+7c97gkb5qdEMb+h+9QsJ0Aa
1v2qLSxEPPO2m+ZqMhEmv8YCna40XPzqGOmM+B6WvAEXzHePhKmrdkvB4HG9
wvd2uEuPiz5fwpzxwMEpX01pSNi3Sd4WSS/N9e6dCpb/l75HIxUcZcBiHdOD
NiT/d+p/yVCw8plf/CmSO3EECvZmCOch5RPARdzwByv/aV728yE1csDHLvtr
BCl/nYe+x0aziDB3T+KVkrUCCLzeILHgjLuIxtLlz9lEWNYaMjzIrwRNEWTj
XW641226+csWaz/ip6ezHpqrwNTRc64fkfaT6BLx0yKfCIOqNzy1VgHMLaoX
OJH2Z+vD+aO5CGsfhb0vRa6qgjfDaGKHP+4hvb+PydwjgsoGmbd9dMfAhPFM
RPQV3OlPvX2X/oAIkWtldTuvqoNmpj+9QijuSg/cNEQfEcE8JjbfmEMTTrxQ
G+O7hnt8gzPryhMixKT6HL/WcBwOv5IdV43B/czZlC2PnhIhbUir27DnBCw9
m1+yScBd+aP8z9g6rP3n2OwVj9SBjW+tXNNu4t49rPPhUQMRalMsKaozJ+FO
xErrhjTcyxa5dl5+RYSdgj85+B6cAt5YsROT6Uj9l1SPncbSbxweiIt9cRK8
QuIJWam4b2/LiB+pJ8KISKvkoz0nweFJlv4WJP50fGPXLsCufz7t5cGxxlOw
fS7Kb18GEr9Sz/scIxHh5qkS+qJ3p+Fjuc2Twzm476IuBphj8e/k7HP7Hnp9
aBTmvfoUiX+VyqyLtzqIcMF0zct+WR8OF512NS3GvYWP+fahbiIcjJyodIg0
AOUdF3bvLcX9PEc397UuIpwSmikTtjaAZqbRv073cLf/dSBzVycRfEd+jH1m
M4DHRYmCI8j1+w+LHJB7RwSX8tqat8X6sLiystpThPv6erfmiWYi9O0zfVIS
qAdRRpWvGPNw17Rez/PwNdY/bESV1yvqAmcxaeRYJu4b9mexhWPu9arjReBB
Xeg77bubE3H9gm3DFxuJEP5o8/TOP7qwUJQ9e+AW7htN/H13YuXr8CDfS632
NAzxHW9fzcY9z+BAlHELEe79ZaitSdGDE/UN6RFI/vYfV8wUayPCQ7GTtTxH
9CHENlY1pwAp31bxKVvs+aWjK4VHHuvDn0GBtk13cbeOWHjLh5Uvs7fpQL+O
Aez8wfBkrQR3FoOF8qIerH0UzzHs/2gA5yV1Jurv454Re13t6QcirAgY+zGc
PgNdgdwxfx8i7bvk5dzpz0T49iGX/sNrQ7ihs5EqUoW73HB0PcM0EQodxBtP
85nArICfcP9L3N0E7JhNsPTKRlwt9o2GMPfGo0wGSb97rcdtFiv/jLLaRgYj
XbiZ7F4UiZT/i5/5VqITRPio11vpEGwMUffH19cj73cpFavhq+tJUF5RnRkt
YgG7eUYOvxzC/QrlTfR4OAlyi3VKFnqdoNXVKvD2ZXz8MXc3ZWfQxARcGo+u
qomlQLKntcmp1/j8Wejgx2v3esfB3pH999eVWcidmigQr8Td4pVs95P4CXig
HLpw+xwFcsu+lFXVI+vTr3d0ivyYAO39XW9fpFBAJDSl5PgbZH5/UIs5hDwB
rD0vFIbjKUAeeMAbjty/P09clPBuAq5nlXc3B1MgVtHTW+AVsv6zY+xx87MJ
EGw0737nSYHDRwK92F7i3rnYdXOlfAK21CUnxrlQwPer4Y6EBmT9v7LU+37+
BBQ5TPI6XKRAl3nx+KcXuKcuzgtsyJgAvhcnDR9ZUWBBJvPgKcQ3TlaL7k+b
gBX7W+fKL1CAGkLZJYP4GXMj2QfpE3BUf+BRKJbe3NjqlhbipryFPwyw6xed
dBT6hLmmULWhPuI/L31mys2ZAHejgZoKWwoM8UZoZiAuHROg+qNgAurOZ+3b
7UCBZSFzoCLO+alwX+O9CZjyzWqTvUyBdZ9Fvigiz6/nEWXRXjYB8nYuwbPO
FOD78fBCMOLWVwcs8ion4PYXZfct7hTQtQm0akO888T84fInE2Ci5rs5xo0C
tx+Lv2lAnOuB/Ad2LH2t5tvQF5hHci+sNCJeWNzcZfEce751Du95vSigEvpI
lQupP+nhVw2nayfg9FGOO3mYh/R3zxxA/KizYfolrH4/h3ScJmD16yq2Fh+J
XN+sztSPDyu/pwnuGi5Y+THzT2feQMpHa+et5YcJE5D45kJwmTkFfurlH+pE
2u9f0GVMip4AhW4uU/uzWPlSdFWCERcb7VSKvjoBk90/NyUYUoAj+J7OJsSn
KroUHG0nIPdhePg6TQooWIvyZtXiTv5M/SVpMAG8Rqe2KSlTQObild13n+P+
wMuX5aPaBCxnaN37K02BG8wK2f3PcG+wZjl4UXkCfnPmzMVIUP7ND1TCEP/M
6vdoSX4CfO5P25aLUaDX4+LPM4jzRYTEV0pOgLKDT06bMAWUf/D+XHqKrC8a
sZ84LTABMVfWO3AIUMAts+ewFOL7WVwu79g6AZXknC2PdlIg0bhqYkcN7rJT
3hEfl8Zh9eZ1hu2bKfDIiyBzrwpZvysef7XUPw4K1EMroquzUNs7pKqLxBf2
rw9s+V+MQ4ZEVmrr3CxYxQ1yTlfgHh1JdGjOHAcbbCCiPTALbccNtOke4x7s
Navo4DcOXl1JktZNs3Aw5oCOajnuL1ZYOFRMx8GWXnicr3oWSDHlPjcf4q50
vXKjp8I4eLf5098qmgX1XcC9fP9/65+XN3ON/+ufcnIps//653r1UtzX7bS9
JUs3DkqJsQ2TkbNgaEK4/qME92PX1W4aTY5B7UL4V3+/WTCZPZuUWIx7dW58
l2D7GOys6QoJuTwLX2aNHuncRdbvlwXvVtePQfyOI7vkbWbhmLw9NagId0kK
8dHy4zEo2ZOsMWs+CxISh5OGC3FfE0lTa8odA5kCvutCZ2aB82fs+rkC3Pu2
Nzu5JY7926e0ttWeBWMxQzE2xNtqCE5P/MYg+/O8niRhFqK3mdwduYP7o30F
ntssxmCFXdjPQnwWTo7vjHDJQ+L3oU0WujAGMRrMSvZ8s3BWYvHH8G3cXS5a
KuznHAMps+NGeptnYV3kZPHTbCR+TfGxXJkZhXd/7+ueW5yB2dmEXOssZH3Z
Zv/9sdejUJm4Q7no8wxs0VrNschArj8kfygndxQGKYUvnrbMwNPEz4rX0nDf
ReEuueAzCh/KvdYynszA92cfv5mn4F6QXESyOzoKrCFPKflpM7A1UnF97A3c
80OonYybR2Gz/ouRL34zIHbTJ6YwASm/IIaG6Pcj8L2Om6nRfAYME2UcJuNw
Dzhy1N+7ZARkja3P82rMQFnowz3pMbifNk+QMzk7AnvAMOv+7hk4Q+254nkN
if915MvlvCMQ5bTXQnqVDO5J26hWYcj+GOGs+x6mESh+VzBWsUAG+VO5xHOh
SP6FOo+rDQ9Dw4K2wbdRMuxlKa6mXMVdTfXQR/2UYSCWUakD7WRgnlQf/34F
ST8zZxusPwxSystP5mrJQK6XtJUNQt7vXfJeN6SH4X5bStrkEzJ4fD701zkQ
Sa9RzbFl2zCwFxo8sCglQ+bh8O0hAbh/2zV5Vm9mCARjkxR/5ZIhUr73VZA/
7hv8mBrftwxBP1uUSHQ6GVTDT83f88NduLkjkqd4CA5Z/Nopn0AGIo+rzytf
JD69rZbWSRiC1A9eVxKjsOuTOIAb8cHz3fJLOUNwRzLZ4XUcGZ7tHmCNQPzD
O4nUyawhYNV6vbYQS4afe0wLXRHvHSpu1RkYAnrbcrmyW2RYYioPZkPyn2A4
fNZRaRjCL+0Kpqsmg2FSblw+Uj5rx35dv/J8GOS4jDR39pOhqngi+Hswsj+e
s3Ui7sMwUBQNz5wdJkPX/scPSpH6u3zcXfeu1Aicmb3pPrNpBrhaY3Sdw5H3
7+mySwOXR8D9RuDzzP0zsK2cYnk5EmlfI7X1b9NGoJrjgFWh0gzE0hVfL43G
fYw+aGv5sxEw7meWMNedgT1ZFe1XYnH3no6JIraPgP33rXICZ2cgqUChNxZp
/08fvBZ04xyFhR9xA3whM7BcQWU2TUTGX9cz9zubj8KDkZo7D4pmgPR6m926
ZGT/2efHNrukUQgr7bqc8GoGHG5Q7Z+l4h774Mj78opRcJF4b/WtZwbixT/e
j0hH9j/Nh+Xcbo+C9/osrZ1YfGijng/yRuKD+0Qo4/SVURCduxSVXzMDWfvT
6l4h8WElYk5EA3OLncGPdDCXOdWv/gzxTpHNdDVOo1Dx6eKHS2Uz/973cZ+Q
/B+fupF42WIUoj/d4T9ydwb6dnlVbkX8HCWuUEFxFBi6iYJnkrHy035sIofE
H4aOCM3jayNAd4Y+4ZDnDBweuR24HYk/+7tlt9r0jgBzS0vEa4sZMPtwU34N
Kf8LDO+eaXaNgMfPwuSN52aAMKNOeoa4VXQ2wTBmBEZ7suscZWaAvahecjkK
GX+Ittyx+D0EOfXSWZxFZChZUzX+jbRvdcePRc2WIzBzS+b6Xl6s/EO9m1uQ
+GUyJx53j20EjrIvP5T9RoYP5A9hT5D49PdtFVnsRS9IF7+13uA6BVJ82/Ja
1HB3FRF6EKY0+W/ekOjwjALtG98MfiTh/oWa5uVbOQnXF62qT/2iQGiVY5dY
O/L8a1v8GW5OggSHRnPPNAUCitdnWb393/Zvh16KTf7bv7VPqqD827/dIIFc
n3fIc+/GrxOgltx4M/wmBegaLb6zIvMfPV7OLE2uSbAUuhC4pZgCUsa3LLYR
cT9459uRc3KTIPQ1cU20hgJq9EuKBcj1LaI/zCeYTMKLVzunvJopwKgsEWbQ
jIw/zWMpjJcmgblti8aHLsq/eeIN5RbcQ/I+V+/rw+ZvPESFhHAKNGQPJGQh
8ysuz758do0JaH9rVSNxBJv/lEieW0bGj/5P6EWDl4hAyn58qKXoLLB5fJk3
aMfnn/uub4kq6iRC5a5IthkJA6y/S6b6I/Nzxbb0+H1EIqxWxiaYnj4Nv93I
BxeR9QU97g8KXM+JcLelV93fQxtKb58UpSYi6w8EyLxQRQTfgsTNCxZa8Hvi
pUELsv4scfUaj8MjIizd+cWiLqoJm+RalyyR9bHNg0XJX0uIcL7m4W6TCTWg
H2zlVEPW3yy4HYfV7hDhlJTH+Y51AJ8GV56NeeE+sqx+IDiLCNt9lq3HtyiA
hHaZZgSyvsjlGz7tkkoE263yVldSZSBxqpNvPbJ+Gzcq3GJygwipU3kqL35J
gI1QEXeCDbK+uet599frRDC8q7K+YfUwDNac3j9oiayfsE5kfYkjQrezGEXE
SQhEu1I2l1rgrio86ewSS4TyZsN3O5oOgMU93SYGc9wZ3/rJG8YQ4ZI632zl
BwH4xuUZ/d4M97QOKWPZaCJE9Gd2DwzyQ3ihxomcs7h3bmEeUYkiQmd11pGv
B/eC+K79zQmmuJuXiVV8vEYEg64/K9TL3PBbI3EnswmyPut70ZsBc4U3b7qN
w3eBoY0Cj6Ax7kGL38UjI4hw76jv2/u1nHCWpdMy0wh3jved6/dh/k2d/1ii
2Q4IvBZ8WgRx03K1mqJwImSEuia6FHLAQNXv34WGuBvYf11hw7xd4KpW6S02
0O84tn8j4lsLC4IDwojwd/mwjiMTK/RmxstbnsE9eTyYtBJKhOcRxyx/XmWC
SsmV7T0GuL9qIbQlYv7sYXTOQAojzLu8fWKJuO5Ce6si5j4s6iPJKvRQnVd7
cAPiX45WTf8NwfrHj45Q19sbgcQny/RGH3dqj0JDDeaKjIpqdXfWw3TUZKAX
4n2vRZocMbdW43zCG04H3Dovy/eifqTCUBDztdaUpEOqfwgxL58K9+rhvsDZ
rzZ9Fbu+YNyt6aYVQqCgZ8gNxH1Pj43fx1yM74R7W9gyIdqeY1APcXc+59VA
zF9Zht3QG/5KGHseV7kH8YxR7jYzzIUFDzA5MS0RUqPikn+exr2ZUuWginlJ
/mth76IFwlftmPnPiJ+9rJwvgnnWz7P32dbNEy4dl9cnId5z2WT3HsyNGtXL
ZsSohMX3o/qViL/RFE9kwlzt8fMKO3MK4dyBNd18xAcDVq3+BBPho0ePwJ22
GQLD1q7hm4gnNu2KXsWce3v7V+eMGUJhzvinJMS9W+PgJ+YOUWW7+5RmCJt1
G7WuI75lG0PnMuZbxV5bneOYIbDkFD6NQ7w9ZSR9CfNPs0KbLmSTCSlcpXuj
EK9Z5Lv7HXM/t1dvYpfIhNnbp71iEX+sLxW3gvkJKXorywszhNsifY8TEM+L
C7q9iHn3eemL0yFkwvCvA2yRiLvkn6RMYR5/uCde5Mw0wTdiyTEA8V2ZNxsn
Mc/pZb9aJTVNaKpnF/ZH/OGIqtEs5uvpk73cn0wTTne57QtGfEK8PfcH5l7e
bG4E4RmCSP5AVjziH0vrnHZg9SOk+Fk+w2OOMLr9FvNDxI0+LeoqYB60ffOM
ivQC4V54K897xAVWxA44Yn6OR9u+e3yJwH5N6sRmpP1pXPSOLsC89mDlpR/M
ywTr2P43xxFnvnmXYRDzAw0yTHflVgiNxuPmkYgLxikd3of1n/gT+5cD6P8Q
jHNq87sQZ8rJ5fbBXPrIZs21bjrIlbu2SRTpf2tMjb8nMA+vCnxzf2QDdG+c
qytCXPQg//vo0P9x/RobRsiMtOMxReKDMF21YBQWnzauk9pfaMsK5e7sdM5I
fErjL+uYwOLbyCUp6d6w7bDa5lA2g8Q3PeL1l5ZY/A7I/cZaYrMXhFhYSp8g
8bsz+/u1f++PiwXv5I5i74+td0NH0fdHyHf5a2V3iSBZR/2gP6EKzRcyA1sC
cG+YH56r1ByFxnfbAzZlzcCTo7WhQ8j49F3hqSOWUWPwvCHAfJvmLFRc2ytQ
lI+79uJiZn4QNj/1XSTcEp0Bte5i8ZPI+DL7x1/9L+GDUPq1RJ77KBlilU8k
Cbgh8zdv12urZoPw1lael+8IGV679JuxueLOr+S6wWPXIOxzffZcQ4AMv4RX
Ws84I+MrqYTRrVtHQHjkdvHxJTIExz9TCUfGn4EFxmTrXyOQu/7Cb3b3Gbhz
wvrcyHXcnTrTXY4Wj0KJ6ZHmrvYZsH558xoFmT/49YgejpEd+7d/VPh49yxc
ZtMPc0TWP7IdRR+U1I5B6y6+KR7rWTDlY71khazvMBKN83r2joMV9+J+u4xZ
2JVeavwAWX86L8K8biV4HNYWz3+fbp2FuxeuK2Qi619PveVyK6bHoY7/euvO
DRT4o5v8lgNZn3Mi289nak7AFYHnxetlKfC2v7NnC7I+mfQ8RzQlbwKaPjR/
0bKnAPXi47EGZH3VYJvy2pWuCThZ7M0dFUKByfmhFV1kfHlhj/kvs6EJkGrb
/NE5igJ1FKejq4j78x232d06AbsltBSTgigw5tuzYQ5Z/10KkHh2vHgCfGvP
m41eosBWqZZ8LmT9d6lCkMRzcwIYJ9ijIs9TwDjng8Qasj5beIT+VNbDCUhj
Sm3QcKYAa7a0nguSvmr448CRdxOQ4CFxrjGYAg+Sljah+w/iw79C+uYmQEQs
IVY6kQI+rhrq9cj+hfEhla+MmyYhv1fGVSybAsV+5lrrGnHfsmNPQsKOSWja
KvyYqYgCrbu/Jwwhzrn6dqveHiz9h5bM+yUUGBFb3ayAzA+y8wUuHTw0CedU
ewwSyymQF8u9aRJxA5bVHGmpSZB9ZLTesZICKwPNkueR+cN4sbu4tMYkhLDJ
2N96QYF3JSv55k247/AoesF/dhJOXTy44VQLBdLll1IuIvML6+yGlj/Y/OKY
0cki024KqOZJW51A5hd1anzx9O6TwFtMbubtpcBx94S0YsTj9Pti/UMngelJ
59alIQr4n5sZD29F1g9dD67LvzMJJ1iPUaQWKMCmfzJFqg13S/VPqrFjk9BT
N/5+E8ccbPN/O5zegXtGBNO9c1unQNYnRjhaeA6MBgWejXUh5TdoZrzCNQXr
rYoz3kjMwXsmgk5wN+6OX/86rts9Bf4PI740YS5yyLcG9RtXklI1tkyBPVss
1VhoDrj7hf/eR67vRhbVlWebgrwjQGATmYMPqudZNiPpD73T7+M9PAV1N/wL
lxXm4BC/6bxND+5mx402dGlNAelOsMnkiTlYOmB4dxE5H3si13j0pOUURA2f
8v1uhDmsEHl7cR9V//aJznkKOObpEk9bzIGyJEWnF3F61p6t7CFT4LfVziH2
4hyQrynd+9CHe1qnhVrkrSmg3+pwSMNnDl5/3HVWAzm/61J/N12ldgqISi/P
nIiag7gj5rxfkPO3klVFYnn9U9CZccKQJX0OrvWE3fdFzu/OVg1oiTFOQ3+1
0NekR3MgPtp54xty/vhzTlUc4cw0ZFVt7+ztn4OS67Njo8j56Z8lDbeZyqYh
/kWYTMJmKpyqd1m5g5y/j+lkNHZYmoacvv4iJTEqFOW6xR5Bvl/oftMZ0LSb
DMqD/vkTx6igo9iqZEDFXflyTX2UAhnoWodVbA2p0FzNvP3LF9zzLls+sj1N
Bu0rZ3fzXaDCo0TdcfYF3CVErhLgPBmChItVdjpQ/92newBx7/Lk2BlHMnxo
M2sdc6GClryoR/gisv7/XpXwyJcMN8l2KfXeVNA+ejJBbAl3qQdjOcdCyZDw
ZKZ5JIAKr24cbS9DfNcNIS9iFBk6IgRjzgdTQZJ66+umr7i3/p1I5I//7+89
06oQ6r99CJOjiDMyBIavJmD3D3z+SzmMCp4696PsES/NrNpOn0yGsJvrmRwi
qP++xyjORjztbMRSfhoZzIK2HDWNpAJTF/+WdsSlZs0ud2SSQad18CBzNBVG
hfzjfiC+fpuvt3c2GR7rps77xlBBdP+FjdzfcF/2j+9WzCEDIVCsZxTzluRC
kwOI7xc2/PER87OnH76Qi6VCaLLzU1HER4NmTWtuk6FwZ9XqQ8wjsn+AAuK8
Tazf3XLJ/+JyElsc9d9+3nc1xFkXWVfXMK/zL31jgflzjjkbbcQVjrlH1eaR
QbEpZO415o4v96oaIr7Huk6W/g52/zMma7OYV4tYHjJF/PdIkOIRzI+u1Mpt
jKdC7g3GXDPEC2PHjJ5g3pZlOnIcc231n3JWiHPend8EmF/WpPffjHlRpOy+
c4jvSIyb5cLyt9QuK+eE3T/Wu7RNB/FPQy6XsrHycXkjFJ2LlU+lokKfHOK7
yB+jiFj9NDw1nMzHyn9zYaMMH+KW50NYdt4ig7VIz3wtVr8785zLGdH6yQld
Z4jV/830I4stUVRYu5rNuYjUv7KMSBpHOhnefh0pS8HazzuDii/diFuzi210
TcHSp3x7dOgaFe7l+8WUI34y+lmK7Q0ySPpvYI4Ox9pX+q+OSMTl1tQPmGHt
u9OC/eJUKBW4rgdxnkd85ZqJgXEc+d86n64W1j/CDGOrjiDuPyPofiCaDMce
rDHexPqXHPfhlS2It+z1vdEYQQb2T4MbXgdRgay98fkg0j/rAkMSkkPIwLzP
4EwY1n+Hxk+mFyFeKW/zc/8VMsjrtCyV+lFhn/HVPF/EBY0+qZgGkEHmhMgl
YV8qvM115TdAXObau9V3fmTQ2kG8bOKD9W+mlAQVND6o1EiUYemXj++KNMXS
a5yMyTNG/Pc61j3fAslgei/PmgG7fxsl+uFFxFvvaBhnYdcPqf4gooRdv47+
Srsi4gYiNd8CvMiQUtuxuNGLCjEHJtM2IO6Qmmmw4EqGQcHPh1PdqbC/d+wN
CYl/io+j7AWdsP7hGdwa70r9t965KQXxvkHlA0OXyPDl/JczZ7D4ad664uWN
+EumcwXOWHxlHnfRy8Pc1OfVchDiT0kXx8ovY/m/GChzCrv+n4HE7uuIf5mZ
XTNxJsPukvgGCTcqaGbkry9E/PVqqcg2D6x/1nN9f+pBBed1d+TGEd88Yt+V
gsXvk4Opg2VY/HYmrvGKIs8/lXjJohrzdlOZwZeYu6xojaDxXetXZcAGHzLM
muvH9mHlR799lm8X4kMJbh+vYuUrPOZ1kwFz5r1B/Wj55lezPEl3J8PIewYD
Pyx/A194Zz8j+esXc85gxsr/ceHnP7ux8jc3Wh54jrh2SJYiG/b8Qu97mrZg
z2/97bNuHuJTSj+5crHy/cYt+PE5Vr5hprLXryLu7PEzwsyBDGITbObhzlSw
6Y0TtUL8RvVin789GQzjv/qGOlGhQnuGQQvxrY4NRokXyLD3kQfZ8BIVWEWO
t/1E3p+DqnMP/hiT4ePkuVwpW6x+Ko4X+iHudDSCfBVL33ov585JLP1S2v0/
PxB/UnFF6ABW/r96NL97YOVP9I4/fhApv4wXfW4aZ7H2cayk+7IdFZRMUsTS
kfQiQVeu3FEh/2tnnunGVJj4Ift3/zzuL/Ku2X6LnYbnojfini/PgV7jvvVt
yPdrpwpadqSvb4IgsTInsp03xCqdz09Ezq9bcBneqpwmwcNnWpr9s55gckgl
Ubsf97EkFr2mbU2Qu/v9ue+iPhC9vWD3+k3I+fhrfHVTWHo5wQDWW1RPCPoW
uS8UST+Y1sz2/hcJmGZST/v99ILHTRNGe6i4/5oLEeD9SwIDA87CJRlvWFXN
6W5axH2tO1/s0k8SMDeaHLXu9QLlnaTYgFncV29eD2SbI0HjhAnxnJAXuB3P
uLZlEPdtqZp+v0dIEPXx0xbueE9YYl3tXOnEXfeYIU9yH+YRKXscGDzBXeBa
1XMS7h86bgVotJCgxFMjpk7FAwJHxuWFanC/YF66/LiOBBaOhx46xrvDLIPR
dt97uG8nnOtLfEyCl+xr3O7zbpCcsMRlmoN7nGxTjlURCUKKr158cswNCiyV
lHck4e4papbmn4E9v0fdsCe3K8xWvtjOGIa71U6NG+bXSdA0Rs3dNuYM8sN+
JV+8cS9JOuxeEkIC5yZ/ww+BTvBDjX/DbgfcQ5h54jJ8sfw1XmLXDroMgtPq
J5XP477St/Q50J0EI/yB5+Y7HGGfW0p7ignum8eUPUIcSWD1yKeYickRDPJy
O36dxr23bPOO0gskqAeFDwXfHbDx+T56DQ3cq09G2qw/S4JN9H/ZSDwO8PRJ
ud+8Mu4mZprCGcYkeMB5pfTBwEXICo6x11XEXU5WyanDkAQf+OinzYsvQhkr
t4CFPO55Umv+8/okOHNutlPH+CKkbdGeUjqC+x5V4VTZkyTo5qr/+6XSHgQ9
VJnWiePucldt7p0mCdyGK2cj9thDSA73Hd5DuEtfF7SyPEqCtLFvUZsv2gHL
jXDKnn24z5fzJv6SIcGrHKOk+gO2IPwg5UzVDtxZRkRLHA6R4OIzJ8OAYWuQ
Nv50d89m3IljcsUMPCQIM7v41z7MCuQMg0LyV5H9g4K9QizsJFgbbjredfIC
JP89UVo2j/tnu4bxBEYSCLuEuiuFnQexB56tppO4n+6ojfZbR4Lttw/XRyyZ
w6vk8353BpH9Jfd1/Ty/ifB26CFDfOM5oGv5JtLeh7tx3538sh9E+E3w5fFq
NYM8RU7VlW7ch2WumLp+IwLHwrZaPQ4zYF/9JuvWgay/Jr/0118iwseBOwIL
t85ChK6bxj5kf8/oR7Pe4iIR/kaVDr2MPAtnqOEpz9qQ8/V5euWxmGfp3rm3
3+0spA7s7T+B+Jz0RTpvzHf6yb+xuHwW1o28VJZC3PFuYOENzJPycrY9dD8L
u6X1L+sjrh59OIkRy98PA56/w3FnwdR3YrwbcduzEp8TME8iG+71uXcWYmw2
7bZD8v/NReRo6VcijHzrmZiYPgvTxlr5me+Q/b/oD3GHvhNhiHFKwFjZDGq/
K84rduJeADJeOctEqN6vz6+RYAbnthzt7UC+z/n1xbh5108ivIx2uts7agYh
y8ldTj3I+rt8SDnhFxE+qX7S+m12DvYLLYe++YD7pnvbu/f9IcJ3L9snW9bO
gbGWqu5MP7K/cnOK0x5rH3+3+Vzx+mIOekl5NteR9lHzZUrjBD0JAtx8ZbnW
nwcBPZ7k4TFk/2RnTYMoM9b/5u+1OelagtOWbyMnZnB/K6Lmewhrv2TNPzfn
T1+A9TvOB7Uj7dfNT1XPdCcJMu4VZu4cuwCHV3WZPb4j5a+sXavDTQJR5rnG
EH0ryGk4K9WwgvuqD7vcRT4SBNseenmGaAWkPzt/yK3h7nyT789pARLsJ/G/
SpK2htkD9pH+6/H+F2yykctdiAQnf+ubH2m0houiR/hZGZH4qZ1a2ShKgh7F
C38umdkAQ0Zm9ScW3I041MXNJUnQ612SUNFgA79lZRob2ZD4lvHC8rA0Cc4K
svA9XbKBIPFg5noO3JWuV7ZGYF7Zfv3Ojd820G+nZc+7HXdnt32dT7HrP9HV
yZpqsYGKF13Zh9hx5/GrIj0TxuJ/wP2u7I02IHf/y8O4Lbi//nnJowZ7/jS5
LollgjXM7bA/NIs8vz+5NqZhDwlYzWMdvAOw8l3e/+cMEn9KNdQZ1m/H6v/Q
Ya8/4Reg6ve2lY5FZP/Tysl4YTMJDju7G3F1nodN8ZEZA1NI/7rkCpp/iTDx
WbCy0MccpnmzTqp8wv1Z4w0/Taz9750dd+EONIM+Tk4Bd6T9ZwmpMdTMYf3L
lbWIYmkKUuVKSYxNuE9mrTeJGyfCC0vO91VmxhC5iSGDGTnffiy5MarjIxH6
f59pP+BiCFKmLc6xT5D4Wjv/daCHCM8KWZ8XTxqA9Ijh22XkfP+eLhXmkx1E
MGE6ntw2oQ8hOj891yHfV1SIuVy0aCP+G58GOYM+COiQZDuR7w+cttha/2om
AlxNWnUM0YNCXjXNvcj3C7Mqqc2yb4jgs/Ht71IfXci0Z38zgJzfZ0lgzxau
J8ITVcF1kW06UCtKVVZPxv2A2dLGiBoilO+5rCdw+gS8Dz15muc67kSzIIXm
CiIQ92xsl1E4DosnF9YtRyHpK1iFpMuJkOl2O2RfkQZ8ajJLYY1A9seP80pP
3CeCXFdO5DdxdZh5nhHoHYK7uEHJHPc9Ityic5DkXVaD+AjhjS7I+Yc34t/Z
zYqJcEP0bRRZXA3+6N5SjUC+v2sKNfkVcZcI3FsXVjZ0q8KnUTnVbGT/h17C
7pkFlr7qh65qhKQamH1fVIxG0jsrUS06SzHPoQu6XH0MBBWbRE9cRfZPp3jd
XLDn28bdpabaoAEVfW959ZDn2yzHtZKBlc8mk/er1vuPw40+m6TXSPnk9JnG
Fz8hwgGK2++sW8fBWufT/plo5PyIb55ZBuYM/fl7Z1KOw81u5qx+xDVZ7jbf
w9z2nbRgevZx6HP9kkxB/FdG4o8yzPU3Z7YP3z4Oa7ZJ8ouIp3Va+N/F3D4s
socfuz9pLWBlGvGOaze8rjwmQhGlh9u3WBMe8VVMXI/EfYiH61PcQyLUz79L
yp1Vh0qva8/UwnAPK9VX3vqACG2lXEwBauoQtTsUCpD6FW49cHiyDCtfH9ka
YpgGjLDLPHiOfH/ZsoFNYQC7/2u2E5JTHZqQ/NamfRG5Pz9wy5Zi6YmLUjFv
HTSAQehAUACSvuKZ4y/V0Cbg9vrpMWQZBJJWhua+V/H5h3b6WmqUeTMUL6y+
fqUQAYxpBXSSLvj31eq/qOPHdzXDfvWVjzmmYRBu8E1tXAD3vynC7p9kmyFU
3SVURCIczOzZVEU1cHc83cIW7dkMdieZLsx+igDj4+8mlaJwZ6+t5qvLaQYr
v09v3DZFQqb2X2+xKtwn1Wtbzzo1/zuXNqF9LwI2ellGO17FnSN0Vq5aqxn4
2TZfZyoLh1fr+2NyTJHvww/W+y4JNcNde1bzPe/CQEKCco4R+b78sYFq+6Mf
TVBTcoH02SMURuwfr12kw90slD/5pFozHLz8Xqc3JBwiOG4czdfHfXDm3dtw
thaoW6p0LT0SA5e1lx4pSePf758I3RR0dQF7P+j71HXaewH10kH+wVH8/ZAZ
nlf8Rr8JfB430iu99ge6jfFWr3Xw+ol9NJq6eKQJwne/qP+p4AejzLe9/URx
/+E9ojX8ngTz3gbpp0Y9gFfBI6TlDX59mWvvXOnaSJC39iRBydYDVl5kSPAj
308LXu+y1iKSIMHMKvbqJg/4pG8e21mB+8c90yT6ZyRQVVqMfGTqDsyPWG/6
FeE+k7Pl5Iv7JJh149p/MccNngQnO6xPx/2R0qDqfA4J3kyJMl6qcoXwkccN
K1G47zPafuZIKglGP51eNGpwgX2GMXn+wbiTXhUZGURi85+rY7xx3M6gepw7
Rt0F9ysWkbfavUkwrfrBs+7EZfiu7V+kZY67+6bta1zOJPCAtIhzho7wgihw
scMA94Rylcd0DqR/8xie5MZLsImn/qTaKdyP+27jumxHggNqAo8qAi/BvF/B
eg9t3Mt6tEz0sfmZ2W2Gi4MUB1iIozhMqOPOxZNk33SOBJzXt90ZvuwAG+aS
rb8C8n35eRH5Tl0SCJmKOqqu2cO9hrXaD5K4N4O00IQ6Cawr+2u8p+xgoYlq
wHgQ911Mx3w8sPkT38O9hQKX7GBJaFOFJDJ/IlQmNlEJJNjc2rznDMEOXv8q
j4rdi/t4vJVtnAoJVoSaH5zYaQfB94lPGPlw/y7CSClTJsEuv+Qgur+28FuZ
8/4uXtxHq6ut5YEEX5+eX4zVtIPWCfVXn5Dr7zO+6nNFjQRxfnf6GvLtwK4s
aNfl/cj8/4alRQLm9tYbfbIL7cAnXunqFcQZjT/EsWHzR7vZzXdLGOxhvcRt
Tz0hpH33rm0/aECC13VO/ZfNL4L4dXE3P2R+KsN+p6/NggS7k89uGy50gPiY
nFpBNdxTszkoXVj9ZpSHCtBHXYKg98NfR5H6dRMK0sp2wfrHmReZ5GBHkI/6
tOxpiDz/BVcDNX8ScM++KpO4fxm0ztQPMF1A5v+XK0buhpBAqt1L7l6gE0RW
7D29C1k/GJq6ftUvmgSG5zS0D5g6Q6GSUNgtN6R/3jvpa5SMjW9PBRkExLrA
tVvmUq5BuAsb5aubZmP5vxCmnhLtCl+EthYTIpHnywmO77pHgmhmvfRjYW7Q
IDa+OJOC+13LfbIaT0kga8xgxKDrDl4Hd30oKsS9PmnrfMorEnQouw7odbnD
N2MLxpYyJH9e6U93tGDjc0u7w9xKWHzhlFX8Vo17VMlrcXIPCUrp79963OMB
Dp16gXWvcS9gICR8HcDah7bM2KyQJzD6HuTXb8H9kqKSJP8wCWQKY7up7p4Q
7J1q+e0d7ltEKS+Gx7D+uSNo87O7nrCil/+DoQf3H203zd+Pk0Bbw2aTVKUn
jO2narG/x71JuAgezWDPl5Hc1U7vBTuXvyl7fsT9Z9xA1t0JEnh251mQGjxB
wU5M7AeSXqN2C7VuEIsfFaHZuuc9wfL476tu7cj6FUOnwC7s/lDec/j9PU8I
MzKy0EDyd+381aEq7Pr9E8OpOS89YUNAaBvDB8SrJMMOYPmTrlwoOPTXE5rs
giQ+DyDxjSzK271EAv+nfj1JUV7Qze8WYTuB/H0LN37umTUSWDytn6KX8gbN
oKYdCcj6oDZTOr/d9ibg0dlK//WCDzw9wM66xIi/X3y/NRiqHWyCfM/mpjlH
X3gueeVxIA/uQe8to77INcFySVk+nbEfOM+wJeSL485a5az8RasJrDRfLzzU
8Iei10+N9qvhXi2e9+S+cRMkkldIDgwB0MYa9JlLH/f3x2RubnVpgtJtiTIH
9APhsNvSUKIj7t/ruMcfRjZBclyv/ekHQWDESbQ/fw13iX6WH1tLm2DobO21
/bnBoNsnTTd+H7n/C628vvYmCEhoZu3TCYHxBF/L/m7cbQJF8y4pNkMtw3Ue
lRPY+KJ1VJz5BP7+VxPkWoHwJqhXMD/8PTAIzhz9mJkfiqff+VR5a2dyE8S+
zM8OsrsC8ncvfixNxr1CfGBBYRIbn86Gbkp+Zgz2RTF2oy+Q88euQgbtQdj8
ek+jHherE8ifmtebtsHrL9RSoEYZi29vF9Tb11IcYOTS664YVdxvku1cBMxI
cInH6EO2igPQeUsLCROQ+Fb9TNLzLAmGDd7tlBZ2AJYH41qOKkj7thfTXIel
71+LuDOg4AB7t8n/3IikN2bNoDRokaAxe7X32Bl7+NrO+VTpMO75nRUh+dj7
geMdh7mSgR38UDE7cZofyX85OaVOngQFHD+7qhJtoWfwWkUbF7K+rbG5UEeG
BCc449b7s9uC+ti78WVk/t4tuxa/CZu/n5y1vH6w2gbs3Aw97JH1AWb+ad89
YiQok4/7sN3WBj7vED6mtBX3HLai3AfY/D6jUIp6aIMNKCYLml9B5vdbt7UR
ZQ+QwKSLr1T8kjV47HwVHLcRiY8ubGWv+Uggup7xt32HFdTOO8TdQtZHSnPl
lL7vJsEfx63RK8etQPVH1SYrZH2lui/MeCcXNr5JDTljxGEFxBaVWtMfuLMu
FFLSMVdOnoOr/FbQYPvk6QTiTCGLhLvY/fkF8oQ12qzgSc/VtCDk/sPS7JNp
B0lg+UlWTuSBNXTmhd7gZ0C+L9eRzf4jSAJHsc/VJ25Zw52XOuUB9Ej9L6U+
6j9MApfzcfFy+23ALYSLuZEJd9/8/c9zsfLVfuGsEOthA2qbw4VbkfLNe80m
RSdFgqYLjtFvumxgYfznGV9kfYXk+DWnRJYEzscPDuwxsoUr517GxOzEPUDR
ZM0KG39svvZQM2rZFnbwnaY08uDOkJ6g442NjzQ2vA6Bj3Zwf94pL1EQd03V
hW8ip7D3R3BkPHunPezNytRkkcDd5ouZ2TpTLH2d95D3OgcQp2u/04f8faD8
w2xHlbHxnfdw4L3YGQcg3qzwaEfGd2UsO660YePHN3dq6Og/XYLmnn2ie3Vx
7z9xJXOLJzb+82G4+GnVEfh+7prVPIt7xNbnvw5j4wMCi2cqn4sTbKP/Enrz
Iu6F+qHp7HHY+A7s0iLuOINzu2yFmyfu70pWstVukGATK08lnZ4LHB71B9EA
3Pl6uRs2YOPnH24udOPsziDl/2TlizOyv9DCVfE9lARhLu87YvOcYO51x/uI
S8j7QeiKnF4YCaIkE1zCS52gsGWH9TTisg+3Jz2OIMHRtG/B+VQnECz72hLs
hKyv8UbFqMSQIHLpW96AszMopskxeLgj769Hckd0sPR+R4MPm485QXCCqxkr
kp5unIv+bgDWvlOtxS27L0PzgTXuRCvcG/ebyzS5kcDLp+8LY50jCLh84ek0
xl1Vx2S9oT0JKC/DM8xSL8GZ6qeprjq4UxKIwY5Y/Ox54vhqc5YDdMjw36tF
4ufCkY25M6dJsDDLVHOU5yLMrS1yMUrjflSywrAdG786NvewxN+3AzH+XObX
yPiVbspM4qg0Nr67Hbtjw3cbSJLpr+pB1ic3WKwK/cXiS2i9n7PaVWtwVuG4
Z7cJ978H7hn7smPx4dT+a+GmF2A500Z93wJyfrc6uFd+mQgWV83jd/uZwa0b
VjrWyPrenqcb9P6+JQL784WRCmF9yNlmTbqErJ8FN5bPWBcTQVRPNaJdWg00
NbaPXkfWfwrvV6YcyiTCg9uD0qQhOfjZpH+VzQk5X3ybdMI7iQicMzIDB6Ql
YKP3noh0a9xj78fql8QSYd5MrWyPqCCknqhp10TOJ+uy7iaNRRLB7N08lbSV
Dw7682ceRs43vyqZGFeIIMJZSXOV2rIdsHKHrKuJfD8yvvv4Lc0wIvgM92rn
5LDAmaSnzwWR89Vd7S7b/p3fHjq1rvTQxw2QpJpbW4ic3+5NaNXfgXmAY5bI
af3fhO4R76I3yPnwd4l8L1KuEkEn/Wyus/J3gtbdjHtyiB+UyFT59/0DZ5vu
qR0FC4QYh8yX6PcP6ivx2t+CiaBxlcVbtY1MOFoytRKNOPdho7RqzDOaLywc
pRsjMAlqtWkgfleQeS4Kc82EF29Lnw4QhkcF19gRL6aYJzhgfnXdrvyHHd2E
xr87+xd0cZ9OfEJnjLli7eXhDI92wv33LEWfEf/zmGdGC3OOC3/m+h82ETi6
+GzfIV7fFzBEwPzgyV3XJFXfEM5fcfZ+g3iUYbeu3L/vA3ab8hT0NxAuU7Yo
1iL+UfpAoSTmlW/u/Tz28Tmh80rp1irEbZRlzopgzlPxeZOaRDVhQ1SETjni
z90DcoUwTxlse9QxXUGo3iimch/xC9NauoKYaz8z5uQYfET4yWJeU4Lm31U0
Zj/mBeV7WW7eKiOsvWJpvYv4jTTxAAHMtwWrCC/XPyDMK20qKEJcslta5Z/r
SrXLBRo8IDC75F1AXVN51fqfp/ZpZ2xLfUBQGnoVg3o/bxj5n1+o+yBpH/KQ
cN+Snxu9/1PuHMd/+Ts7OMtWaVdGOK3ZVIL6tu9Vuw5gfk7Y9WJsRjmBcMjA
vhjxFI+5jf+e/1mrywnn7EcEW/crF9Hnt31RpHYQ8w9jP6svVT4m7Gu2f3UP
8Wi2bX3/yrf7SLL4211PCCqsFf5o+erl8zgKYx5y3sJgJbCSsL0gVOIhWr6H
h+z/1Z/Bf2vqzsOh7MIGgJM+W0o1Iow30a4sLZbw3LJUCiFESlIq+xIlyatQ
9qUs2c1Elqzvi5Ct0pjFzJAtSpYsIeIlKUvf+P74zvPnXL/rzPVcz7nPOdfM
Ofd9RHTuGWhUYNb0q+fx/bcxp/uNPMfXCdQuhhlXYg7VPyZKcV4ebMC3Gh/+
FwfchYyrsbKY0StlOHd5PyhziOM2Rldp4XI12DjjQnEFzp/fUb5xhOO/tDTM
2uTqMK4LOnuqcN5YFt+uvJofs67g5IRzPeYnNl9WjfO/+lVSVuP37zCs5/f6
BowerRKJj18976jNq67g+qz00bN6TOWs6wK+/exmk6xV3+1+XHp5UwOWdW1b
Ir59Ctfc56McV42b4FPxf405kbdK1uOcvXmPJHD8cbdwzqT1W0yH7vcSP76E
uqoGdVbjq8/SSOj2Oyy/P2WCivO7tyzqVscvf1t44Z/kJix7beQR/PhtnpS7
aMjxUS1Hf7ksGtZLMtVsw3nm02CiMce1RS3/IvTQMY/Yzeqd+Ofnnqg24fj4
h585eTEMrChVfaUL58+2DJ0257hxkonglAwT6+061P8R5495lcJX5x++bd8l
0ouZmPyzdvVenM/tEyWe4/iZik/N3t+ZmG5iXDfezQ0Hpqw5LjFoCW/5WrCO
+QnxL/j5IZPX23Y1/g7I0L/ytmISr1p4v+JcPUzsb3uOf/8T4vSX7Htsk4p5
4CTO3X193Z1X87e8Lm0vyW/DShKvb/6Bc1WRGl7P1fljMVCbOtyO3aqM2L2I
c2+eDuXbHC+VbWTYCHZi6Ys+TC7c/PzQIi/9Hscf+Mc/IN/swqYTqRQ+nPPK
dZcFc7xE/mJxuXo3tqGHFLcR59zPV67FcFyws7d0OuEjthf+VSPivHuca5a8
2v/9JUVzBX3YSfq0oyLOnSd/wj8cfxnUFTsTPIBV5t8gHMP5Gnu2YyHHFbvI
5fnL/ViAgn+LOs6n+9x6E1f7x84p9L16L+bYQbLagXNRxxTN/8uvk1O6rhYz
htFu0cPw+XWXmwj2dM76WPnz0vCI4gKmxxAheOLWz5fH14blNL0DsmFjXuMR
Y9ibIGtTnI6L71Os2F16VKg8F546HRcI5AM5a2rN0O9vyvN4x9loGnjw6SXw
lEZAz7nPg4M16P/3j9nr+zqSqMDLdU9/diwY4jedy/5egtrbWkMa7RQV0kaT
qIU1gZBbuEmk/zzyY8LlzCsnqeD56L8wyotAmK/qYevg9hfOyLzJKbhMhXfY
hQ5emyC4K6o7Qb+J3EuIWuH8NxVUDQ4HvFEIhrkcZo58HPL7FwZbWhKoENBm
ez2vPRjEranczwuRj4bX1g+WUMGnoeX4zYiHQH41xM9PR77dW33WgEIFcVvf
IifZR9DJez3ZcgBX/5cYK1bRSQWbsk0DxMRH4CZf5608i/zpPFMqZoAKL6yE
rqR9eQSuaokzvH+Qt55vtZmfoIIcM7Vmcn8IyET02Vnh6hMX2c3oHPiPCktl
Wmq1liHAt27USWoTcoVnlivff1IhSH/mtdX9EHhj2rtoJ4Z8SvvmgaAlKhil
/+NIIoXA6TjNvZeIyN8KsxQieGiwraRG6lBbCJxK7fjEuwP5gtixcCFeGlQl
y93vGAqB0I4+voZdyHMmQldU19OAS0dP8oZYKDQmCtyIlkde+SREq5FAg5dj
XuZheqFgvjinX3wEeVeDhX6QKA0eDciSJy1DISEhllqoipyL55i7pBQN2F72
FVcehYLfh/C0HkA+HSKY/W0/DSIeH2cMz4fC8/sZGwgmyBmdv8eNdGjgFOS/
4d+4MAgIrCjzcECunp88fdOCBl7rD+nmS4ZDo0BziL4/8n2DXjIbr9CA56qO
XYxXOATM2kmvjUDOlu8TzPKkwU1NybN2g+Hw7dBo+69U5KOqL5PSE2mg/WaE
TBiN4HxW0dR4h7zcufBPyEsa8McK6ROokeB0rdB/cRS5qIKo65V2GvQvG0j7
PYmCYl1bdXs+VP/7+Uvo4vtKg0hC9bUfUtFw10W5oYmIPPhC3vWReRqI7Wga
pT6M5iyFErwL+5HXFM5JRPLTIX1NvkMqdwz0/y5JVdBCXiARZNWzjQ4pl/ac
rj8bA3scVghRVsiHtYfZUpp0eKu0a3q4OgYC6rfuc7yDvNDh8zFVWzocuPga
IyvHwocHNr2kDORKrdLe2QF0iM+UkPmeGwv3Ln16+P0NciPtMaeFTDo0SEeF
9Uk8Bnkad6b0CPI+44X9+nQ6aHinPLxf8BhqdH9UShJQ/XWrz+aXTkzTIUj1
3WWXg0+gk5jJ9NFAPlOZO/9UhAG6BVaenv88gRHtYS2eq8h7ilqa9qowQMe4
J1N/fxxMaMZLZYci18mrXThszQBzzTNhFi/iwCgocmKwBHk2QaAz6xYDXnny
zQoJxUM4kfztNQt5esXxOPYTBlw3/eX9yTMeXDB58cAp5IE9blKRhZzvV2SP
JjLjoekjXTNUENWn/3pGssOvlgFdcq3+jf+TAHr1FSODkshfYOcYmjQGjFLp
TQcVEmAoKJRdtAe5r5Ot9ZOPDEgprCG2uSVA4tGTlCwN5NTbe3+ITjDgiChP
8oPnCaBjzaoKMUQ+cjRyzo2rGbbGt+99M5PAWQ/vxVCuIk9QPzRQKNEMvkpq
+7SNEkHaLtDP8j5yY/fSNUbKzXCgQr+cXJwIYx1cgs4ZyE/ZpD0rtmkG0Xcv
mn9pPgXP3D6GHQO5nt0D3+bwZqhaq66/8ukpiOacVw1YQi4TarPL7N9mcKCQ
xc1vJIGz/1JR6G5U//+WhIPabGczPJG+MDY0nARL3NFNJkbISwbNUvy4mSBo
Lj3QfjcZjmqVaJL8kHtwLbvuUWNC2iW1bZu0UsBzzVkvzSrk/F/rChQ9mWD1
weeeuEAq9NfKrpj9RN7ydcODV3lMCLi20W2gORV+lojpMw+h+xX2bTHbEdvN
aa/fIuTvnQYhb01NB64j1xHPlzE/yAKtzoXWy0XpMJfPMgumIm+lmTodvMWC
YPumgadpGfDQcnny+mZ0f4LufrtKzScsMBkTpS5xZ8JJqlYf70Hk43EnxA5X
sVbrK48P6WaCjWm5q7U1cq4+F8x2nAVzUUXDUSmZUF/DZTsUg1z087B2w1Y2
GDYUV52azATfW7+yL79Fvizv7FJwiA0JlDuttUQSGFCU9Er7kVfMLs9ZmrKB
0EkJYJqSwI0w5SW6Bt0PsUFeqm23Bxvsln+XiYeSgLRlKx9JFnmI8LcFjwg2
LGwScD9YRYJKOmHB4hjyNVfu8cjlseHprorm1gkSLJ1PPJ9qi9zi7od1A/Vs
EOMskB8IZIgJd1SyuIM86zfrDG8dG/iOZgnGbSRD7oD1OZPbyA1y+zcaNLLh
3XFhCbIkGbpWWJE7/ZGf4rf4sSWLDY6DPq8/DZJgWvRkH8EaeeW7JaKKOxuI
asTbHo9IIOHBPZ8sg/zZUEeVgzwbetu1zvoQSBBVXi/2swe9P2esyEVtJxsE
Aw8GH+chwdTJHxLzLciDrnLfHO9mQRTd0CDCP3M1D6luwR/3/iumNdTSWfBl
ym763JZMaKkhvl/URG70VLHa1YMFR8zuJjIjMqDkfBKfKu5+DnaGcrKHIQuO
OnHr/Lc+AzrK1oUJjKD4zNOf7kxSY8FEkkgaFzUd6u1ZRLcW5PavG4sfjDEh
QSxfpLQwDYiVgQsad5DvsVUPeZDChNPG6y/WJ6cCVeDJKZMdyCdMKlekbZlQ
tv2PnxstBRQ/RxNffEHjT+Ww/YkNykxQefsPa/uRFNhnvePDp3LkK3enx7GT
TDhQG7sE3ingI8dIyach30n//L7KgQlrd9pG60ykgG+uy6jUFPK4ed6/L3N8
R/o3ZaHxFOBnB9XWTiJfqzxqLOrHBI9+X5MluVQY2xzlILkGPf9//K5eEMkE
596a4js3UqG7IteALoKc61Bf7OcyJiQZE2Vl51KhJslEfxKQn+wXjnZeYIIR
w6pUezANGndLRd0JRT4/FS0WtJu1mresdiwkHSQiNmXW1SAfpPIoqSixYDwj
YdgjPx0+5nxZa9SE3CSo3aUukAVhBsU6VswMCDDsTN29HfV/F+GiGKuQDbIv
KuaXZ0lgIv6nLtcexS//Oa3t9QUsWGfaFzItnwm6YdxRDEPUnuwTf+QbHxvk
BJK5yOxMmPkZbi9cilxSyLvyG7TC6UXFpahvz6GBX8Jn4FX//7uriBVJMZQC
PW2NeS7OLkAWHvl1Bff/+NadXzsO6lHA2TPtivR3exCri1q8iDv/IXhDZu6G
IQXeKNo6FHVeA8Ks81Mj3P7GFu8R5agACpRvC3o14+MMWU0K3su4/YX3Q3bE
Z0kU2BYl0Kym4QaTJwS5DAJx52OaZZsmMyigknfDIHvSDWYaGqJ3hiGXO7zx
dDGJAmNvVkhxwu6wIDk5tyECdz5/xf/HgTQK2M4oHPgr0w0umx003I07/7Pj
xNHTDdUU0Mt2ruH28ICAq7+PWeUgrzLL5vYVaYJPCZutxe1ugdK0Bo1fAO2f
3qz78LJpjAJbBJuqt/J7wcOvivQI3P79/wJ3fhCD
     "], {{0, 0}, {300, 7}}, {0, 1}],
     AspectRatio -> NCache[
      Rational[1, 2], 0.5], Background -> GrayLevel[1], Frame -> True, 
    FrameLabel -> {None, None}, FrameTicks -> {{{{6.5, 
         FormBox["\"Predicted Exon\"", TraditionalForm]}, {5.5, 
         FormBox["\"Predicted Intron\"", TraditionalForm]}, {4.5, 
         FormBox["\"Predicted Unannotated\"", TraditionalForm]}, {2.5, 
         FormBox["\"Real Exon\"", TraditionalForm]}, {1.5, 
         FormBox["\"Real Intron\"", TraditionalForm]}, {0.5, 
         FormBox["\"Real Unannotated\"", TraditionalForm]}}, None}, {{{-0.5, 
         FormBox["0", TraditionalForm]}, {49.5, 
         FormBox["50", TraditionalForm]}, {99.5, 
         FormBox["100", TraditionalForm]}, {149.5, 
         FormBox["150", TraditionalForm]}, {199.5, 
         FormBox["200", TraditionalForm]}, {249.5, 
         FormBox["250", TraditionalForm]}, {299.5, 
         FormBox["300", TraditionalForm]}}, None}}, GridLinesStyle -> 
    Directive[
      GrayLevel[0.5, 0.4]], 
    Method -> {
     "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> Automatic}],
   FormBox[
    FormBox[
     TemplateBox[{
       FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           GraphicsBox[{{}, {}, 
             RasterBox[CompressedData["
1:eJw1Vgk0lev3NkSGlFKKlBSlydSAwiNTaTBF3ZQhQ4mbMpQrQpSUm4RElKFC
lFRSlGTIlOEMOObhDBxn+iKKbuXnv5b/u9a71ru+9a397v08z97Pq+J2zs5T
VEhISHh2N8zu/zuvIRw2y4V9htDcWlrcMJRoRYWWomRGQOdn8M+rWSuOHkbL
lMnYVBEVxuYflrTp1M59d8cNww9CznJtsDl/Lnr7rVq4b3x3MbfvLEwjd8hW
X2iDa9ran0kj//9/AP7UFiqrd7bBr7b97OSeOqg3C+iujH/wTlpd89audlwZ
ixlySK+bi3MZATZZRuPp7bijZOBQ8r0OpCpjsR8+V7D1rqLV0Zl2ZO0l6uVt
6+fiR4Hdlej04WQHXvpnGwQV1ENKWSrV8FQ0slfLnFWp6UDlA4cimljD3L0x
OOEeHRq9ngZyvYSqnmsDLEKoW666xmJ53kwsN4YG+rf391LKGubyuQUy7580
Gy4N46vPSU8vbUSlj5Wr59Z4/Ks9nv/mUCdE9q8NP3aucS7PO7C46FOmWNSJ
JRfax0sbGtGvsC0/Jj8BQu+ZDeFLurA2M+aUouqXufwT8X7GqYsZ2AWdL7u7
L4V9wa+65RMFG+7iohmNbUnrgsl3waGezi9zdSVD64bNVKF+N+xUsit3b2uC
wsVfhq2P74HT3DB/aXo33A467Ei/1TRXbwqeLDFdHvynG/5BEk9/jTRBV3Xo
+rjKfbgc/bC+37UHUdnvlZxMmudwSINi+o6dptU9SGz2jS9Pb4YD5TN5WUY6
2gYLzfPUevFoSmXe6h/Nc/g8QJyauoNMTC9er2sPCrNtgX9E/kp9pQxYemd5
+HN6UW0Vw+0vaJnDLRPzXigG0g72oS14twvEW7HvXp1OYVMmPn5LjDJ40Qfm
YwElw7V1Ds8s/KMnk5i1uB8TrVkWQu9bcURQSoN0NnQuR2eLB/Yj8vImpyIp
0hzO2eBXzrz06eiHlNy8e4O6JHiaPwslWz5CnnhwJUlvAAl5fSRZT9Ic/o/g
dmCctCNtAIpGb6X2JJAQmP5QxT3mMZTifQbv/x5ANjXezK+CNMfLE/ztPf5j
RnMQm854h2XxSLj6Lb52ovYJGha8CNc5OYhXf0zfkRXIc3zlYP0Ln/meCYPY
lbRqXHgvGQn7o3yixXIRZat++171IKo2/tisE0ie4zEXg9+Y8o0Tg9hfQfJ0
yyIjK+uC7AqzPBglZz38pTYEin1+RkILeY7fPKTpOa/XPDoER05UV9V/ZBRN
nX7zNPIpproVC0/GDIEe7iT3TZ0yx3s+HC7TdiSVDsF7me6hdUco+Gjt6Li7
Mh+vlJPKazlD+JYve/1wFGVODwWQrbIxn15JR4gx51NUEQXNOQdnmmYKcNZD
pnnzITpEO6p/vu6jzOnkGRrFG+2dw+iI9XmwnSlFRe9vo8fORs+h/jS6N/4F
HXLCQb5L9ahz+nmOqwdMPaoH6UhLtskz86SCY69t+TW0EHT+DHdyMQPrtmyi
ByZQ53T1Aoj/EKBuyoDIi4oyj5DZOCGWhnxuETSo+woXnWFgUNsh0d6DiriS
cl655Suskm9nf49joKKY42N2iIp3Y9rpcbmvseDYyXX9xQw80I0w276TCsaW
nAMuYm/wXxrf6XM3A6Fly1apKlMh46X4n6Z7CTj9wSnPhJhwNCyYlJOgQu9R
XL5Q5Vt0qYhTE9czof/JuEV0jAK3fhFH8upS1HskyIQcZGKFaUfOty4KYhSC
JLNDy1CSu3qfmz8T3z/7hDOqKHhlz33n3/0eTzj5kZYpTLTvE/6LWkBB320X
L1O9ciRt1S3X+shE8ZdkreokCiS+UJcvTf6IqPPVP5YzmUiw2iL5+jIFOuL7
6pjfKuD/2lpnRpIFP3LlUPYpCgrXOL/vzvuEk997/h7WZMHa/mhZgjUFZkYr
5KqPVsJG3yu32YEFDRovIVKPgs7jFO8C8SogdGKoOISFBY6RPv4qFPgG/1uV
+KYKGhURSulZLHB7l5u5SVEges9CMdSjGkoiMkej6lhodHmuZPeNjJRiIX8P
uRpIm6fe8eazkEc3mdzTS4YGpazhYFUNfl5Xa7KVG8Z1z85m7c9kVBGBKjv8
PmO08aW4vv4wTrHP5qgUknFERjN41ZpadMoY7VnjMgwzH9HwxffI4G4aJYm1
1qLOpjFk/rVhrBOkHBWOICNi3yN1weU6lCQeKRHkD0PYT0NrzIsM+VNOER1b
6vGkg/61nTQ822fVEkO2ZORHLe/82FOPJIVzm8u/D6Pi4rEh0i4yjLPImrk3
GxB54j/Px0ojeDAtKP20joy2j7HXb+s3wi/jemasyQhCQ68mFC0gw7vXfCCI
3QhXulyPv9cIHGcUfDInSRD6ObPT9d4XWKtlLnOMG4F+5AvT+H4SkpaXxe2z
aIKR1xabPcUjWCFmrhRRR8KmHYHDWpNN2Frw7qZ69wi+X++eOFdEwkc7DSOF
x81QEph9XiTERrvU+WaXVBLsz7PvCh9ugbQ2eea7GhvFt8RyrCNJYN/K5o8K
t+JngNOu/gNsJMimhcGHhNCCE+aUolawS0YDP/ux4ZeodVTTnoQbHrFWfZok
0KYvvHh2jw1r+VpNZUMSDgd4XbK9TkKtgQgnsZwNjdTjEovWk7A60jzn82wd
b8LjVEMYbCxQGhv8s5CE0fi1FP2dZDyuUnRxkxxFh6FMQB/RitcZM7+f3yIj
USw31VJzFImmeqrlla0IK+zduJZFRuS+bW1aDqOwsXRvT0+c9YXyUodkAwr8
YisWrggZhYx1XHSoZyvkmpKvSM32gWvLAcuZzFE02pfqntBtRX93wPMwLgXW
izujhmtHEePIZO+WbEXeqE3XuAkVRvYeH5t5o7BwXXR/Zc+sT01tFTt9n4ot
975OFS/hQOTUrgP/PWuBwXxp7Z4xKlZ2h25L1+Pgk4/nr+6wFsyXZ5+wtmyD
1CpJ3yhnDi77xT8vs2kBWfVzTHVmG6Zd7uZ5X+VgV9B75/trW5C+LbtYd6oN
7GwVhm0+BzztV4MOe1ogZhoz9t6zHVYx8Wr6lRw85OW5LXZtga+dr4YxtR3F
Z2dOr+nkwCY3g9k0ey/tpL1PjXEHFA/75s8nZvN0Sz4V86AFxn678vYVdiBC
r48nEOOiWOkW2/RDC/Ij1rCaVtIwvOqgZocSF6doUd4z3S2Qixdfa3uDhoOi
7/3Kt3GxIuESr2y6BaEZPOf27zS8Ym8sfryfi8aDfr4XV7SCVUhJO+bRiRUt
Kd9jT3IROt/rq/YszlYf33X2kTsR9nq+fsA/XGhUOfvzHVrxtvnhMjd0gZly
McTxNhcDoQ4TeYGtWNN31W74WRf2h7HK9+RwcUf34EWPWX5v8Lxveyt2o8jd
XmhjORem4yZTyq9aMf6fTZPgejfkLatNZNu4mHymf6mH1IoT0rqSAZPdCNXQ
ufaDw0Xuaa1fybO6qlFcZfHDrQd0uay6fmEettyRw8b5JGzeJBoVQurB3ulF
UrUreLgmWCh0XX627/RHK2YMe/G8P+zgc00e+g9IVTLVSPi9r/VXVEEv5Gr4
cUkWPOg+FYs02UHCqb/e6Eso9CH46QlyiBMP8eLCpplmJJBOp138N7oPA3Ff
5NwDeRh1/yX65zAJekFXXstO9ME8cNeR/bE8mFT+qDnuTkJ29OmvSSf7UXDs
aYp2Ng9pq79dK/UnQTr50FaF1n4sxoqeFaU8TIQILJbP9m/gk23eDwwGEKR6
fZUQiYdDXaPzL9whoa9YIVclfwB9kt9dRoZ5yNnJqqdkkrCOPjNGkR6EKeGR
3fKbh5nEwRtas3Ojc9Rf9q7JIJ62UZlvlvLx11jP/rjZ98y/YyyNo8GDWFRm
suHBZj5eWtGkeS0k7Jn+65BC0SAuZLw8c9WED6lnlCbL2T6fFGry6RkeRM/V
Nc98jvHhLtlyK5dPQr4Ebj5YNYQ93rcFduf5+HCqwUrsNwnOsq/yXOyHkGv9
R2vXdT6W1dQscp+dk3Ir1OpUYocgs+NsgMpDPnxVPpE+rSSjXjmFxagcQoBi
7xuJN3zUhb2/s3ozGaEbpOflTA2ha2b/FPGFjzW9JXahs/NZSzNsrZcmHWCV
7qLR+QjWfyXXbUkGa+eY8aZTdDxpVL/8cZoPSvLzNt1jZNw38nDhpdMhXXSv
4omsAJsn8u7enfUFKwva5UIqHX53xUVubRDgqu3jI9+CyBC12p9+XooB2qUL
ZoFGAvQWZiy3vU5GiUN5mc4eBgxcmdHHHQTYsSCtszB5dv47aXVNBDGQbX64
weRvAeLOJKcuyCFD2fPRj5JCBiQ2V0lvihJgpPaOo/ebWR/5W14+mMWAr6y2
1eL7Ahir3lpZX0NGTOCN7buVmGibzIifKhIg9UpMr1obGYahv+x+2zGxq2ch
daBOgPH+qAdRDDLGo875VdxgIvPT5WV1/QIcMAh3HhonIyeWfvvKJybEc3hH
CycFeJx6SRkiFDgmOhSa/mDi79jj9+8uIPD7+4XB9MUULEqrbxLTYIFyvrE3
dB0BWv5PtvwrCirzhr2XHGMh6adG6IsNBIqcw8fi7agIKJknqXyVhaNXE1fS
NxO4uWTeT6lvVKjVrM3d/IIFhYVTZUu1CLjXxohcS2xDJ9nYXK+bhd57Jxz3
bidgeElGemZbO24OODPMxIbxUKVyOliPgLxGglxwWzsM+KFXbLWG4VqglvrM
gMDXIXmlb4EdEPy8r+x8fNbvd9zUGzAm0HA3TfXsMhoyJUrLvaOHwfoooC02
J/DIcs3WkTc02MnTjge9HEbuvsNBZpYEQn8/3nHySCfmqU5OR/UOw5vyVj7o
EIEjLzca9XzvxFttuZT4+SPYckKp5KktAS3PQguHe104A+2dD3RGQLAiHHod
CEgqbLNu1e3GykPWbU+dRvDyHGtioSMBetPbo5ad3Wh2POtfEjOCgGnLpD3O
BD5EGLhW/9ODcK9Y2erXI9gZVbgt0I1A8vZKL0OFXmhffFrY2j+CqQVy1JxT
BHzY5n5vS3tBj6o72CvJRllykH+XNwGz9MZgbcc+JN1hcdjb2bi8pnfxgnME
VttYRxb87MPeDNEbky5sIN/4pVEAgSnRtptqaf2YfqayQSSWDZHtT2z8gghQ
3v6VmLF7AAVl+LywhI2acsmvj0IIFPj0pSn0DsCp3sl95RAb0Xt9b3eEE6ha
pE2xNJqdFx0hwuoLRmFJpmhIXiXw4kxAR3TcICoZqRnbdUchfVy3ZXcMgfTq
N93V/YMIHHtruMdtFC3MtLO+/xKIWTXVL6Q5hPUz7T2Hbo0i3ldIJiuewMWg
XQzD8CF0LpgIdnw3Crspj2fUJAJu5NCRS61DuKm4ZMVpxiiWRTYcEE8lYL25
gvtWmQ4Dda2SgIUc0KQ1uHoPCBhcE/46cY4OwQ4r+wh9DlLvJtz0ySKgPmA6
of2JjkzTv8f/9eDghPKPjQ+fEFimHz3lK8uAne3N+NTbHKx+eryB9JSASGL9
rwJXBsRc8jRyyjgY0vnkJVpIQMCTEh4tYuDt37VNr1gcPPqgKrHzFYFei0Ni
64WZOHOJ6V0hy4WnxY1crxIC9Zm3Jd1tmVgZIyLZtJsLdRLfIq2MwJufZJnM
LCaa767J7TzFBeeY3XDzRwLZ9kuX9I0xEf7IyJx1h4tnjJJrQtUE4gqPyCua
sKDz8gRj7AMX586uVNtWN6tniVTFowksMD9euvJnhAvtH+E1nl8IeLn1rE6i
s5DclKIsLTfrKxFM95RWAoc/rFpH1hnG3u6S8uVGPJRIWYp+oRIwlnfdsDBq
GNMjbcdVz/DwT9Lz7N80AlvOZ28+QB1GweT4tFYSD7tXLzHR6iWg0MjUjFk3
AifRxSmGFTz8zr045DZIQFx1w/bPASOQXay5cz+Hhwrtnoi7TALjl8/oidSM
oGr1obYjy/iIfI819WwCg7QCAyxlI3CLj7+7MR9m5o8rfvIINGkLjEM92Fi/
64bseR8+5rdKuGwdI1Aaq2VeWsxG597cwtBkPhr+OvvHZZLA/wCuRpEH
              
              "], {{-110, 
                Rational[-15, 2]}, {110, 
                Rational[15, 2]}}], {Antialiasing -> False, 
              AbsoluteThickness[0.1], 
              Directive[
               Opacity[0.3], 
               GrayLevel[0]], 
              LineBox[
               NCache[{{110, 
                  Rational[-15, 2]}, {-110, 
                  Rational[-15, 2]}, {-110, 
                  Rational[15, 2]}, {110, 
                  Rational[15, 2]}, {110, 
                  Rational[-15, 2]}}, {{
                 110, -7.5}, {-110, -7.5}, {-110, 7.5}, {110, 7.5}, {
                 110, -7.5}}]]}, {
              CapForm[None], {}}, {Antialiasing -> False, 
              StyleBox[
               LineBox[{{-110., -7.5}, {110., -7.5}}], 
               Directive[
                AbsoluteThickness[0.2], 
                Opacity[0.3], 
                GrayLevel[0]], StripOnInput -> False], 
              StyleBox[
               StyleBox[{{
                  StyleBox[
                   LineBox[{{{-110., -7.5}, 
                    Offset[{0, -4.}, {-110., -7.5}]}, {{-66., -7.5}, 
                    Offset[{0, -4.}, {-66., -7.5}]}, {{-22., -7.5}, 
                    Offset[{0, -4.}, {-22., -7.5}]}, {{22., -7.5}, 
                    Offset[{0, -4.}, {22., -7.5}]}, {{66., -7.5}, 
                    Offset[{0, -4.}, {66., -7.5}]}, {{110., -7.5}, 
                    Offset[{0, -4.}, {110., -7.5}]}}], 
                   Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4]], StripOnInput -> False], 
                  StyleBox[
                   LineBox[{{{-99., -7.5}, 
                    Offset[{0., -2.5}, {-99., -7.5}]}, {{-88., -7.5}, 
                    Offset[{0., -2.5}, {-88., -7.5}]}, {{-77., -7.5}, 
                    Offset[{0., -2.5}, {-77., -7.5}]}, {{-55., -7.5}, 
                    Offset[{0., -2.5}, {-55., -7.5}]}, {{-44., -7.5}, 
                    Offset[{0., -2.5}, {-44., -7.5}]}, {{-33., -7.5}, 
                    Offset[{0., -2.5}, {-33., -7.5}]}, {{-11., -7.5}, 
                    Offset[{0., -2.5}, {-11., -7.5}]}, {{0., -7.5}, 
                    Offset[{0., -2.5}, {0., -7.5}]}, {{
                    11.000000000000014`, -7.5}, 
                    Offset[{0., -2.5}, {11.000000000000014`, -7.5}]}, {{
                    33., -7.5}, 
                    Offset[{0., -2.5}, {33., -7.5}]}, {{44., -7.5}, 
                    Offset[{0., -2.5}, {44., -7.5}]}, {{55., -7.5}, 
                    Offset[{0., -2.5}, {55., -7.5}]}, {{77., -7.5}, 
                    Offset[{0., -2.5}, {77., -7.5}]}, {{88., -7.5}, 
                    Offset[{0., -2.5}, {88., -7.5}]}, {{99., -7.5}, 
                    Offset[{0., -2.5}, {99., -7.5}]}}], 
                   Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4], 
                    Opacity[0.3]], StripOnInput -> False]}, 
                 StyleBox[
                  StyleBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["0", TraditionalForm], 
                    Offset[{0., -7.}, {-110., -7.5}], {0., 1.}, Automatic, {1,
                     0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"0.2\"", 0.2, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{0., -7.}, {-66., -7.5}], {0., 1.}, Automatic, {1, 
                    0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"0.4\"", 0.4, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{0., -7.}, {-22., -7.5}], {0., 1.}, Automatic, {1, 
                    0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"0.6\"", 0.6, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{0., -7.}, {22., -7.5}], {0., 1.}, Automatic, {1, 
                    0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"0.8\"", 0.8, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{0., -7.}, {66., -7.5}], {0., 1.}, Automatic, {1, 
                    0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"1.0\"", 1., AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{0., -7.}, {110., -7.5}], {0., 1.}, Automatic, {1, 
                    0}]}, 
                    Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4]], {
                    Directive[
                    Opacity[1]], 
                    Directive[
                    Opacity[1]]}, StripOnInput -> False], 
                    
                    StyleBox[{{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}}, 
                    Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4], 
                    Opacity[0.3]], {
                    Directive[
                    Opacity[1]], 
                    Directive[
                    Opacity[1]]}, StripOnInput -> False]}, {}}, {
                    Directive[
                    Opacity[1]], 
                    Directive[
                    Opacity[1]]}, StripOnInput -> False], "GraphicsLabel", 
                  StripOnInput -> False]}, "GraphicsTicks", StripOnInput -> 
                False], 
               Directive[
                AbsoluteThickness[0.2], 
                Opacity[0.3], 
                GrayLevel[0]], StripOnInput -> False]}}, PlotRangePadding -> 
            Scaled[0.02], PlotRange -> All, Frame -> True, 
            FrameTicks -> {{True, False}, {False, False}}, FrameStyle -> 
            Opacity[0], FrameTicksStyle -> Opacity[0], 
            ImageSize -> {220, Automatic}, BaseStyle -> {}], Alignment -> 
           Left, AppearanceElements -> None, ImageMargins -> {{5, 5}, {5, 5}},
            ImageSizeAction -> "ResizeToFit"], LineIndent -> 0, StripOnInput -> 
          False], {FontFamily -> "Arial"}, Background -> Automatic, 
         StripOnInput -> False], TraditionalForm]}, "BarLegend", 
      DisplayFunction -> (#& ), 
      InterpretationFunction :> (RowBox[{"BarLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{
                 RowBox[{"Blend", "[", 
                   RowBox[{"\"DeepSeaColors\"", ",", "#1"}], "]"}], "&"}], 
               ",", 
               RowBox[{"{", 
                 RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Row\""}], ",", 
           RowBox[{"Charting`TickSide", "\[Rule]", "Right"}], ",", 
           RowBox[{"ColorFunctionScaling", "\[Rule]", "True"}]}], "]"}]& )], 
     TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"]}, {
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "Below"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.74003876524543*^9, {3.740038798803109*^9, 3.740038851737623*^9}, {
   3.7400389049081497`*^9, 3.740038950872507*^9}, {3.740038990618987*^9, 
   3.7400390369633417`*^9}, 3.740039168926302*^9, {3.7400392089437113`*^9, 
   3.7400392316737823`*^9}, {3.740039262501733*^9, 3.7400392737520027`*^9}, {
   3.740039309434874*^9, 3.74003932557344*^9}},
 CellLabel->"Out[77]=",ExpressionUUID->"954b5afe-8663-4108-a30c-fd9289f17089"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"s", "[", "\"\<Output\>\"", "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ";;", "10"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.740039053582649*^9, 3.740039057277132*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"df292deb-b90c-4197-83ad-8ecf2cd7991d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.740039051518611*^9, 3.7400390574898977`*^9}},
 CellLabel->"Out[67]=",ExpressionUUID->"52827d4c-398d-4632-af97-2f8c4d03c5d0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["n"], "Input",
 CellChangeTimes->{3.739787740332877*^9},
 CellLabel->
  "In[1054]:=",ExpressionUUID->"d17a7cb6-f978-4dcd-9b62-1b9635f4e029"],

Cell[BoxData["835"], "Output",
 CellChangeTimes->{3.739787740605728*^9},
 CellLabel->
  "Out[1054]=",ExpressionUUID->"b1dfaf36-2075-4805-a774-3c42948d03a7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", 
   RowBox[{"randomN", "[", "ds", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"s", "=", 
   RowBox[{"Normal", "[", 
    RowBox[{"ds", "[", "n", "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"p", "=", 
   RowBox[{"{", 
    RowBox[{"probabilitiesToClass", "[", 
     RowBox[{"tNet", "[", 
      RowBox[{"s", "[", "\"\<Input\>\"", "]"}], "]"}], "]"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"r", "=", 
   RowBox[{"{", 
    RowBox[{"probabilitiesToClass", "[", 
     RowBox[{"s", "[", "\"\<Output\>\"", "]"}], "]"}], "}"}]}], ";"}], "\n", 
 RowBox[{"With", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"data", "=", 
      RowBox[{"Join", "[", 
       RowBox[{"p", ",", 
        RowBox[{"{", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"White", ",", 
             RowBox[{"Opacity", "[", "0", "]"}]}], "}"}], ",", "300"}], "]"}],
          "}"}], ",", "r"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"o", "=", "150"}]}], "\[IndentingNewLine]", "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ArrayPlot", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"data", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", 
          RowBox[{"i", ";;", 
           RowBox[{"i", "+", "o"}]}]}], "]"}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"ColorFunction", "\[Rule]", "\"\<DeepSeaColors\>\""}], ",", 
       RowBox[{"AspectRatio", "->", 
        RowBox[{"1", "/", "2"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"300", "-", "o"}], ",", "1"}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.7397334100904837`*^9, 3.739733410997827*^9}, {
   3.739733578265403*^9, 3.7397335888413143`*^9}, {3.739734252111759*^9, 
   3.7397342597111197`*^9}, {3.739734964142231*^9, 3.739734995244216*^9}, {
   3.739735442204884*^9, 3.73973547264463*^9}, {3.739736029311398*^9, 
   3.739736042705422*^9}, 3.739736108165595*^9, {3.7397362480160027`*^9, 
   3.739736356880163*^9}, {3.739736393380789*^9, 3.739736413242324*^9}, 
   3.739785793195306*^9},
 CellLabel->"In[35]:=",ExpressionUUID->"4dc525a2-b791-4b1a-a1f4-867a1826c799"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`i$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`i$$], 1, 150, 1}}, Typeset`size$$ = {
    360., {88., 93.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`i$10041$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`i$$, $CellContext`i$10041$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> ArrayPlot[
        Part[{{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
           3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
           2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
           3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
           3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3}, {{
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}}, {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
           3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
           3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
           3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3}}, All, 
         Span[$CellContext`i$$, $CellContext`i$$ + 150]], ColorFunction -> 
        "DeepSeaColors", AspectRatio -> 1/2], 
      "Specifications" :> {{$CellContext`i$$, 1, 150, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{405., {133., 139.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.739735407767787*^9, {3.739735448141117*^9, 3.739735479451789*^9}, {
   3.7397360475279617`*^9, 3.7397361835609303`*^9}, {3.739736249502481*^9, 
   3.7397362659767447`*^9}, 3.739736297986732*^9, {3.7397363425512466`*^9, 
   3.739736414169042*^9}, {3.73978581116252*^9, 3.739785866009016*^9}, {
   3.739787468862311*^9, 3.7397875297339487`*^9}, 3.740038675586381*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"1af2f872-8dbd-4d11-9065-677c9e59c30c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["n"], "Input",
 CellChangeTimes->{3.7400386805632*^9},
 CellLabel->"In[40]:=",ExpressionUUID->"e202313a-0463-42bb-880d-d8dd5d817aa2"],

Cell[BoxData["6028"], "Output",
 CellChangeTimes->{3.740038680759624*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"20556b18-c840-4630-89c5-04feb4ddb789"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"cm", "=", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"tNet", ",", 
     RowBox[{"Normal", "[", 
      RowBox[{"ds", "[", 
       RowBox[{"All", ",", "\"\<Output\>\""}], "]"}], "]"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.739785871235211*^9, 3.739785890244295*^9}, 
   3.7397862270573797`*^9},
 CellLabel->
  "In[1000]:=",ExpressionUUID->"9e93a026-cd6c-4cd9-be2d-cbfaead352e5"],

Cell[BoxData[
 TemplateBox[{
  "ClassifierMeasurements","mlcntclnet",
   "\"This neural network cannot be converted to a ClassifierFunction[\
\[Ellipsis]].\"",2,1000,108,22436830884809518482,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.73978589210798*^9, 3.7397862290979643`*^9},
 CellLabel->
  "During evaluation of \
In[1000]:=",ExpressionUUID->"c91ea4ff-9bcf-4e7c-a32a-925ceda21256"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.739735143631384*^9, 
  3.739735159186246*^9}},ExpressionUUID->"554af4c0-0227-4401-a144-\
f993d1cef12f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"pm", "=", 
   RowBox[{"PredictorMeasurements", "[", 
    RowBox[{"tNet", ",", 
     RowBox[{"Normal", "[", 
      RowBox[{"ds", "[", 
       RowBox[{"All", ",", "\"\<Output\>\""}], "]"}], "]"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.739785939086204*^9, 3.73978601377391*^9}, {
   3.739786044435638*^9, 3.7397860830742683`*^9}, 3.739786225962894*^9},
 CellLabel->
  "In[1001]:=",ExpressionUUID->"d3d8af9e-d471-4a4e-9bb9-1f3f9a00648f"],

Cell[BoxData[
 TemplateBox[{
  "PredictorMeasurements","wrgfunc",
   "\"The first argument should be a \\!\\(\\*RowBox[{\\\"PredictorFunction\\\
\"}]\\) instead of \\!\\(\\*RowBox[{\\\"NetGraph\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"\[LeftSkeleton]\\\", \\\"1\\\", \
\\\"\[RightSkeleton]\\\"}], \\\",\\\", RowBox[{\\\"\[LeftAssociation]\\\", \
RowBox[{\\\"\\\\\\\"Version\\\\\\\"\\\", \\\"\[Rule]\\\", \
\\\"\\\\\\\"11.3.5\\\\\\\"\\\"}], \\\"\[RightAssociation]\\\"}]}], \
\\\"]\\\"}]\\).\"",2,1001,109,22436830884809518482,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.739786044949091*^9, 3.7397860871885843`*^9}, 
   3.7397862340549803`*^9},
 CellLabel->
  "During evaluation of \
In[1001]:=",ExpressionUUID->"6ee57dd1-2a6d-4515-885f-7a4a52be6f9c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"eval", "=", 
   RowBox[{"tNet", "[", 
    RowBox[{"Normal", "[", 
     RowBox[{"ds", "[", 
      RowBox[{"All", ",", "\"\<Input\>\""}], "]"}], "]"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.739786235391408*^9, 3.739786260276477*^9}},
 CellLabel->
  "In[1003]:=",ExpressionUUID->"0b2d400f-67a6-45f0-8863-e04f0cb6725f"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.7397874646426573`*^9},
 CellLabel->
  "Out[1003]=",ExpressionUUID->"27db2a31-b364-4adc-8e85-a43f71569d0b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["tNet"], "Input",
 CellChangeTimes->{{3.7400408968128223`*^9, 3.74004090269451*^9}},
 CellLabel->
  "In[510]:=",ExpressionUUID->"75257e8e-6650-4405-9c3b-5e297cd00c41"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"4\"", "\"300\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"300\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["54", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = 3}, 
                  GridBox[{{
                    PaneBox[
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], 
                    
                    LineBox[{{-31., 
                    1.8982025386783976`*^-15}, {-30., \
-1.4436391420446515`*^-11}}], 
                    
                    LineBox[{{-30., -1.4436391420446515`*^-11}, {-29., \
-3.478639660495574*^-11}}], 
                    
                    LineBox[{{-29., -3.478639660495574*^-11}, {-28., \
-1.4969973982130096`}}], 
                    
                    LineBox[{{-29., -3.478639660495574*^-11}, {-28., \
-4.8286769816737604`*^-11}}], 
                    
                    LineBox[{{-29., -3.478639660495574*^-11}, {-28., 
                    1.5030026034292536`}}], 
                    
                    LineBox[{{-28., -1.4969973982130096`}, {-27., \
-2.4969973979582374`}}], 
                    LineBox[CompressedData["
1:eJxN0m1IU1EYwPFt4T7kqGHO8CVNram1zdSyc+8ZVCiLhaabZo5ladQyTaUa
NnSQVBQWKFHQyyB7WelKY1RqUnAespoRJM5RGtTIkZURVs7NmYPc2Zf7cA6X
34eH8/9wk/c3aA8KeDyeYvGGvuFRwpwOXXg84yc/Yp+ZgjMY3qZvpo7JWFLU
P4mh5cMm6jPysVPyMQwxho3UG9LY6MohDOdd2dRJdAGDOyWLunjeWjRvxSDR
ZFLDaE+g6iKGdfvk1MbbefyzZgzJheupDXQwzMVlUAdC60UYZNvTqNs8aPFg
2FIspU5NCQ0GeW7YfZWRiweDby7sHR1edYeXhetX06k/fwoNC/GS8HvHEhxH
ExwsmOoV1EK9PUJvZ+GRNZvTw4IsPp/Tw0L+NjWnh4VWeyH1GtrDQqBaw+lh
4XJNKaeHAX1vGaeHgZ3qck4PA0ekOk4PA/0FOk4PAypbeH9vzuzJrGIG2l2i
3xEeP1m9atgqwQzsUmQlBu1+Ykv1uqLSGLjSNyi5VuEnC6oD4oxoBkrqXr4f
/+4jK88l7S4XMNCmzakiWh9Z8Ky13fyDIM8g7lVbZklXxQmhYAKBsUvvNL3w
kkTvigbzKIKUWMlAwdAM2dP5b2L5awQFT5WHX3X/JXd9SdWWewiUdsfPnhvT
pLFOYDndioDfOV/r10yRd5F3mofqEXwrjSo5dPwreTjCX1pThuDXwLJbQcEX
EkMSVdVbEUi73Q+M/I8kwhXIHJQheKKt9bDjTmIWX3I0xSMQDreMWOLekCbj
lKhdhEB7v3m6r/E5Cf/PCGTu3Emn1kr+A+XoiwA=
                    "]], 
                    
                    LineBox[{{-27., -2.4969973979582374`}, {-26., \
-2.4969973975771307`}}], 
                    
                    LineBox[{{-26., -2.4969973975771307`}, {-25., \
-2.496997397772502}}], 
                    
                    LineBox[{{-25., -2.496997397772502}, {-24., \
-0.039694395639740726`}}], 
                    
                    LineBox[{{-28., -4.8286769816737604`*^-11}, {-27., \
-0.4969973981805521}}], 
                    LineBox[CompressedData["
1:eJwl0n0s1AEYB3DKSboiXdvFVXNqyEvGxu+leuqPEJ0rtaSTrssVk+QqNdoq
6w91Ssu8DHNap7etdsvlbZpn6Jiwy3HE3bkc8tKal8uIXvj57nn27LM9fzx/
PO6S1GjpGhsbG//lXpmr2YekIINqlLd9fBlusvbP0qhNGM9OSS0C9nAu+I3S
KKDc46/9fg1+XRzznJ7GaLVg1FWpBoctKfoQDY01ZdPr7jh/BMWLIv5UJY0+
/n/XB7k3gTWnsHlnOY2Fc8GsMV4r2GmS6jUPaSz3en4jPrMDtMedHEeu0egh
eeYXWfYFYgKy32aIaGwedhwIU3XDqZNua+3CaLQkVYhiXXtB22M9Fh5Io1tF
EldNf4VWNacwbDuNSQUxm09zBiBkOqPH1oHG9v2poYeVBuDLPdk3ZygML1FV
Z04aITvLlX5poLD/nZt0cdwEib0nJE81FN6/pYpqVgxC8wPdPUJFIf92CJVs
b4aLTCjcFOE1WcQ1w4JS+FsppLD7327Gjy3EclEY6sxnvIu/EgoTMnmMq8Qb
lotCn0NbGUcorEcUVhJLz7MZm4wrIbHWYMtYxmtJ47WQePf9r4kV24tULJGK
xJmh74xX7yFxU0clY6dDt/a0C0m8wnHhC1hmGDkxEHWXJPHcbPETXcEgWMpy
dVkeJJYsfK4z9phgIz+/RreRxDy6urGmxQgS4+Qf2TyBkbVxrxIuG2BIm/dc
bCEQZfXJ35r64fFSzuvSTgKnL+nZezv74IK418mzjkBz0Ru5QK6HhCWZ/l8F
gTkscmzfog4mJBaH0EcEyisLY2TlWjjD5h7YkU7gdW5itHS+DarmndOzxQT6
7+TVLfI+wYJnp+r+UQIfzhW0C882gGex8KcLtbwf++Ot7swHAGG+f5A3gYGd
VwPspa/gYJgibWQbgZrFPtEUPxd8s1KqvdkExk2KGgdu5zSs/jOBvoPBo13R
yob/jP9rGw==
                    "]], 
                    
                    LineBox[{{-27., -0.4969973981805521}, {-26., \
-0.4969973987113276}}], 
                    
                    LineBox[{{-26., -0.4969973987113276}, {-25., \
-0.49699739873949356`}}], 
                    
                    LineBox[{{-25., -0.49699739873949356`}, {-24., \
-0.039694395639740726`}}], 
                    
                    LineBox[{{-28., 1.5030026034292536`}, {-27., 
                    1.5030026036688484`}}], 
                    LineBox[CompressedData["
1:eJwl0n1MzHEcB/DrfkUqY60mt8NQ1tPE2s739/td+35HOHchhaUj9GB1WQ+n
1sNCNianhZwi0kzlqZ1c1K2oT5HTA9GZ1K266UGm3ajDyVXq7r33Z5+9/vv8
8VkdnRwWx+VwOOvnZn7bIgTHMyg9xMWMc2PjVLcnWYj0+1JwtNuMU8KrvIQj
LCj9T/AUmr+4q/Nj3OePLGjOfl/2unEKl7wfSDrRwkJzoOS8+8g/rItqJ4tV
LDyjC+Mz/aZxTkaxvqKYhctF0GC8MoMLedtw0GkWfL0SidCFQzxEnxJ1sSzk
PvymVwxyiBNHdDRexIJYL90w1GJHbou/xE5sYuFN9M/ZdCGXHPH9oGtcx0K3
k3pnwz0uCS1zU711Y0GmK11eY0+RxAdVkyu5LOQ/fxpzKJwiatGNcrWRAeHr
3371Vynie7IP8voYyPwRI29rpUjnthTRnVYGCGsRXPxGkdKKSNbymIGiyqas
2RmKHLOGgQ+pdcy6Bfbkb/nuqfLdDOwKbbC6YAjNlYGMmkarPdfMh4GQm81W
1x5xnisDHQtfWS0uM+0oM9Hwy9xq9UD/fGjoSNJaLedrU/laGkIS3li9QFrt
IK2mIWvMZts9NAhkNr/K6fGRh9JQGaNrf26hSN3miBAPIQ0lL03ZuQaKCDVj
byN8aHBX+EtSn1Bkf3+eKtCDBte6bPZSMkUc1Mh435EGpXhQ0sejiEhgztdM
IbgVHJkTVsMlq2RaRbQRgXfF984/iEsu7Kz8WjmEgDl+Naj9kR3JMyjvnutD
0HVjz7s2ZzuyJFRtaK1FUGwyrdiYYMHjWWGrhq8h8FTWS9IC/mB+VPphQwaC
ra4mr0OyCVxq4d2pP4hgvH/zgZ7AcZyyb8uwPBhB2t5zTThnGF+PN3ovCkCw
fenh6VGpHrsK+Mkn+Qh6hxyk7Wu7sOFFZ22XC4JTm3qDxhJqse2fEfgPCka7
w8qb/gPodlVp
                    "]], 
                    
                    LineBox[{{-27., 1.5030026036688484`}, {-26., 
                    1.5030026038355417`}}], 
                    
                    LineBox[{{-26., 1.5030026038355417`}, {-25., 
                    1.5030026048402207`}}], 
                    
                    LineBox[{{-25., 
                    1.5030026048402207`}, {-24., -0.039694395639740726`}}], 
                    
                    LineBox[{{-24., -0.039694395639740726`}, {-23., \
-0.03969439514241772}}], 
                    
                    LineBox[{{-23., -0.03969439514241772}, {-22., \
-0.03969439514045668}}], 
                    
                    LineBox[{{-22., -0.03969439514045668}, {-21., \
-1.5141362306974018`}}], 
                    
                    LineBox[{{-22., -0.03969439514045668}, {-21., \
-0.0396943954014533}}], 
                    
                    LineBox[{{-22., -0.03969439514045668}, {-21., 
                    1.4858637698420138`}}], 
                    
                    LineBox[{{-21., -1.5141362306974018`}, {-20., \
-2.514136230992476}}], 
                    LineBox[CompressedData["
1:eJxN0l9IU1EcwPGlqIEphSutJKslKjrbufdMbL0UppCJG0I5UnRlSUUoNR1l
cw6XWmq2ZVbYVHRSZCRmtRUa5/eSC0tSFuSfspymTR9Mc04tJXf2cn+cw+XD
4Ry+D3fP6fy0s148Hi92fbu/nhFDUdUNx+SBJeLY3nVl9Q+GqdcV1FujvKWW
SQzR/eXUOuFgqXAQQ+JAGbUoQsJXvMfAdF+nDtvmvoDBpddRy1ZapSutGPTS
UmqwPVs+ZcDAW9JSK1sSNpSrMSRVllDn0sGg8NVQ0+tSDDqipq4Zj19fGOwb
PRbsdQ8Gjf0atUXhb1b4Y0hL8ZwfbVpYXyycSSqmHv3mHhY6+j3vXw61Xgq1
shA/4+nxzejwyehg4W+djtPDwoqlhtPDQjr/DqeHhThBHaeHhXsT96nNtIeF
Ank9dTLtYeCzxsjpYcCS3sjpYWDHeBOnh4HV3c2cHgb4X0zUKdLJRSRjwJj8
Kw5HLZGR6lpt8EEGZra83BXqcpHAsDzv4AgGvIR+zY0mF5nyUZWI+Ax8fTj2
tivWRXIPP13I8WJAm5VQqHywSKoHAnKezyFwFMRY3/1wErm5oTfEjiDku/FF
p5+T9M6ejK63IQhsuCuRBCyQseLEMnEPgg/tQZmZc/NENp+7780jBKnHbE7V
5t8kvCcyu/4mgpaKi6rRvmmSvVwpHspD0Ca6Kq90/CSrVbceF55A0Gn4aJhT
jhGeRvQq/xCCouN9RyKHh8m5T8osawyCWlcNf+KJjcRp003qnQgyg7rDhe29
5Lx+RHd7EwK8f3ptrZwQz/+M4MKsYOhfahv5D8PPljs=
                    "]], 
                    
                    LineBox[{{-20., -2.514136230992476}, {-19., \
-2.5141362311150304`}}], 
                    
                    LineBox[{{-19., -2.5141362311150304`}, {-18., \
-2.514136231030931}}], 
                    
                    LineBox[{{-18., -2.514136231030931}, {-17., \
-0.05138387823714548}}], 
                    
                    LineBox[{{-21., -0.0396943954014533}, {-20., \
-0.514136230075478}}], 
                    LineBox[CompressedData["
1:eJwlknlI03EYxk3SRNMKkjRMTQ2PsvY7ZiqDrwnmtZTEvKaxvCus1A6lpYmz
zDwyykhEO5bpkDWaWat0b2xumbl5tJmpW0xZlqZkFrWmNreH5+Xlw8vL+/zx
7kw/HZdlaWFhsddYa90sKoRr/KaH4zii5Brbwx9/kpDa01AWT6kVKX+H8D10
JPz9SquUFV5HhbSHOzQqEvRqwjN0phVRjmJ37aUkLLiyh75HdaJNqbMePAEJ
t3dLKZrFbrQ5YOgltJDQZcu/o6dKEGVOywyrIoE236bbNt6HCkrcHWmFJDDg
UIVsRoGUc9dGOSkkVIUohOx9I0h/eY8D4yAJU5VSec4TJVr5l/dLipFQLMta
tZweRdq0mJoZFxKiDB3RCQNjqLV1QCnaQEKCd5Pg2MlxFKmaldMXCWiOIPbv
6plA8rm2oroJAjyYBap7vZMI/7Z+5KqUAG1ecv2HMjU6L1+dpPIJUOfP5MCi
GmWbRIDj1sCUTCcN0nNijSbAjnfAxLVTgUYTEF4fYWJPjzURIO2mm7iLaWc0
AZVEjImjWpYiW5ZwqF00z9WTa8JhVG/eL3CR5bvIcMikh5rYmsG3YvBxoH4x
3zfnwUFb4mDi58np7P5YHHyiCZ6zMS+7q7zrUhAOt5pfc4NK1WiA9c7A8sTB
q5gbKxFNorqOgMQ+exxUnwxNQsEEeh/2tjf9DwZcseCmM2McVUSURkROYcAh
FJTpZ2PoRSdDw5JjAH6xF5wloyi3Kq1qWYjBunYiW1ihRPV97Mj+Rxhk8ljL
Yv0wmq8+Xu5Sg4GbTVK+T7wCXZHoClfOYbBZBDZ5rn0o6Yxhez4Tg4Yy4s2R
eDHKuMEtOkvHILuFSe2dfYXavH5U2wRjMBh3ys/b+iny9h9M9PfFYDjYXfxg
4T763B4+pnXGwEYnSrrolItGGhO3+G7EIMMNHluxGkXmf8bgxILnmCGGK/oP
5htwNg==
                    "]], 
                    
                    LineBox[{{-20., -0.514136230075478}, {-19., \
-0.5141362303010044}}], 
                    
                    LineBox[{{-19., -0.5141362303010044}, {-18., \
-0.5141362302740606}}], 
                    
                    LineBox[{{-18., -0.5141362302740606}, {-17., \
-0.05138387823714548}}], 
                    
                    LineBox[{{-21., 1.4858637698420138`}, {-20., 
                    1.4858637696042094`}}], 
                    LineBox[CompressedData["
1:eJwl0n0s1HEcB/BzvxGl1DyUslqdSk34PdTZwvcbOdIT1qg8hN2VZJ07S3nY
VSYMqTRJ85C4MhlWHmrn4TMtymOOwnnY0C2thrgiLjp3772/++z1x2f7/vHZ
GSb0FbBZLJad5q1OXQ6CQXKehWXLPArkCyoK5hgoF/Ic7DIW0Lhv+W4nJQOZ
jf0yP/FfdL+9TzDQx8BzsffbrBuLiN81ejW6mQFVepXNeMESCglow+srGJCs
XTByV6pRkjhnSJrDgMvUniDZ8WX0yZSHnG8ywOU673KXryA39OVKL5+BanG+
raiehUdUHqHhngxcVpvc/lioh9uOjPNnuQwExUq9Ay3ZOJ/T09u4hwFThaCg
KImN/Z+YVXSaMZC23Scid4yNF6Tlc9vZDDTzLlW7ORBYwssteTVFg8y3NOFp
FIF/xisgVUHDNVezd5XPCIx4UZ5F72mYMX+ZImohcJz0/GF1JQ22nZFtyiEC
X9SGBiv94HTjCQIvlpzWlIY70xe0zpxw1JQGIjtUa86u1dDw6HeY1rUh6zSl
AW/ia+1VqDpWqKJg+ZvOoyOroUAeK9BabNUqsmqloL5FZ4OAKv2AKo27dNb9
h4JDMt0+pzvml8ibgheBep3FgwTmZnyO2OxEQdNK/4PLDQQuyE+U++2jIL5k
cjAok8BnCYmNwxYKhrxo6a0TBA5vaI0sNqRgbLZurmeejdvbLxRWLZKQkRfz
3uc+Gyfa8cB/ioRhD+FWlgUb31PGdT+eIEGuKpodTtXD0zP/OqIVJEQWbzg1
OcnC5pPJH+pqSZhX1hhZ71Ujb5eeM4PZJHTbz7i2z/xB+XPDooHrJARYd3i0
2M2i5TVlO2oCSeCmPHTY3/wDieMdg4VHSeBsk4cLTb6ihZOpB9bYk7BkWBr1
Jk2Bsm7m3k2wImHFWJDQfK8T4Y2Rkm5jEiSyDd/5514j3T2TEDHNGVSfKmv6
DxNaYDM=
                    "]], 
                    
                    LineBox[{{-20., 1.4858637696042094`}, {-19., 
                    1.485863770143227}}], 
                    
                    LineBox[{{-19., 1.485863770143227}, {-18., 
                    1.48586377021232}}], 
                    
                    LineBox[{{-18., 
                    1.48586377021232}, {-17., -0.05138387823714548}}], 
                    
                    LineBox[{{-17., -0.05138387823714548}, {-16., \
-0.0513838787861677}}], 
                    
                    LineBox[{{-16., -0.0513838787861677}, {-15., \
-0.0513838786796432}}], 
                    
                    LineBox[{{-15., -0.0513838786796432}, {-14., \
-1.5187114847219894`}}], 
                    
                    LineBox[{{-15., -0.0513838786796432}, {-14., \
-0.051383878660572285`}}], 
                    
                    LineBox[{{-15., -0.0513838786796432}, {-14., 
                    1.4812885150881252`}}], 
                    
                    LineBox[{{-14., -1.5187114847219894`}, {-13., \
-2.5187114843412237`}}], 
                    LineBox[CompressedData["
1:eJxN0ntIU3EUwPEhNYNZuRybikXJdne3u0wUbaBkxZA2SnJiSCPRgaEoWiku
xB4moSVYkYlUNh8zLWoY0jSKfqemucwHpgwrbJZOnVqWj+Yjo+3snx3O5fKB
+4Mv99492jx1hg+LxQpzXe67Z2RQ7DefZTi6QoYjC3+vTTEAqp/ovWr2g9w+
BhoKfqDZmtbNmlYGdl+fQ6cnFNBwk4Hoiln0QZn7AAMO3Qy6bkmpX1IyID/u
QF9p1iyaQxkI5U2jpxRlPn6rUmgxT6L7et0jhfepdjQe10thfWgcHdJ91rVS
6OB+R8cr3COFDcEYOucN37VS6JkcRd8+4HCtBHZd/IJ+9dI9Evg7OoKekFeO
yysloGVb0X6mNI4pTQJq50c05vTS0BpgQS9iDw1Pkru8emiQjZnRmKOgIazN
42zsoeFZfye6CnvE0B7R7dUjhjhbj1ePGJTDA2gO9ojByrV6vR8K+E7P9zpk
KNuRX0dBemPjqfqYFXIsPKAqu5CCh0lGec0WV++ZvERTAgXjvv7r5W1OEn76
vipJQkEgWAz5sU7C9r976TCbgvjikaiUxj+kIDfzV6ldBDmxccbo6WVSVOJb
K+gWQTlrY+t2zjIJVuqubjwWgd7CTf7GWSKJXe2Pom6JwFh1ofTpzAIRJ9zQ
xSSKYF/IkefTtfOEV7/zXTBfBB1rTauBNgcJeq29M2QTwmInb3i2ZoJENKXa
M4xCIMv0tbfVNqI9wTUNlgjhn1xVvTBnJS2DRb6Ck0JQNQfrBzL7ySbBvU9R
+4WQWjGRpfgMREedk4UFuZ4/b4nc9sJAPP+zEFIuL3z9kNMQ9x+JlYwS
                    
                    "]], 
                    
                    LineBox[{{-13., -2.5187114843412237`}, {-12., \
-2.5187114840805114`}}], 
                    
                    LineBox[{{-12., -2.5187114840805114`}, {-11., \
-2.5187114846038687`}}], 
                    
                    LineBox[{{-11., -2.5187114846038687`}, {-10., 
                    0.03598630043529799}}], 
                    
                    LineBox[{{-14., -0.051383878660572285`}, {-13., \
-0.5187114850758682}}], 
                    LineBox[CompressedData["
1:eJwl0nlI0wEUB/DZOlZmI5JZaaKw+xeWhWlZe1jztlhSISZmcyrmlVqkGWXM
ytusJTlFM6+wZipm1rS9YaKzOcg8mpsj2/AkEy3zj67168v38fj89/54ruKU
0Jg1FArFzTr/9v/sxhx6n/HniSbVRV34cvM0gWJJvJbdIVdVdj2sF2gJlD2w
bPTmSSB74BXjuYJAR3Nr3GpeDTivdvtRCgnMt5OeK+puhQzfeo99cQTWZhw/
+ytfCfltKWYhEJiwo3JbA6MHzsAukZc9gfZVNZOHh/rBOK/I2jzFx4Cglw7H
VnXg1Okaq27n4/qShfCIt0Mwt9ibFFTIxxHDksgmeAQWI/dnekfzsbxCabp3
awz2rrmQKzvIR5EuYO3WS3qoG4+vOE3n40q6XJ3FMEDozL626xYe3i1sYXxI
NMIBoldLf8VD5+0FVIcrE3Cq1mWeVsTDKgY/19/DBE9EvnYXonhIzy2qkzSa
QEuGi417tGHJgyZYDqz+FljNxczBYdJOfanWcvFQwjhpIRkuTtEmSCeoGYlq
BhevNRhJywSz9wWzHKQI9aS7lP/CweTJIdIWr2KzVzEH+69rSNt2RFnLwS1O
3aQHyXvYqH99h/QjafjCzWo2ElRORc4zE2gUkdTGNDaO1bCj+wJNEBSstz3s
Z3XZ7ZYD9RPgHDGwwWcnG90++0mH3hgh5JP7jxcLLDRI4wzyMgPoxujj8h4W
fsqa6SzZPQ4NRyUtXx+y8NCAxrE1+yOMuuy52p7Mwi/Jtmv/3BuFs2kXPWeF
LPwer0jNjB4GM8s/ccmehd9K3RWUzvfgI76qX5pmonNev8ODJB2kczbdmOtm
Yim1wLFZpYErl1ci9GVMFNxvigmJ7YXQEEhXpTGR48VZSTmvht9PLerKk0yU
WWzk7mIlZMumAlL3M1EkTRkuamqH0XW+tCPbmUgrd/Oc9VTA/39mYlj2kuld
4mP4CxuCbGc=
                    "]], 
                    
                    LineBox[{{-13., -0.5187114850758682}, {-12., \
-0.5187114838329868}}], 
                    
                    LineBox[{{-12., -0.5187114838329868}, {-11., \
-0.518711485864997}}], 
                    
                    LineBox[{{-11., -0.518711485864997}, {-10., 
                    0.03598630043529799}}], 
                    
                    LineBox[{{-14., 1.4812885150881252`}, {-13., 
                    1.4812885158103777`}}], 
                    LineBox[CompressedData["
1:eJwl0nsslXEYB/Djfa2amltDVKeL9xznvOeEzHQifr9cVodqUcnlIMU0d7WE
SO6kIUkpC2WEXAqxpfW4z6UlyiWX2nKZLiyM4x7v+e559uzzx7M9fzwHLgfY
eRIsFkt3ozenLEKQnyAznSsX0O6WdonphAAC6YrywFApsn7qYBPSLoCdzpYm
WW6LKCmyqKOiSAB/QkD01XMJDVx7PzweKwBpDPWSureMjG9kRGlJBGAcHpiU
0L2CSuN1a2z0BPDaPX9oVbSG9AuTb4et0eBqCHkJH9ZRc29JX0EbDfuX3H1V
K1nYRy21oSuNhpKuPvDOlMPdg41towE0VMj7p60qEbijJa8w4jQNQhW9EfNb
BD7Xy5M85dOwZ16r2LifwF4KjhOm8jREVh6eG+WSePsVA7HnMB/sxdfrjnuR
GP+oilKp5sOLmu+EbRaJiegfaebJfPBYC25VfU/i8yerg6VufMjae1QhoZvE
nUx4QAQLOkoHSDwrzpkT5/BA8f4hxntagzaKB35aeowtmfBgn6o+Y596dd96
dR4cDJE5w2zygdmkDtw8JXPdu83oADtVtj8qSvkpStGBXViX8fa3lzZKBzzc
hIw/MvdwoaFVm/HZ1HTRUC4X2HX+EtsuEt8dMhMqh3ChSOmC8rEqEodXfS68
ascFl4becb84Emtr2JSM6XHB7Mvs93ELEsfIlxglKHPBxurVcsE0gR+H/xOf
nuNArBrLuCyRwJ6R7LEjgxyYtJx+sqJI4MkdBttONHMgrCeUnR4th7U5wsqw
Nxwwqs9p8v/JwvMq1kuxPhywstXUqHVaQevPDBVNaA44tNVLYlwWkGnn76ns
KQryf4mc0KcZVJ4VkF1cS8EZ71V2v9tfZL8V1D0SKWi05S6qro8hA7VhlzYX
Ci5qDMS5SkeQeWNL0DcRBVv0c6WOZT0oXiXC7pEmBQaDFg/1cROS/TMFDndm
Rjp8n6P/EeFaCw==
                    "]], 
                    
                    LineBox[{{-13., 1.4812885158103777`}, {-12., 
                    1.481288516016236}}], 
                    
                    LineBox[{{-12., 1.481288516016236}, {-11., 
                    1.4812885158052616`}}], 
                    
                    LineBox[{{-11., 1.4812885158052616`}, {-10., 
                    0.03598630043529799}}], 
                    
                    LineBox[{{-10., 0.03598630043529799}, {-9., 
                    0.035986300893285354`}}], 
                    
                    LineBox[{{-9., 0.035986300893285354`}, {-8., 
                    0.03598630094296645}}], 
                    
                    LineBox[{{-8., 0.03598630094296645}, {-7., 
                    0.035986300984518924`}}], 
                    
                    LineBox[{{-7., 0.035986300984518924`}, {-6., 
                    0.035986301016692236`}}], 
                    
                    LineBox[{{-6., 0.035986301016692236`}, {-5., 
                    0.03598630104059483}}], 
                    
                    LineBox[{{-5., 0.03598630104059483}, {-4., 
                    0.03598630105727831}}], 
                    
                    LineBox[{{-4., 0.03598630105727831}, {-3., 
                    0.03598630106844798}}], 
                    
                    LineBox[{{-3., 0.03598630106844798}, {-2., 
                    0.035986301075752306`}}], 
                    
                    LineBox[{{-2., 0.035986301075752306`}, {-1., 
                    0.035986301080100765`}}], 
                    
                    LineBox[{{-1., 0.035986301080100765`}, {
                    2.2035254216632553`*^-18, 0.03598630108203338}}]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-30.4, \
-8.661075571252438*^-12}, {-0.25, 0}, 
                    Offset[8], {1., -1.4438289622985194`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"4\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"4", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-29.4, \
-2.664639453115205*^-11}, {-0.25, 0}, 
                    Offset[8], {1., -2.0350005184509223`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-28.400000000000002`, \
-0.8981984389417202}, {-0.25, 0}, 
                    Offset[8], {1., -1.4969973981782232`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-28.400000000000002`, \
-4.288662053202486*^-11}, {-0.25, 0}, 
                    Offset[8], {1., -1.3500373211781864`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-28.400000000000002`,
                     0.9018015620436376}, {-0.25, 0}, 
                    Offset[8], {1., 1.50300260346404}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-27.4, -2.096997398060146}, \
{-0.25, 0}, 
                    Offset[8], {1., -0.9999999997452278}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-26.31111111111111, \
-1.4969973984537917`}, {-0.25, 0}, 
                    Offset[8], {
                    0.17777777777777715`, -1.394575566138201*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-26.4, -2.496997397729573}, \
{-0.25, 0}, 
                    Offset[8], {1., 3.8110670175228734`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-25.4, -2.4969973976943534`}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.95371274713807*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-24.448973997042668`, \
-1.142959546452231}, {-0.25, 0}, 
                    Offset[8], {1., 2.457303002132761}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-27.4, -0.29819843892764597`}, \
{-0.25, 0}, 
                    Offset[8], {1., -0.49699739813226534`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-26.22222222222222, 
                    0.5030026047115146}, {-0.25, 0}, 
                    Offset[8], {0.1777777777777665, -6.924771867033996*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-26.4, -0.4969973984990174}, \
{-0.25, 0}, 
                    Offset[8], {1., -5.307754791239461*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-25.4, -0.4969973987282271}, \
{-0.25, 0}, 
                    Offset[8], {1., -2.8165969556681603`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-24.4, -0.22261559687964186`}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.4573030030997528}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-27.4, 
                    1.5030026035730106`}, {-0.25, 0}, 
                    Offset[8], {1., 2.3959478845370086`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-26.31111111111111, 
                    2.503002604326257}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777715`, 
                    2.1119017645787608`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-26.4, 
                    1.5030026037688644`}, {-0.25, 0}, 
                    Offset[8], {1., 1.666933258093195*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-25.4, 
                    1.503002604438349}, {-0.25, 0}, 
                    Offset[8], {1., 1.0046790066553513`*^-9}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-24.4, 
                    0.5773844045522439}, {-0.25, 0}, 
                    Offset[8], {1., -1.5426970004799614`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-23.4, -0.03969439534134692}, \
{-0.25, 0}, 
                    Offset[8], {1., 4.973230091631642*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-22.4, -0.039694395141241096`}, \
{-0.25, 0}, 
                    Offset[8], {1., 1.9610355006527413`*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-21.4, -0.9243594964746237}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.474441835556945}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-21.4, -0.03969439529705465}, \
{-0.25, 0}, 
                    Offset[8], {1., -2.6099662014944514`*^-10}], 
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-21.4, 
                    0.8756405038490257}, {-0.25, 0}, 
                    Offset[8], {1., 1.5255581649824705`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-20.4, -2.1141362308744465`}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.0000000002950742`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-19.31111111111111, \
-1.5141362308339463`}, {-0.25, 0}, 
                    Offset[8], {
                    0.17777777777777715`, -9.340705986460307*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-19.4, -2.5141362310660087`}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.2255441106390208`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-18.4, -2.5141362310645707`}, \
{-0.25, 0}, 
                    Offset[8], {1., 8.409939411535561*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-17.449352612161093`, \
-1.1580280810709112`}, {-0.25, 0}, 
                    Offset[8], {1., 2.4627523527937853`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-20.4, -0.3243594962058682}, \
{-0.25, 0}, 
                    Offset[8], {1., -0.47444183467402473`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-19.22222222222222, 
                    0.4858637696860044}, {-0.25, 0}, 
                    Offset[8], {0.1777777777777736, 4.024131028401712*^-11}], 
                    
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-19.4, -0.5141362302107939}, \
{-0.25, 0}, 
                    Offset[8], {1., -2.2552637535255826`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-18.4, -0.5141362302848381}, \
{-0.25, 0}, 
                    Offset[8], {1., 2.6943780540023*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-17.4, -0.23648481905191157`}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.46275235203691517`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-20.4, 
                    1.485863769699331}, {-0.25, 0}, 
                    Offset[8], {1., -2.3780444280419033`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-19.31111111111111, 
                    2.4858637703524735`}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777715`, 
                    1.0367129377186757`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-19.4, 
                    1.48586376992762}, {-0.25, 0}, 
                    Offset[8], {1., 5.390174973030071*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-18.4, 
                    1.4858637701846829`}, {-0.25, 0}, 
                    Offset[8], {1., 6.909317562531214*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-17.4, 
                    0.5635151811426408}, {-0.25, 0}, 
                    Offset[8], {1., -1.5372476484494655`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-16.4, -0.05138387856655881}, \
{-0.25, 0}, 
                    Offset[8], {1., -5.490222235171593*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-15.4, -0.051383878722253}, \
{-0.25, 0}, 
                    Offset[8], {1., 1.0652450449510908`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-14.4, -0.9317804423050509}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.4673276060423461`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-14.4, -0.05138387866820065}, \
{-0.25, 0}, 
                    Offset[8], {1., 1.9070911516649858`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-14.4, 
                    0.8682195575810179}, {-0.25, 0}, 
                    Offset[8], {1., 1.5326723937677684`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-13.4, -2.11871148449353}, \
{-0.25, 0}, 
                    Offset[8], {1., -0.9999999996192344}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-12.31111111111111, \
-1.5187114841243061`}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777715`, 
                    6.113598516321872*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-12.399999999999999`, \
-2.5187114841847964`}, {-0.25, 0}, 
                    Offset[8], {1., 2.6071234060509596`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-11.4, -2.518711484394526}, \
{-0.25, 0}, 
                    Offset[8], {1., -5.233573574514594*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-10.455758242477604`, \
-1.1283382721355815`}, {-0.25, 0}, 
                    Offset[8], {1., 2.5546977850391666`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-13.4, -0.3317804425097498}, \
{-0.25, 0}, 
                    Offset[8], {1., -0.4673276064152959}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-12.222222222222221`,
                     0.4812885158204834}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777537`, 
                    2.994832160041483*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-12.399999999999999`, \
-0.5187114843301394}, {-0.25, 0}, 
                    Offset[8], {1., 1.2428813533915672`*^-9}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-11.4, -0.518711485052193}, \
{-0.25, 0}, 
                    Offset[8], {1., -2.032010226749037*^-9}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-10.4, -0.18589281408482003`}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.5546977863002951}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-13.4, 
                    1.4812885155214768`}, {-0.25, 0}, 
                    Offset[8], {1., 7.222524800454266*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-12.31111111111111, 
                    2.4812885163492204`}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777715`, 
                    1.060036503020001*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-12.399999999999999`,
                     1.4812885159338927`}, {-0.25, 0}, 
                    Offset[8], {1., 2.058582193598113*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-11.4, 
                    1.4812885158896512`}, {-0.25, 0}, 
                    Offset[8], {1., -2.1097434910188895`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-10.4, 
                    0.6141071865832834}, {-0.25, 0}, 
                    Offset[8], {1., -1.4453022153699635`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-9.399999999999999, 
                    0.03598630071009041}, {-0.25, 0}, 
                    Offset[8], {1., 4.5798736331148504`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-8.4, 
                    0.03598630092309401}, {-0.25, 0}, 
                    Offset[8], {1., 4.9681092573194974`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-7.4, 
                    0.035986300967897934`}, {-0.25, 0}, 
                    Offset[8], {1., 4.1552476737205524`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-6.4, 
                    0.03598630100382291}, {-0.25, 0}, 
                    Offset[8], {1., 3.21733126251722*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-5.4, 
                    0.03598630103103379}, {-0.25, 0}, 
                    Offset[8], {1., 2.3902595180924635`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-4.4, 
                    0.03598630105060492}, {-0.25, 0}, 
                    Offset[8], {1., 1.6683480985602017`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, 
                    0.03598630106398011}, {-0.25, 0}, 
                    Offset[8], {1., 1.116966935610364*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     0.03598630107283057}, {-0.25, 0}, 
                    Offset[8], {1., 7.304323812462599*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"3\"", "\"300\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"3", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4, 
                    0.03598630107836138}, {-0.25, 0}, 
                    Offset[8], {1., 4.348459092806678*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"300\"", "\"3\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"300", "3"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-0.4, 
                    0.03598630108126033}, {-0.25, 0}, 
                    Offset[8], {1., 1.9326137912223373`*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"300\"", "\"3\""}, 
                    "RowWithSeparators"], TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"300", "3"}, "\[Cross]"], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-31., 1.8982025386783976`*^-15}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-30., -1.4436391420446515`*^-11}], 
                    Offset[{10, 10}, {-30., -1.4436391420446515`*^-11}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 
                    28}], {-30., -1.4436391420446515`*^-11}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"64", ",", 
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    64, {3}, "PaddingSize" -> {1}, "Input" -> {4, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-29., -3.478639660495574*^-11}], 
                    Offset[{10, 10}, {-29., -3.478639660495574*^-11}]]}, 
                    InsetBox["\"P\"", 
                    Offset[{0, -1}, {-29., -3.478639660495574*^-11}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pol\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pol", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{3}, "PaddingSize" -> {1}, 
                    "Input" -> {64, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-28., -1.4969973982130096`}], 
                    Offset[{12, 12}, {-28., -1.4969973982130096`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-28., -1.4969973982130096`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn1a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn1a", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-28., -4.8286769816737604`*^-11}], 
                    Offset[{12, 12}, {-28., -4.8286769816737604`*^-11}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-28., -4.8286769816737604`*^-11}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn1b\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn1b", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-28., 1.5030026034292536`}], 
                    Offset[{12, 12}, {-28., 1.5030026034292536`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-28., 1.5030026034292536`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn1c\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn1c", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-27., -2.4969973979582374`}], 
                    Offset[{12, 12}, {-27., -2.4969973979582374`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-27., -2.4969973979582374`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn1a1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn1a1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-24., -0.039694395639740726`}], 
                    Offset[{10, 10}, {-24., -0.039694395639740726`}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 
                    14], {-24., -0.039694395639740726`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"trd1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"128", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "300"}], "}"}]}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["trd1", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[
                    Plus, "Inputs" -> {{128, 300}, {128, 300}, {128, 300}, {
                    128, 300}, {128, 300}, {128, 300}}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-26., -2.4969973975771307`}], 
                    Offset[{12, 12}, {-26., -2.4969973975771307`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-26., -2.4969973975771307`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn1a2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn1a2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-25., -2.496997397772502}], 
                    Offset[{10, 10}, {-25., -2.496997397772502}]]}, 
                    InsetBox["\"P\"", 
                    Offset[{0, -1}, {-25., -2.496997397772502}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pol1a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pol1a", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{3}, "PaddingSize" -> {1}, 
                    "Input" -> {128, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-27., -0.4969973981805521}], 
                    Offset[{12, 12}, {-27., -0.4969973981805521}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-27., -0.4969973981805521}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn1b1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn1b1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-26., -0.4969973987113276}], 
                    Offset[{12, 12}, {-26., -0.4969973987113276}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-26., -0.4969973987113276}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn1b2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn1b2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-25., -0.49699739873949356`}], 
                    Offset[{10, 10}, {-25., -0.49699739873949356`}]]}, 
                    InsetBox["\"P\"", 
                    Offset[{0, -1}, {-25., -0.49699739873949356`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pol1b\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "25", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "12", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pol1b", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{25}, "PaddingSize" -> {12}, 
                    "Input" -> {128, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-27., 1.5030026036688484`}], 
                    Offset[{12, 12}, {-27., 1.5030026036688484`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-27., 1.5030026036688484`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn1c1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn1c1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-26., 1.5030026038355417`}], 
                    Offset[{12, 12}, {-26., 1.5030026038355417`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-26., 1.5030026038355417`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn1c2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn1c2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-25., 1.5030026048402207`}], 
                    Offset[{10, 10}, {-25., 1.5030026048402207`}]]}, 
                    InsetBox["\"P\"", 
                    Offset[{0, -1}, {-25., 1.5030026048402207`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pol1c\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "75", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "37", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pol1c", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{75}, "PaddingSize" -> {37}, 
                    "Input" -> {128, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-23., -0.03969439514241772}], 
                    Offset[{10, 10}, {-23., -0.03969439514241772}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzF1s9LG0EUB/CNtpKLtvVmC4q3loooolgqBUUjHnIwNhSiRnZ+iSARkoh4
MeBJCJ7Egyi0Je5MD+JdSr3Yf6A92HMFPVr0YitofOtO7DRaE83s5gtvIXsY
Pnmz83Yb0VSIVRiGkfDDJWTOdMfj5uzQY/gRjiUmxmOUDMSSdJzGO1El3KyD
eg71wNCeoK6FEFqr1rWWEi0+1rbykBDxWcdaedHh81EiMox+ympYKz8l+yjm
C7YNjMc6QHkpyUexmLRtjIhThkRAF0rJvX0YixD07Mz2EWJFdaKU3MvHTKsL
bCeX+4r5rG6Ukjv7oG8vwHbo9E0su4FScicfQvwpPGs/nb6JTcNIVbgFkyna
NzycqYG+fZNn9evY2Hu/mzCZonzhcKoK+vVFntUfGK/Wug2TKcbnY4Rb0naA
0HqD66q/KegjhKdz85eQ9RYvUEpu9THMY7n5S02r1yuUkv/6oG9v7fkLdY4x
H/ESpeRGHzxjb8D1W864Ga9RSq75oG8vwfbLsfGlcqCU/OOLRj88o4Tvyb5t
eDB/C+XKx8Irj+AcfJfnYcej+Vsolz57/oJp25kjfDcSsZ6UGyZj+3ywl0LO
uH02+rG+3CglQfg+WpS2I5gjzaUuCO/BOV31+pW5JW1/4Kz26PjD/YHprK5q
bRnMBvqS501NA2nD2euSC97V87qqoz0i4HvznY6+5XIBTGFFng==
                    
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], 
                    TraditionalForm], {-23., -0.03969439514241772}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"rmp1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["rmp1", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {128, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-22., -0.03969439514045668}], 
                    Offset[{10, 10}, {-22., -0.03969439514045668}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-22., -0.03969439514045668}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"bnl1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Channels\"", "\[Rule]", "128"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["bnl1", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Channels" -> 128, "Input" -> {128, 300}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 18), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-21., -1.5141362306974018`}], 
                    Offset[{12, 12}, {-21., -1.5141362306974018`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-21., -1.5141362306974018`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn2a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn2a", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 19), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-21., -0.0396943954014533}], 
                    Offset[{12, 12}, {-21., -0.0396943954014533}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-21., -0.0396943954014533}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn2b\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn2b", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 20), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-21., 1.4858637698420138`}], 
                    Offset[{12, 12}, {-21., 1.4858637698420138`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]},
                     {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-21., 1.4858637698420138`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn2c\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn2c", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 21), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-20., -2.514136230992476}], 
                    Offset[{12, 12}, {-20., -2.514136230992476}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-20., -2.514136230992476}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn2a1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn2a1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 22), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-17., -0.05138387823714548}], 
                    Offset[{10, 10}, {-17., -0.05138387823714548}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 
                    14], {-17., -0.05138387823714548}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"trd2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}]}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["trd2", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[
                    Plus, "Inputs" -> {{256, 300}, {256, 300}, {256, 300}, {
                    256, 300}, {256, 300}, {256, 300}}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 23), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-19., -2.5141362311150304`}], 
                    Offset[{12, 12}, {-19., -2.5141362311150304`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-19., -2.5141362311150304`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn2a2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn2a2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 24), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-18., -2.514136231030931}], 
                    Offset[{10, 10}, {-18., -2.514136231030931}]]}, 
                    InsetBox["\"P\"", 
                    Offset[{0, -1}, {-18., -2.514136231030931}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pol2a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pol2a", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{3}, "PaddingSize" -> {1}, 
                    "Input" -> {256, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 25), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-20., -0.514136230075478}], 
                    Offset[{12, 12}, {-20., -0.514136230075478}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-20., -0.514136230075478}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn2b1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn2b1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 26), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-19., -0.5141362303010044}], 
                    Offset[{12, 12}, {-19., -0.5141362303010044}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-19., -0.5141362303010044}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn2b2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn2b2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 27), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-18., -0.5141362302740606}], 
                    Offset[{10, 10}, {-18., -0.5141362302740606}]]}, 
                    InsetBox["\"P\"", 
                    Offset[{0, -1}, {-18., -0.5141362302740606}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pol2b\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "25", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "12", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pol2b", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{25}, "PaddingSize" -> {12}, 
                    "Input" -> {256, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 28), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-20., 1.4858637696042094`}], 
                    Offset[{12, 12}, {-20., 1.4858637696042094`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-20., 1.4858637696042094`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn2c1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn2c1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 29), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-19., 1.485863770143227}], 
                    Offset[{12, 12}, {-19., 1.485863770143227}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-19., 1.485863770143227}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn2c2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn2c2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 30), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-18., 1.48586377021232}], 
                    Offset[{10, 10}, {-18., 1.48586377021232}]]}, 
                    InsetBox["\"P\"", 
                    Offset[{0, -1}, {-18., 1.48586377021232}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pol2c\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "75", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "37", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pol2c", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{75}, "PaddingSize" -> {37}, 
                    "Input" -> {256, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 31), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-16., -0.0513838787861677}], 
                    Offset[{10, 10}, {-16., -0.0513838787861677}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzF1s9LG0EUB/CNtpKLtvVmC4q3loooolgqBUUjHnIwNhSiRnZ+iSARkoh4
MeBJCJ7Egyi0Je5MD+JdSr3Yf6A92HMFPVr0YitofOtO7DRaE83s5gtvIXsY
Pnmz83Yb0VSIVRiGkfDDJWTOdMfj5uzQY/gRjiUmxmOUDMSSdJzGO1El3KyD
eg71wNCeoK6FEFqr1rWWEi0+1rbykBDxWcdaedHh81EiMox+ympYKz8l+yjm
C7YNjMc6QHkpyUexmLRtjIhThkRAF0rJvX0YixD07Mz2EWJFdaKU3MvHTKsL
bCeX+4r5rG6Ukjv7oG8vwHbo9E0su4FScicfQvwpPGs/nb6JTcNIVbgFkyna
NzycqYG+fZNn9evY2Hu/mzCZonzhcKoK+vVFntUfGK/Wug2TKcbnY4Rb0naA
0HqD66q/KegjhKdz85eQ9RYvUEpu9THMY7n5S02r1yuUkv/6oG9v7fkLdY4x
H/ESpeRGHzxjb8D1W864Ga9RSq75oG8vwfbLsfGlcqCU/OOLRj88o4Tvyb5t
eDB/C+XKx8Irj+AcfJfnYcej+Vsolz57/oJp25kjfDcSsZ6UGyZj+3ywl0LO
uH02+rG+3CglQfg+WpS2I5gjzaUuCO/BOV31+pW5JW1/4Kz26PjD/YHprK5q
bRnMBvqS501NA2nD2euSC97V87qqoz0i4HvznY6+5XIBTGFFng==
                    
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], 
                    TraditionalForm], {-16., -0.0513838787861677}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"rmp2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["rmp2", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {256, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 32), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-15., -0.0513838786796432}], 
                    Offset[{10, 10}, {-15., -0.0513838786796432}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-15., -0.0513838786796432}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"bnl2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Channels\"", "\[Rule]", "256"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["bnl2", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Channels" -> 256, "Input" -> {256, 300}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 33), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-14., -1.5187114847219894`}], 
                    Offset[{12, 12}, {-14., -1.5187114847219894`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-14., -1.5187114847219894`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn3a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn3a", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 34), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-14., -0.051383878660572285`}], 
                    Offset[{12, 12}, {-14., -0.051383878660572285`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-14., -0.051383878660572285`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn3b\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn3b", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 35), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-14., 1.4812885150881252`}], 
                    Offset[{12, 12}, {-14., 1.4812885150881252`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-14., 1.4812885150881252`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn3c\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn3c", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 36), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-13., -2.5187114843412237`}], 
                    Offset[{12, 12}, {-13., -2.5187114843412237`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-13., -2.5187114843412237`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn3a1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn3a1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 37), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-10., 0.03598630043529799}], 
                    Offset[{10, 10}, {-10., 0.03598630043529799}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 14], {-10., 
                    0.03598630043529799}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"trd3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}]}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["trd3", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[
                    Plus, "Inputs" -> {{512, 300}, {512, 300}, {512, 300}, {
                    512, 300}, {512, 300}, {512, 300}}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 38), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-12., -2.5187114840805114`}], 
                    Offset[{12, 12}, {-12., -2.5187114840805114`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-12., -2.5187114840805114`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn3a2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn3a2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 39), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-11., -2.5187114846038687`}], 
                    Offset[{10, 10}, {-11., -2.5187114846038687`}]]}, 
                    InsetBox["\"P\"", 
                    Offset[{0, -1}, {-11., -2.5187114846038687`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pol3a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pol3a", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{3}, "PaddingSize" -> {1}, 
                    "Input" -> {512, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 40), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-13., -0.5187114850758682}], 
                    Offset[{12, 12}, {-13., -0.5187114850758682}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-13., -0.5187114850758682}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn3b1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn3b1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 41), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-12., -0.5187114838329868}], 
                    Offset[{12, 12}, {-12., -0.5187114838329868}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 
                    1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-12., -0.5187114838329868}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn3b2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn3b2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 42), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-11., -0.518711485864997}], 
                    Offset[{10, 10}, {-11., -0.518711485864997}]]}, 
                    InsetBox["\"P\"", 
                    Offset[{0, -1}, {-11., -0.518711485864997}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pol3b\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "25", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "12", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pol3b", Bold], 
                    Style[
                    HoldForm[
                    PoolingLayer[{25}, "PaddingSize" -> {12}, 
                    "Input" -> {512, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 43), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-13., 1.4812885158103777`}], 
                    Offset[{12, 12}, {-13., 1.4812885158103777`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-13., 1.4812885158103777`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn3c1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn3c1", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 44), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-12., 1.481288516016236}], 
                    Offset[{12, 12}, {-12., 1.481288516016236}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, ImageMargins -> 0., ImagePadding -> 
                    0, ImageSize -> 15, PlotRange -> All, PlotRangePadding -> 
                    0], {-12., 1.481288516016236}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"cnn3c2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["cnn3c2", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 45), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-11., 1.4812885158052616`}], 
                    Offset[{10, 10}, {-11., 1.4812885158052616`}]]}, 
                    InsetBox["\"P\"", 
                    Offset[{0, -1}, {-11., 1.4812885158052616`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pol3c\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "75", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "37", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pol3c", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{75}, "PaddingSize" -> {37}, 
                    "Input" -> {512, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 46), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-9., 0.035986300893285354`}], 
                    Offset[{10, 10}, {-9., 0.035986300893285354`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzF1s9LG0EUB/CNtpKLtvVmC4q3loooolgqBUUjHnIwNhSiRnZ+iSARkoh4
MeBJCJ7Egyi0Je5MD+JdSr3Yf6A92HMFPVr0YitofOtO7DRaE83s5gtvIXsY
Pnmz83Yb0VSIVRiGkfDDJWTOdMfj5uzQY/gRjiUmxmOUDMSSdJzGO1El3KyD
eg71wNCeoK6FEFqr1rWWEi0+1rbykBDxWcdaedHh81EiMox+ympYKz8l+yjm
C7YNjMc6QHkpyUexmLRtjIhThkRAF0rJvX0YixD07Mz2EWJFdaKU3MvHTKsL
bCeX+4r5rG6Ukjv7oG8vwHbo9E0su4FScicfQvwpPGs/nb6JTcNIVbgFkyna
NzycqYG+fZNn9evY2Hu/mzCZonzhcKoK+vVFntUfGK/Wug2TKcbnY4Rb0naA
0HqD66q/KegjhKdz85eQ9RYvUEpu9THMY7n5S02r1yuUkv/6oG9v7fkLdY4x
H/ESpeRGHzxjb8D1W864Ga9RSq75oG8vwfbLsfGlcqCU/OOLRj88o4Tvyb5t
eDB/C+XKx8Irj+AcfJfnYcej+Vsolz57/oJp25kjfDcSsZ6UGyZj+3ywl0LO
uH02+rG+3CglQfg+WpS2I5gjzaUuCO/BOV31+pW5JW1/4Kz26PjD/YHprK5q
bRnMBvqS501NA2nD2euSC97V87qqoz0i4HvznY6+5XIBTGFFng==
                    
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-9., 
                    0.035986300893285354`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"rmp3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["rmp3", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {512, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 47), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-8., 0.03598630094296645}], 
                    Offset[{10, 10}, {-8., 0.03598630094296645}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-8., 0.03598630094296645}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"bnl3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Channels\"", "\[Rule]", "512"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["bnl3", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Channels" -> 512, "Input" -> {512, 300}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 48), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-7., 0.035986300984518924`}], 
                    Offset[{10, 10}, {-7., 0.035986300984518924`}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-7., 0.035986300984518924`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dsc2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"256", ",", 
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dsc2", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    256, {3}, "PaddingSize" -> {1}, "Input" -> {512, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 49), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-6., 0.035986301016692236`}], 
                    Offset[{10, 10}, {-6., 0.035986301016692236`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzF1s9LG0EUB/CNtpKLtvVmC4q3loooolgqBUUjHnIwNhSiRnZ+iSARkoh4
MeBJCJ7Egyi0Je5MD+JdSr3Yf6A92HMFPVr0YitofOtO7DRaE83s5gtvIXsY
Pnmz83Yb0VSIVRiGkfDDJWTOdMfj5uzQY/gRjiUmxmOUDMSSdJzGO1El3KyD
eg71wNCeoK6FEFqr1rWWEi0+1rbykBDxWcdaedHh81EiMox+ympYKz8l+yjm
C7YNjMc6QHkpyUexmLRtjIhThkRAF0rJvX0YixD07Mz2EWJFdaKU3MvHTKsL
bCeX+4r5rG6Ukjv7oG8vwHbo9E0su4FScicfQvwpPGs/nb6JTcNIVbgFkyna
NzycqYG+fZNn9evY2Hu/mzCZonzhcKoK+vVFntUfGK/Wug2TKcbnY4Rb0naA
0HqD66q/KegjhKdz85eQ9RYvUEpu9THMY7n5S02r1yuUkv/6oG9v7fkLdY4x
H/ESpeRGHzxjb8D1W864Ga9RSq75oG8vwfbLsfGlcqCU/OOLRj88o4Tvyb5t
eDB/C+XKx8Irj+AcfJfnYcej+Vsolz57/oJp25kjfDcSsZ6UGyZj+3ywl0LO
uH02+rG+3CglQfg+WpS2I5gjzaUuCO/BOV31+pW5JW1/4Kz26PjD/YHprK5q
bRnMBvqS501NA2nD2euSC97V87qqoz0i4HvznY6+5XIBTGFFng==
                    
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-6., 
                    0.035986301016692236`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"drmp2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["drmp2", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {256, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 50), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 0.03598630104059483}], 
                    Offset[{10, 10}, {-5., 0.03598630104059483}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-5., 0.03598630104059483}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dsc4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"64", ",", 
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["dsc4", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    64, {3}, "PaddingSize" -> {1}, "Input" -> {256, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 51), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 0.03598630105727831}], 
                    Offset[{10, 10}, {-4., 0.03598630105727831}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzF1s9LG0EUB/CNtpKLtvVmC4q3loooolgqBUUjHnIwNhSiRnZ+iSARkoh4
MeBJCJ7Egyi0Je5MD+JdSr3Yf6A92HMFPVr0YitofOtO7DRaE83s5gtvIXsY
Pnmz83Yb0VSIVRiGkfDDJWTOdMfj5uzQY/gRjiUmxmOUDMSSdJzGO1El3KyD
eg71wNCeoK6FEFqr1rWWEi0+1rbykBDxWcdaedHh81EiMox+ympYKz8l+yjm
C7YNjMc6QHkpyUexmLRtjIhThkRAF0rJvX0YixD07Mz2EWJFdaKU3MvHTKsL
bCeX+4r5rG6Ukjv7oG8vwHbo9E0su4FScicfQvwpPGs/nb6JTcNIVbgFkyna
NzycqYG+fZNn9evY2Hu/mzCZonzhcKoK+vVFntUfGK/Wug2TKcbnY4Rb0naA
0HqD66q/KegjhKdz85eQ9RYvUEpu9THMY7n5S02r1yuUkv/6oG9v7fkLdY4x
H/ESpeRGHzxjb8D1W864Ga9RSq75oG8vwfbLsfGlcqCU/OOLRj88o4Tvyb5t
eDB/C+XKx8Irj+AcfJfnYcej+Vsolz57/oJp25kjfDcSsZ6UGyZj+3ywl0LO
uH02+rG+3CglQfg+WpS2I5gjzaUuCO/BOV31+pW5JW1/4Kz26PjD/YHprK5q
bRnMBvqS501NA2nD2euSC97V87qqoz0i4HvznY6+5XIBTGFFng==
                    
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-4., 
                    0.03598630105727831}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"drmp4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["drmp4", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {64, 300}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 52), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 0.03598630106844798}], 
                    Offset[{10, 10}, {-3., 0.03598630106844798}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-3., 0.03598630106844798}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pcnn\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"3", ",", 
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pcnn", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    3, {3}, "PaddingSize" -> {1}, "Input" -> {64, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 53), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 0.035986301075752306`}], 
                    Offset[{10, 10}, {-2., 0.035986301075752306`}]]}, 
                    InsetBox["\"T\"", 
                    Offset[{0, -1}, {-2., 0.035986301075752306`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"trsp\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"TransposeLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "300"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["trsp", Bold], 
                    Style[
                    HoldForm[
                    TransposeLayer["Input" -> {3, 300}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 54), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-1., 0.035986301080100765`}], 
                    Offset[{10, 10}, {-1., 0.035986301080100765`}]]}, 
                    InsetBox["\"S\"", 
                    Offset[{0, -1}, {-1., 0.035986301080100765`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"sfmx\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SoftmaxLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"300", ",", "3"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["sfmx", Bold], 
                    Style[
                    HoldForm[
                    SoftmaxLayer["Input" -> {300, 3}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 55), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.2035254216632553`*^-18, 0.03598630108203338}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 56), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[CompressedData["
1:eJxVz11IU3EYBvCjm18hFSJhImhZa4xpNjfd2aegoIQZrC4Kr1S60IREC8GN
UKxVTEEIAkkwwisvyjAvYqUPiQWJU5ZIprVNh2IY04buTMSPPGfnvB44HH48
7/m/z/9c7T3bnXiGYfSH7/8v/1hx6YM9bisjYOJtwXTceGlk9O0n3mbMOUcS
kD0u2ATutt41HI6MxcxeazN8dn0T8+QO/YPKVM7K24jdu88n5qMy8NZD7Sta
8doGhP8N+HjDSXIW5hPdxEYs2X+oPR6fOL9c05AnmUUwu5nYiCSuguw34Enj
TWIWSa29xMXQWTcDUp8iWELrxDq0uZ6urbCc6HKfKkjzRGffmbNfIsJ5Wpjr
PffDWXKh/xU0hHLnd6sGhflCmPu9JNfgoXuaWIutPrd3qsUvzm+//Emswfbq
HLEWzvwusr8QCew7Yg0ecyPEBWixLvyS+uTDsb+xKFkNR2qofqCSE/3o1Ndj
uXxV9qJ6OHaeCntNf7Q2Raz/Bdxq//d7svG1kCsxag+QXAFLa5hYhaj75GxF
b+w+SkTX6r5LVmCnwE5yFeTPdGS/Ep1vSokVkF2m+XlcfxVYkvrkoNxftSw5
C5aSQeIM6JhN4nSoey4GJZ9GbslV4mRkztQSM0jzNxNvjKU0OY78fr2m7q+t
zMQMtR/5ABseMcI=
                    "], 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 20, 20, 24, 24, 24, 24, 20, 24, 20, 24, 24, 20, 
                    24, 24, 20, 20, 20, 24, 24, 24, 24, 20, 24, 20, 24, 24, 
                    20, 24, 24, 20, 20, 20, 24, 24, 24, 24, 20, 24, 20, 24, 
                    24, 20, 24, 24, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
                    8}, NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{28., 28.}, {28., 18.}}, 
                    ImageSize -> {1141., 221.7599931125544}, PlotRangePadding -> 
                    0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], ImageSize -> {1080.33984375, 373.7265625}, 
                    ImageSizeAction -> "Scrollable", 
                    ScrollPosition -> {55.54200513184888, 0.}, 
                    Scrollbars -> {True, False}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "cnn"], 
                    NeuralNetworks`NetPath["Nodes", "pol"], 
                    NeuralNetworks`NetPath["Nodes", "cnn1a"], 
                    NeuralNetworks`NetPath["Nodes", "cnn1b"], 
                    NeuralNetworks`NetPath["Nodes", "cnn1c"], 
                    NeuralNetworks`NetPath["Nodes", "cnn1a1"], 
                    NeuralNetworks`NetPath["Nodes", "trd1"], 
                    NeuralNetworks`NetPath["Nodes", "cnn1a2"], 
                    NeuralNetworks`NetPath["Nodes", "pol1a"], 
                    NeuralNetworks`NetPath["Nodes", "cnn1b1"], 
                    NeuralNetworks`NetPath["Nodes", "cnn1b2"], 
                    NeuralNetworks`NetPath["Nodes", "pol1b"], 
                    NeuralNetworks`NetPath["Nodes", "cnn1c1"], 
                    NeuralNetworks`NetPath["Nodes", "cnn1c2"], 
                    NeuralNetworks`NetPath["Nodes", "pol1c"], 
                    NeuralNetworks`NetPath["Nodes", "rmp1"], 
                    NeuralNetworks`NetPath["Nodes", "bnl1"], 
                    NeuralNetworks`NetPath["Nodes", "cnn2a"], 
                    NeuralNetworks`NetPath["Nodes", "cnn2b"], 
                    NeuralNetworks`NetPath["Nodes", "cnn2c"], 
                    NeuralNetworks`NetPath["Nodes", "cnn2a1"], 
                    NeuralNetworks`NetPath["Nodes", "trd2"], 
                    NeuralNetworks`NetPath["Nodes", "cnn2a2"], 
                    NeuralNetworks`NetPath["Nodes", "pol2a"], 
                    NeuralNetworks`NetPath["Nodes", "cnn2b1"], 
                    NeuralNetworks`NetPath["Nodes", "cnn2b2"], 
                    NeuralNetworks`NetPath["Nodes", "pol2b"], 
                    NeuralNetworks`NetPath["Nodes", "cnn2c1"], 
                    NeuralNetworks`NetPath["Nodes", "cnn2c2"], 
                    NeuralNetworks`NetPath["Nodes", "pol2c"], 
                    NeuralNetworks`NetPath["Nodes", "rmp2"], 
                    NeuralNetworks`NetPath["Nodes", "bnl2"], 
                    NeuralNetworks`NetPath["Nodes", "cnn3a"], 
                    NeuralNetworks`NetPath["Nodes", "cnn3b"], 
                    NeuralNetworks`NetPath["Nodes", "cnn3c"], 
                    NeuralNetworks`NetPath["Nodes", "cnn3a1"], 
                    NeuralNetworks`NetPath["Nodes", "trd3"], 
                    NeuralNetworks`NetPath["Nodes", "cnn3a2"], 
                    NeuralNetworks`NetPath["Nodes", "pol3a"], 
                    NeuralNetworks`NetPath["Nodes", "cnn3b1"], 
                    NeuralNetworks`NetPath["Nodes", "cnn3b2"], 
                    NeuralNetworks`NetPath["Nodes", "pol3b"], 
                    NeuralNetworks`NetPath["Nodes", "cnn3c1"], 
                    NeuralNetworks`NetPath["Nodes", "cnn3c2"], 
                    NeuralNetworks`NetPath["Nodes", "pol3c"], 
                    NeuralNetworks`NetPath["Nodes", "rmp3"], 
                    NeuralNetworks`NetPath["Nodes", "bnl3"], 
                    NeuralNetworks`NetPath["Nodes", "dsc2"], 
                    NeuralNetworks`NetPath["Nodes", "drmp2"], 
                    NeuralNetworks`NetPath["Nodes", "dsc4"], 
                    NeuralNetworks`NetPath["Nodes", "drmp4"], 
                    NeuralNetworks`NetPath["Nodes", "pcnn"], 
                    NeuralNetworks`NetPath["Nodes", "trsp"], 
                    NeuralNetworks`NetPath["Nodes", "sfmx"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 300}, NeuralNetworks`RealT]], 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{300, 3}, NeuralNetworks`RealT]], 
                    Association[
                    "cnn" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 4, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 4, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "pol" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3}, "Stride" -> {1}, 
                    "PaddingSize" -> {1}, "Function" -> Max, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$Channels" -> 64, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "cnn1a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1a_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "1a_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "1a_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_cnn1d_branch_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_cnn1d_branch_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a_plus_shared", "Outputs", "Output"]}], 
                    "cnn1a1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1a1_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a1_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a1_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a1_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a1_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a1_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a1_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a1_plus_shared", "Outputs", "Output"]}], 
                    "cnn1a2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1a2_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a2_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a2_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a2_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a2_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a2_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1a2_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1a2_plus_shared", "Outputs", "Output"]}], 
                    "pol1a" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3}, "Stride" -> {1}, 
                    "PaddingSize" -> {1}, "Function" -> Max, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$Channels" -> 128, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "cnn1b" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1b_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "1b_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "1b_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_cnn1d_branch_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_cnn1d_branch_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b_plus_shared", "Outputs", "Output"]}], 
                    "cnn1b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1b1_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b1_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b1_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b1_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b1_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b1_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b1_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b1_plus_shared", "Outputs", "Output"]}], 
                    "cnn1b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1b2_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b2_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b2_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b2_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b2_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b2_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1b2_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1b2_plus_shared", "Outputs", "Output"]}], 
                    "pol1b" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {25}, "Stride" -> {1}, 
                    "PaddingSize" -> {12}, "Function" -> Max, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {300}, 
                    "$OutputSize" -> {300}, "$MXPoolingConvention" -> "valid",
                     "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "cnn1c" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1c_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "1c_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "1c_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_cnn1d_branch_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_cnn1d_branch_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c_plus_shared", "Outputs", "Output"]}], 
                    "cnn1c1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1c1_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c1_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c1_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c1_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c1_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c1_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c1_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c1_plus_shared", "Outputs", "Output"]}], 
                    "cnn1c2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1c2_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c2_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c2_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c2_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c2_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c2_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "1c2_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "1c2_plus_shared", "Outputs", "Output"]}], 
                    "pol1c" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {75}, "Stride" -> {1}, 
                    "PaddingSize" -> {37}, "Function" -> Max, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {300}, 
                    "$OutputSize" -> {300}, "$MXPoolingConvention" -> "valid",
                     "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "trd1" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "3" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "5" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT], "6" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "rmp1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "bnl1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 128, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {300}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "cnn2a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2a_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "2a_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "2a_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_cnn1d_branch_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_cnn1d_branch_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_plus_shared", "Outputs", "Output"]}], 
                    "cnn2a1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2a1_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a1_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a1_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a1_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a1_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a1_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a1_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a1_plus_shared", "Outputs", "Output"]}], 
                    "cnn2a2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2a2_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a2_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a2_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a2_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a2_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a2_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2a2_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a2_plus_shared", "Outputs", "Output"]}], 
                    "pol2a" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3}, "Stride" -> {1}, 
                    "PaddingSize" -> {1}, "Function" -> Max, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$Channels" -> 256, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "cnn2b" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2b_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "2b_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "2b_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_cnn1d_branch_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_cnn1d_branch_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b_plus_shared", "Outputs", "Output"]}], 
                    "cnn2b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2b1_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b1_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b1_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b1_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b1_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b1_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b1_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus_shared", "Outputs", "Output"]}], 
                    "cnn2b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2b2_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b2_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b2_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b2_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b2_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b2_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2b2_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus_shared", "Outputs", "Output"]}], 
                    "pol2b" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {25}, "Stride" -> {1}, 
                    "PaddingSize" -> {12}, "Function" -> Max, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {300}, 
                    "$OutputSize" -> {300}, "$MXPoolingConvention" -> "valid",
                     "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "cnn2c" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2c_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "2c_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "2c_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_cnn1d_branch_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_cnn1d_branch_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c_plus_shared", "Outputs", "Output"]}], 
                    "cnn2c1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2c1_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c1_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c1_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c1_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c1_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c1_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c1_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c1_plus_shared", "Outputs", "Output"]}], 
                    "cnn2c2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2c2_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c2_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c2_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c2_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c2_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c2_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "2c2_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c2_plus_shared", "Outputs", "Output"]}], 
                    "pol2c" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {75}, "Stride" -> {1}, 
                    "PaddingSize" -> {37}, "Function" -> Max, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {300}, 
                    "$OutputSize" -> {300}, "$MXPoolingConvention" -> "valid",
                     "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "trd2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "3" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "5" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT], "6" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "rmp2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "bnl2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 256, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {300}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "cnn3a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "3a_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "3a_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "3a_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_cnn1d_branch_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_cnn1d_branch_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_plus_shared", "Outputs", "Output"]}], 
                    "cnn3a1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "3a1_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a1_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a1_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a1_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a1_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a1_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a1_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a1_plus_shared", "Outputs", "Output"]}], 
                    "cnn3a2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "3a2_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a2_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a2_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a2_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a2_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a2_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3a2_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a2_plus_shared", "Outputs", "Output"]}], 
                    "pol3a" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3}, "Stride" -> {1}, 
                    "PaddingSize" -> {1}, "Function" -> Max, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$Channels" -> 512, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "cnn3b" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "3b_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "3b_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "3b_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_cnn1d_branch_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_cnn1d_branch_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b_plus_shared", "Outputs", "Output"]}], 
                    "cnn3b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "3b1_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b1_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b1_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b1_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b1_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b1_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b1_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus_shared", "Outputs", "Output"]}], 
                    "cnn3b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "3b2_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b2_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b2_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b2_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b2_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b2_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 25}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {25},
                     "Stride" -> {1}, "PaddingSize" -> {12}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3b2_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus_shared", "Outputs", "Output"]}], 
                    "pol3b" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {25}, "Stride" -> {1}, 
                    "PaddingSize" -> {12}, "Function" -> Max, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {300}, 
                    "$OutputSize" -> {300}, "$MXPoolingConvention" -> "valid",
                     "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "cnn3c" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "3c_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "3c_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "3c_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_cnn1d_branch_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_cnn1d_branch_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c_plus_shared", "Outputs", "Output"]}], 
                    "cnn3c1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "3c1_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c1_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c1_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c1_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c1_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c1_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c1_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c1_plus_shared", "Outputs", "Output"]}], 
                    "cnn3c2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "3c2_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c2_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c2_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c2_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c2_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c2_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 75}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {75},
                     "Stride" -> {1}, "PaddingSize" -> {37}, 
                    "Dilation" -> {1}, "Dimensionality" -> 1, "Interleaving" -> 
                    False, "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "3c2_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_cnn1d_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_ramp_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_cnn1d_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_ramp_branch_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_cnn1d_branch_main_a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_ramp_branch_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_cnn1d_branch_main_a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c2_plus_shared", "Outputs", "Output"]}], 
                    "pol3c" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {75}, "Stride" -> {1}, 
                    "PaddingSize" -> {37}, "Function" -> Max, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {300}, 
                    "$OutputSize" -> {300}, "$MXPoolingConvention" -> "valid",
                     "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "trd3" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "3" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "5" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT], "6" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "rmp3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "bnl3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {300}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "dsc2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 512, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "drmp2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "dsc4" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 256, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "drmp4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "pcnn" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{3, 64, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{3}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 3, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 300}, 
                    NeuralNetworks`RealT]]], "trsp" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{300, 3}, 
                    NeuralNetworks`RealT]]], "sfmx" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{300, 3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{300, 3}, 
                    NeuralNetworks`RealT]]]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4\"", 
                    "\"300\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"300\"", 
                    "\"3\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {181., {80.4169921875, 85.5830078125}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.740040897207549*^9, 3.740040903407151*^9}},
 CellLabel->
  "Out[510]=",ExpressionUUID->"d8b5e43f-5937-4171-b890-02069e41ebea"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1280, 687},
WindowMargins->{{0, Automatic}, {Automatic, -1}},
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 7, \
2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[583, 22, 170, 3, 69, "Chapter",ExpressionUUID->"bf92ff2c-a443-461a-a900-6af6e64d68fe"],
Cell[CellGroupData[{
Cell[778, 29, 184, 3, 67, "Section",ExpressionUUID->"da0ad7c8-ca1a-49f8-8308-01d85a6fa9f2"],
Cell[965, 34, 372, 9, 30, "Input",ExpressionUUID->"c910dcee-6712-4f54-8b8f-e9a81dfe806d"],
Cell[CellGroupData[{
Cell[1362, 47, 437, 11, 30, "Input",ExpressionUUID->"979ea97c-c917-489f-98aa-294638522b1b"],
Cell[1802, 60, 251, 6, 34, "Output",ExpressionUUID->"709a849f-2ade-41ac-b422-37c8520755d8"]
}, Open  ]],
Cell[2068, 69, 414, 9, 30, "Input",ExpressionUUID->"94e1116c-354d-4d39-8016-8825254f27b3"],
Cell[2485, 80, 292, 6, 30, "Input",ExpressionUUID->"c9600c63-2d98-443e-8286-e2eba276180c"],
Cell[2780, 88, 401, 9, 52, "Input",ExpressionUUID->"9d038370-13ee-45dc-836a-ae8119005f4f"],
Cell[3184, 99, 546, 13, 30, "Input",ExpressionUUID->"0655ee3b-dc09-46cc-8dc2-d35b95315ca6"],
Cell[3733, 114, 382, 10, 30, "Input",ExpressionUUID->"443827af-99b0-43db-b818-b5bb361e6792"],
Cell[4118, 126, 1290, 33, 52, "Input",ExpressionUUID->"2f5ced23-00ca-4675-a7f0-d07f3a6e0fdb"],
Cell[CellGroupData[{
Cell[5433, 163, 238, 4, 30, "Input",ExpressionUUID->"717fee32-50d4-4479-b17e-a5452bf86abe"],
Cell[5674, 169, 218, 4, 34, "Output",ExpressionUUID->"2e68c552-e1a2-4927-8ea9-326d8c4343a4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5929, 178, 623, 15, 52, "Input",ExpressionUUID->"dbf52517-3102-4cc7-9cc7-afb465ea2aa9"],
Cell[6555, 195, 5978, 141, 56, "Output",ExpressionUUID->"2da83e90-7c12-48c7-bd91-9c46da0774b7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12570, 341, 882, 23, 30, "Input",ExpressionUUID->"e2954268-117b-4881-a981-45c1d0f61a42"],
Cell[13455, 366, 54969, 1083, 507, "Output",ExpressionUUID->"bb1668d9-4c95-4117-84b7-842b971c7e95"]
}, Open  ]],
Cell[68439, 1452, 589, 17, 52, "Input",ExpressionUUID->"7f8c66ff-87a4-49f6-9328-48ccc34e13b2"],
Cell[69031, 1471, 941, 26, 30, "Input",ExpressionUUID->"029ca8b4-68d9-443a-a0dd-4f0af5524998"],
Cell[CellGroupData[{
Cell[69997, 1501, 339, 9, 30, "Input",ExpressionUUID->"bcda916f-3de9-454b-ae0c-5fd77fef8b48"],
Cell[70339, 1512, 226, 5, 34, "Output",ExpressionUUID->"3b03dacd-1b58-4ca8-807a-235bd48d35a8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[70602, 1522, 215, 4, 30, "Input",ExpressionUUID->"d14d9f52-f1a8-4493-86e0-8729079e6922"],
Cell[70820, 1528, 213, 5, 34, "Output",ExpressionUUID->"2ec50265-d418-4de8-82ad-2eb0fd45f8c3"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[71082, 1539, 170, 3, 53, "Section",ExpressionUUID->"910293dd-5502-4717-91c1-892c790b064c"],
Cell[71255, 1544, 3875, 99, 325, "Input",ExpressionUUID->"7966f479-0c33-4a7b-a85e-4d7f05782701"],
Cell[75133, 1645, 353, 8, 30, "Input",ExpressionUUID->"3d307f31-0383-42bd-a24a-35f1bfe13d5a"]
}, Closed]],
Cell[CellGroupData[{
Cell[75523, 1658, 232, 6, 53, "Section",ExpressionUUID->"32005acb-23f8-4373-8abb-47833a0e8e36"],
Cell[75758, 1666, 615, 15, 52, "Input",ExpressionUUID->"05f40f07-9184-4fc9-a5f0-a79022d84db2"],
Cell[CellGroupData[{
Cell[76398, 1685, 1465, 30, 52, "Input",ExpressionUUID->"ef33f590-0ff0-4dbc-ac8f-bbc23cf5ba44"],
Cell[77866, 1717, 436, 6, 34, "Output",ExpressionUUID->"25cc06ec-8e78-4e87-997d-7470a07fb9a8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[78351, 1729, 171, 3, 67, "Section",ExpressionUUID->"5b0f7b20-bc29-49e6-aa96-a9a6858f1f49"],
Cell[78525, 1734, 488, 12, 30, "Input",ExpressionUUID->"e6ea9acc-c0bd-442a-bd0e-bcb19c5c9024"],
Cell[CellGroupData[{
Cell[79038, 1750, 625, 15, 30, "Input",ExpressionUUID->"0faf8990-419d-4f81-a293-ee9e14dae828"],
Cell[79666, 1767, 318, 4, 34, "Output",ExpressionUUID->"35922237-a8f7-48b7-b9b0-bd48c5a568c7"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[80045, 1778, 156, 3, 69, "Chapter",ExpressionUUID->"48b53a05-b383-4bb3-a4ef-a1d498bfc24d"],
Cell[80204, 1783, 441, 11, 30, "Input",ExpressionUUID->"6289fa20-f269-4c8f-9671-070bd3384d47"],
Cell[80648, 1796, 436, 13, 30, "Input",ExpressionUUID->"07b1fc45-57f2-4b90-904c-dd2c0d2e74f6"],
Cell[CellGroupData[{
Cell[81109, 1813, 226, 4, 30, "Input",ExpressionUUID->"9bc79d75-dabc-4326-a8b3-0eaa46619fdf"],
Cell[81338, 1819, 175, 2, 34, "Output",ExpressionUUID->"d12a007e-6acd-4c3e-8043-72f66cd732fe"]
}, Open  ]],
Cell[CellGroupData[{
Cell[81550, 1826, 163, 3, 67, "Section",ExpressionUUID->"58db24ba-d9cc-43c1-91da-40dd48612ff3"],
Cell[81716, 1831, 154, 3, 30, "Input",ExpressionUUID->"5f3e4da9-c6c1-4dac-85ab-cca9e33bbe9a"],
Cell[81873, 1836, 1465, 39, 115, "Input",ExpressionUUID->"0191d131-cb13-47ea-883a-72360a764080"],
Cell[83341, 1877, 1336, 37, 136, "Input",ExpressionUUID->"faca2876-30cb-4185-af1a-a89977d4d6c4"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[84726, 1920, 173, 3, 98, "Title",ExpressionUUID->"79531f19-5d82-4a89-9ec6-31b97d29f044"],
Cell[CellGroupData[{
Cell[84924, 1927, 160, 3, 67, "Section",ExpressionUUID->"89171e11-dc7f-4ff7-8996-8c87fee60ac6"],
Cell[CellGroupData[{
Cell[85109, 1934, 437, 9, 30, "Input",ExpressionUUID->"85f164a4-acf1-46e1-b40b-b3d96b2f32e6"],
Cell[85549, 1945, 272148, 5044, 454, "Output",ExpressionUUID->"a0f269e3-f4ff-4a15-85ef-3ef0f222a7fc"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[357746, 6995, 213, 4, 67, "Section",ExpressionUUID->"16b03038-7b1b-4c98-b433-066235870d02"],
Cell[357962, 7001, 3139, 71, 346, "Input",ExpressionUUID->"a71ff13b-2d85-4388-8178-a25e917b5851"],
Cell[361104, 7074, 277, 5, 30, "Input",ExpressionUUID->"c58d582d-68c3-415f-a67f-a2cdfdccdff5"]
}, Closed]],
Cell[CellGroupData[{
Cell[361418, 7084, 215, 4, 53, "Section",ExpressionUUID->"eaa6b792-2988-4215-969e-473c6cd2f0a3"],
Cell[361636, 7090, 7482, 157, 913, "Input",ExpressionUUID->"570c76c5-d51c-49f8-a96f-913652e9590a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[369155, 7252, 161, 3, 67, "Section",ExpressionUUID->"3a4a1602-46f3-4a2f-82af-d38c507a14fc"],
Cell[CellGroupData[{
Cell[369341, 7259, 10841, 233, 871, "Input",ExpressionUUID->"c20176ee-0a6c-4938-85c2-384f6225b031"],
Cell[380185, 7494, 321253, 6092, 77, "Output",ExpressionUUID->"19e2faac-8886-42d5-8b23-f580bb6739ce"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[701487, 13592, 151, 3, 67, "Section",ExpressionUUID->"a0e0327b-4f87-41ac-8413-dbf24362d29e"],
Cell[701641, 13597, 262, 5, 30, "Input",ExpressionUUID->"8a87b8db-ada4-44cf-a57e-3dfa0d10cc0d"],
Cell[CellGroupData[{
Cell[701928, 13606, 899, 16, 30, "Input",ExpressionUUID->"2641428d-74d8-41e9-a5ee-b65bfe28dde1"],
Cell[702830, 13624, 565, 9, 34, "Output",ExpressionUUID->"fc505867-5dbf-491b-a552-7291b6c9602f"]
}, Open  ]],
Cell[703410, 13636, 630, 14, 30, "Input",ExpressionUUID->"93daba4e-06d3-4d43-aa9a-05b76834ccc8"],
Cell[CellGroupData[{
Cell[704065, 13654, 313, 6, 30, "Input",ExpressionUUID->"702fadb5-f3cc-4691-8136-9d5356ff12fe"],
Cell[704381, 13662, 625, 14, 37, "Output",ExpressionUUID->"046f8951-e60d-4914-99e1-83f28be4f6a6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[705043, 13681, 506, 10, 30, "Input",ExpressionUUID->"7858fdb8-5a00-4a7f-9e8d-34a1be46e629"],
Cell[705552, 13693, 578979, 10998, 77, "Output",ExpressionUUID->"f3dfe85a-0708-48a6-98ca-429c2f9e6b31"]
}, Open  ]],
Cell[1284546, 24694, 428, 11, 30, "Input",ExpressionUUID->"e6986eb4-151d-4f94-88b2-67131c428778"],
Cell[CellGroupData[{
Cell[1284999, 24709, 1142, 30, 94, "Input",ExpressionUUID->"ab6eb204-e2f8-43a1-be0a-26f5be03a5cc"],
Cell[1286144, 24741, 317, 4, 34, "Output",ExpressionUUID->"757e2623-2f1b-4c8a-8e9d-94faabd9faae"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1286498, 24750, 3598, 85, 640, "Input",ExpressionUUID->"988831a2-4fbd-4c8e-81d4-9db834bb0df0"],
Cell[1290099, 24837, 44746, 785, 216, "Output",ExpressionUUID->"2c17b2de-9359-4880-af60-8b33443f477c"]
}, Open  ]],
Cell[1334860, 25625, 266, 6, 30, "Input",ExpressionUUID->"723af58a-67f0-4df8-b173-79c1e1be6a8f"],
Cell[CellGroupData[{
Cell[1335151, 25635, 1236, 27, 220, "Input",ExpressionUUID->"79692c5e-0bb2-4b17-bcd8-8443be86ffa9"],
Cell[1336390, 25664, 828, 13, 34, "Output",ExpressionUUID->"c4ff9790-6987-41ac-ae09-ddccc2a55128"],
Cell[1337221, 25679, 828, 13, 34, "Output",ExpressionUUID->"88fd5da7-1b25-4607-b058-359409051aa1"]
}, Open  ]],
Cell[1338064, 25695, 510, 13, 52, "Input",ExpressionUUID->"cb95b0a8-9397-4b6c-a8dc-ef5463312aed"],
Cell[CellGroupData[{
Cell[1338599, 25712, 3138, 71, 577, "Input",ExpressionUUID->"ea8f036d-ab0e-4b19-a481-15b38d2fda9a"],
Cell[1341740, 25785, 44069, 774, 216, "Output",ExpressionUUID->"954b5afe-8663-4108-a30c-fd9289f17089"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1385846, 26564, 289, 6, 30, "Input",ExpressionUUID->"df292deb-b90c-4197-83ad-8ecf2cd7991d"],
Cell[1386138, 26572, 890, 24, 34, "Output",ExpressionUUID->"52827d4c-398d-4632-af97-2f8c4d03c5d0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1387065, 26601, 153, 3, 30, "Input",ExpressionUUID->"d17a7cb6-f978-4dcd-9b62-1b9635f4e029"],
Cell[1387221, 26606, 156, 3, 34, "Output",ExpressionUUID->"b1dfaf36-2075-4805-a774-3c42948d03a7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1387414, 26614, 2443, 60, 346, "Input",ExpressionUUID->"4dc525a2-b791-4b1a-a1f4-867a1826c799"],
Cell[1389860, 26676, 20406, 667, 291, "Output",ExpressionUUID->"1af2f872-8dbd-4d11-9065-677c9e59c30c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1410303, 27348, 146, 2, 30, "Input",ExpressionUUID->"e202313a-0463-42bb-880d-d8dd5d817aa2"],
Cell[1410452, 27352, 152, 2, 34, "Output",ExpressionUUID->"20556b18-c840-4630-89c5-04feb4ddb789"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1410641, 27359, 439, 12, 30, "Input",ExpressionUUID->"9e93a026-cd6c-4cd9-be2d-cbfaead352e5"],
Cell[1411083, 27373, 413, 9, 24, "Message",ExpressionUUID->"c91ea4ff-9bcf-4e7c-a32a-925ceda21256"]
}, Open  ]],
Cell[1411511, 27385, 152, 3, 30, "Input",ExpressionUUID->"554af4c0-0227-4401-a144-f993d1cef12f"],
Cell[CellGroupData[{
Cell[1411688, 27392, 483, 12, 30, "Input",ExpressionUUID->"d3d8af9e-d471-4a4e-9bb9-1f3f9a00648f"],
Cell[1412174, 27406, 776, 15, 24, "Message",ExpressionUUID->"6ee57dd1-2a6d-4515-885f-7a4a52be6f9c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1412987, 27426, 363, 10, 30, "Input",ExpressionUUID->"0b2d400f-67a6-45f0-8863-e04f0cb6725f"],
Cell[1413353, 27438, 163, 3, 34, "Output",ExpressionUUID->"27db2a31-b364-4adc-8e85-a43f71569d0b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1413553, 27446, 180, 3, 30, "Input",ExpressionUUID->"75257e8e-6650-4405-9c3b-5e297cd00c41"],
Cell[1413736, 27451, 579027, 11000, 584, "Output",ExpressionUUID->"d8b5e43f-5937-4171-b890-02069e41ebea"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

