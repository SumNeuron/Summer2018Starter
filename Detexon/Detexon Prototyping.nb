(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='WolframDesktop 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       161,          7]
NotebookDataLength[   1068336,      20892]
NotebookOptionsPosition[   1059237,      20731]
NotebookOutlinePosition[   1059591,      20747]
CellTagsIndexPosition[   1059548,      20744]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["One-off file processing", "Chapter",
 CellChangeTimes->{{3.7396348904382067`*^9, 
  3.739634893923623*^9}},ExpressionUUID->"bf92ff2c-a443-461a-a900-\
6af6e64d68fe"],

Cell[CellGroupData[{

Cell["Figure out how to convert python to WL", "Section",
 CellChangeTimes->{{3.7396351639631042`*^9, 
  3.73963517082025*^9}},ExpressionUUID->"da0ad7c8-ca1a-49f8-8308-\
01d85a6fa9f2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ds2", "=", 
   RowBox[{
   "ImportSequenceFile", "[", 
    "\"\</Users/sumner/Programming/Detexon/data/dataset_min_50_max_250_pad_\
300_random_85000/1.tsv\>\"", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.739619546506727*^9, 3.7396195587579536`*^9}},
 CellLabel->
  "In[273]:=",ExpressionUUID->"c910dcee-6712-4f54-8b8f-e9a81dfe806d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ds2", "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "\"\<Output\>\""}], "]"}], "]"}], "//", "Normal"}], "//",
   "Dimensions"}]], "Input",
 CellChangeTimes->{{3.7396268609146214`*^9, 3.7396268621863537`*^9}, {
  3.739626920574071*^9, 3.739626924061284*^9}, {3.739627007055354*^9, 
  3.739627016668964*^9}},
 CellLabel->
  "In[276]:=",ExpressionUUID->"979ea97c-c917-489f-98aa-294638522b1b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"300", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7396268627638063`*^9, {3.739627012444778*^9, 3.739627016971904*^9}},
 CellLabel->
  "Out[276]=",ExpressionUUID->"709a849f-2ade-41ac-b422-37c8520755d8"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "f", "=", 
   "\"\</Users/sumner/Programming/Detexon/data/dataset_min_50_max_250_pad_300_\
random_85000/0.tsv\>\""}], ";"}]], "Input",
 CellChangeTimes->{{3.73945738896647*^9, 3.739457447157413*^9}, {
  3.739612011948556*^9, 3.739612017469262*^9}, {3.7396192404383507`*^9, 
  3.739619247428669*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"94e1116c-354d-4d39-8016-8825254f27b3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"tsv", "=", 
   RowBox[{"Import", "@", "f"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.739457448733182*^9, 3.739457452861515*^9}, {
  3.739457541579014*^9, 3.739457542047839*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"c9600c63-2d98-443e-8286-e2eba276180c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"header", "=", 
   RowBox[{"First", "@", "tsv"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Rest", "@", "tsv"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7394574609330673`*^9, 3.73945747355112*^9}, {
  3.739457543764916*^9, 3.7394575443776827`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"9d038370-13ee-45dc-836a-ae8119005f4f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"fromPythonList", "[", "listString_", "]"}], ":=", 
   RowBox[{"ToExpression", "[", 
    RowBox[{"StringReplace", "[", 
     RowBox[{"listString", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<[\>\"", "\[Rule]", "\"\<{\>\""}], ",", 
        RowBox[{"\"\<]\>\"", "\[Rule]", "\"\<}\>\""}]}], "}"}]}], "]"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7394577418288307`*^9, 3.739457772951035*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"0655ee3b-dc09-46cc-8dc2-d35b95315ca6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ds", "=", 
   RowBox[{"Dataset", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"AssociationThread", "[", 
       RowBox[{"header", ",", "#"}], "]"}], "&"}], "/@", "data"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.739457476016553*^9, 3.739457555696291*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"443827af-99b0-43db-b818-b5bb361e6792"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"imgs", "=", 
   RowBox[{"(*", 
    RowBox[{"Image", "/@"}], "*)"}], 
   RowBox[{"Transpose", "/@", 
    RowBox[{"fromPythonList", "/@", 
     RowBox[{"Normal", "[", 
      RowBox[{"ds", "[", 
       RowBox[{"All", ",", "\"\<img\>\""}], "]"}], "]"}]}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pimgs", "=", 
   RowBox[{"(*", 
    RowBox[{"Image", "/@"}], "*)"}], 
   RowBox[{"Transpose", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"fromPythonList", "/@", 
        RowBox[{"Normal", "[", 
         RowBox[{"ds", "[", 
          RowBox[{"All", ",", "\"\<prob_img\>\""}], "]"}], "]"}]}], ")"}], 
      "[", 
      RowBox[{"[", 
       RowBox[{";;", ",", ";;", ",", "1", ",", ";;"}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.739457557426098*^9, 3.739457653932516*^9}, {
   3.739457688279396*^9, 3.7394576902529173`*^9}, {3.739457786825992*^9, 
   3.739457794730713*^9}, {3.739457865638915*^9, 3.7394578874763947`*^9}, {
   3.7394627911290617`*^9, 3.739462804379106*^9}, 3.739621255951357*^9, {
   3.73962825696251*^9, 3.73962826086405*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"2f5ced23-00ca-4675-a7f0-d07f3a6e0fdb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"pimgs", "//", "First"}], "//", "Dimensions"}]], "Input",
 CellChangeTimes->{{3.7396282314060383`*^9, 3.739628234509327*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"717fee32-50d4-4479-b17e-a5452bf86abe"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"300", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.739628234813092*^9, 3.739628269182461*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"2e68c552-e1a2-4927-8ea9-326d8c4343a4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"imgAssoc", "=", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{
     RowBox[{"Image", "/@", "imgs"}], ",", 
     RowBox[{"Image", "/@", "pimgs"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"imgAssoc", "[", 
  RowBox[{"[", 
   RowBox[{"1", ";;", "4"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.739457988815748*^9, 3.739458062060975*^9}, {
  3.739458114852611*^9, 3.739458147395536*^9}, {3.739612122113371*^9, 
  3.739612144681025*^9}, {3.7396129218228292`*^9, 3.739612931957839*^9}},
 CellLabel->
  "In[211]:=",ExpressionUUID->"dbf52517-3102-4cc7-9cc7-afb465ea2aa9"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJzdWEsKwkAMrSLiNdy7FLfiFfQEFepKEHQh3toj2C7cjJTJ572Z2Ada2pkk
L5nJJO36fDte5k3TPFb937F9Hu739nVaDjdde91tu2Fw0f82sybBe2+7t8qx
9aaIyjeaH2P2tPfR4yyFVM6qX6oXrR/ll3YfofzQ2kmfj11z86U8pDxzcl4/
Uby864aOo3T9tNDKeeOt5cOui9r95PXLen5ozy/v+qDyDFWHvXZQ/Fh8rXIo
P6W8avVHLH5euXQclSc5vVo/rPq9dadUvqDiUqpvY8ux6rNU3nveoeoyez29
+tHy3nMiZ0f6XArt+YS2PwbruqDiWhpReLAwdf+mCm/dR9m31jOvXet4Og/N
t1ZcrGD1B6y4osZL97PeelmbR5T9y44jqy/5l34nRVReKJTKSzam4scX0fnl
8C/1Xwr2e2bt+JTuV3JyrO9Q2v6Yhaj6S31Hq5U3UeuEdV+y8wT9nv07/wN3
7WtT
       "], {{0, 4}, {300, 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Real", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{300, 4},
     PlotRange->{{0, 300}, {0, 4}}], "\[Rule]", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJzt2LEJgDAQQNFTQVzD3lJsxRXiBBeIlSDEQrJ1RjDZQU3hf3D5hJsg6e1h
tlpEzi4dRq/Few1rmy9O92l0edmkGSr5WJwppfRfBQAAAAA8g3ccALyj9P8Z
pbREbz9Da1I=
       "], {{0, 3}, {300, 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Real", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{300, 3},
     PlotRange->{{0, 300}, {0, 3}}]}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJztWEsKwkAMrSLiNdy7FLfiFeoJKtSVINSFeGuPYN0WhkleXjLj54GKnfYl
zbxkMrM+XdvzvGma22r8arv7YRi6x3H5/tN3l922fw8uxs9m1jjhufe9P5pv
yjv99eLXjntjatd73qT87PtYKD1fKGrzl11Pan8/aR1A+a2w8pXKVzRupeP9
K/jHzRe59TVqfWfVj1r1Ums/8i2Ijm9Kb6X6yVp4vPhQXu++xMufqH6KDdSu
t79R8Sidj5+2z5kC9R/dF3mPS59D64LX/qW0jqTnXVI/tXFj6yznl7Z/terF
aj/Fp70unRdUD17nJeh5LNuu1E7UeZJVv+x9nDV+2jrBzsvagea3NF+1ec/W
LeqnV1xY9Q5dN3N86Pvl7EbXq6j81M4DGr+UPbRuW9exHB96XQs0rlb7pXTk
zYfWLenzqJ+s/GX1Yyz/2PpB8y2670P1JLVr1bH0OWs9TvmbG2fXLzQeUjso
WHURnSf9+74A+RJrUw==
       "], {{0, 4}, {300, 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Real", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{300, 4},
     PlotRange->{{0, 300}, {0, 4}}], "\[Rule]", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJzt17EJgDAQQNFTQVzD3lJsxRXiBBeIlSDEQtzaEUxWsAkn/8HlE64PpPeH
22oRObt0OL2WGPVe23wJuk9jyMsmzVAJPnlmSim1XQAAAACwpvQ/yloBwLrS
7yil/+4LD/hrUg==
       "], {{0, 3}, {300, 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Real", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{300, 3},
     PlotRange->{{0, 300}, {0, 3}}]}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJzlWEsKwkAMrSLiNdy7FLfiFeoJKtSVIOhCvLVHsF24KQyZvLzMRH2g0Pkk
mSSTvHZ9urbnedM099Xw13aPw+3WPY/L8aHvLrttP04uht9m1gh47aUVeWDJ
YSGaPdFQyj+Snl+LU63zpPR+xqV5qx6tPV6Imk8sv03nUT+jcqxxLR3/KHUu
CqLcP6kulbIjit7o+WPtEygP8K4rtfgvyz/RwepD0n52//pWf0vQ3jOve1vb
v7X1W+HF29H1Wrne7yNedd27TqDya+dDqbqSCy9+OZVbirdoz4N+D0DlauV/
q3+k93Ctf7R8JFd/bt1Cvyto5afgxffQfEDPIcn1kqfdZ42H9jzWcWs8UX3o
utS+Uv0O1W8Fq+5Z9dbilV51KQX2/WHXc22fQnmFVp72Huf6RQJq57/5Jxds
//wKUD+w5Fr1pPZb44bmKYsns3gTCjZ/Zenz5pvWPsnKX+u4ZGeuPexndhy0
YPcntp2v/RvylGtT
       "], {{0, 4}, {300, 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Real", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{300, 4},
     PlotRange->{{0, 300}, {0, 4}}], "\[Rule]", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJzt1LEJgDAQQNHTgLiGvWWwFVeIE5wQK0GIhbi1I5gMIUryHySfI12K65bd
rbWIHG28nJ5TCHrNTRq8boP16dHE01cCoFj3SCmlefYvvv4HSml5ewcA3sa+
BQAAyMUDqm9o9A==
       "], {{0, 3}, {300, 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Real", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{300, 3},
     PlotRange->{{0, 300}, {0, 3}}]}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJzlWEEKwkAMrCLiN7x7FK/iF+oLKtSTINSD+GufYHsV1kySye4WA1q6zSbZ
bHaa6fZyb6/Lpmkem/Gv7Z6nYehe5/V003e3w76fHq7G327RGOV9/H0/F7uS
fe9zrWj9pdZhjRvNC2pPOz+3X61/a5yonVLr14pUP167uddlzXvqiuqn/KN1
gcadG8e0dkvVMUu067TmRcL/0nnU1ikLL9h2tf7Qeez90+JKatyKW6iw8K42
ie7/asVPaz8dFQe7L7M+R+2z+rxS/ATFHS2uzOXcs6SWft/bj8xlP6Nxwtvn
S+PWuCR91vcQST/Xe55Vz9p5qL+o7wzW/bPiOBpPaRzIvT+sPGvtePUkv+h8
tkS9Z6x1wcIx9vmI5iO1CYvHsupAig/VY/cn3vMSzau882vDr2j/0X3av0qu
PHh5sbfPk/xK41Y/kp6Xv+SSUrj+bcfKM9k8WGsvOg+5+LNVWPWj5RFo3UT1
NalxFj9j1QHq19qXsPmb5Nerh9ph8VcvXrH7ee8+p/19AAS3a1M=
       "], {{0, 4}, {300,
        0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Real", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{300, 4},
     PlotRange->{{0, 300}, {0, 4}}], "\[Rule]", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJzt2DEKgCAUgOFXQXSN9sZoja5gJ3iBTkJgQ3TrjpCeoDYJ/w/0R5wdfP22
G1eLyNHFzei5hKDX2qaDVT+NNl02cQ2VFOqeKf1fAQAAAAAoWe5/OXMA4F3u
d0MppfRrHweha1I=
       "], {{0, 3}, {300, 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Real", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{300, 3},
     PlotRange->{{0, 300}, {0, 3}}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.739458048671489*^9, 3.7394580623475723`*^9}, {
   3.7394581236900473`*^9, 3.739458148549005*^9}, 3.7396120592344227`*^9, {
   3.73961213383698*^9, 3.739612148066909*^9}, 3.739612933184155*^9, 
   3.739618772502844*^9, 3.739621265369721*^9},
 CellLabel->
  "Out[212]=",ExpressionUUID->"2da83e90-7c12-48c7-bd91-9c46da0774b7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ds1", "=", 
  RowBox[{"Dataset", "[", 
   RowBox[{"Association", "@@@", 
    RowBox[{
     RowBox[{"Partition", "[", 
      RowBox[{
       RowBox[{"Riffle", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"\"\<Input\>\"", "\[Rule]", "#"}], "&"}], "/@", "imgs"}], 
         ",", 
         RowBox[{
          RowBox[{
           RowBox[{"\"\<Output\>\"", "\[Rule]", "#"}], "&"}], "/@", 
          "pimgs"}]}], "]"}], ",", 
       RowBox[{"{", "2", "}"}]}], "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"1", ";;", "3"}], "]"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.739619612920856*^9, 3.7396196288975983`*^9}, {
   3.7396198504725018`*^9, 3.7396198624471807`*^9}, 3.739621285327468*^9, {
   3.739628397638845*^9, 3.739628402739608*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"e2954268-117b-4881-a981-45c1d0f61a42"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 3, "Length" -> 3, "InitialType" -> TypeSystem`Vector[
          TypeSystem`Struct[{"Input", "Output"}, {
            TypeSystem`Vector[
             TypeSystem`Vector[
              TypeSystem`Atom[Integer], 300], 4], 
            TypeSystem`Vector[
             TypeSystem`Vector[
              TypeSystem`Atom[Integer], 3], 300]}], 3], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          Association[{All, "Input"} -> 1, {All, "Output"} -> 3], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association["Input" -> TypeSystem`PackageScope`Limited[
                TypeSystem`PackageScope`ColumnShape[
                 TypeSystem`PackageScope`ElidedShape[1]], 4, {
                All, "Input", All}], "Output" -> 
              TypeSystem`PackageScope`Limited[
                TypeSystem`PackageScope`MatrixShape[300, 3], 5, {
                All, "Output", All}]]]], 3, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[362581028], "Type" -> 
        TypeSystem`Vector[
          TypeSystem`Struct[{"Input", "Output"}, {
            TypeSystem`Vector[
             TypeSystem`Vector[
              TypeSystem`Atom[Integer], 300], 4], 
            TypeSystem`Vector[
             TypeSystem`Vector[
              TypeSystem`Atom[Integer], 3], 300]}], 3], "HandleQ" -> True, 
        "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[362581028]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Input\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Input\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{All, "Input"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[All, "Input"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Output\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Output\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{All, "Output"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[All, "Output"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Center, Baseline}], SpanFromLeft, 
               SpanFromLeft}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{1, 
                    Key["Input"], 1}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Input"], 1]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 1, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 1, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 1, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{1, 
                    Key["Input"], 2}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Input"], 2]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 2, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 2, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 2, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{1, 
                    Key["Input"], 3}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Input"], 3]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 3, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 3, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 3, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{1, 
                    Key["Input"], 4}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Input"], 4]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 4, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 4, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 4, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 5, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 5, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"], 5, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Superscript["300 total \:203a ", ""], 
                    Style[
                    Superscript["300 total \:203a ", ""], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{1, 
                    Key["Output"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[1, 
                   Key["Output"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "Output", All}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "Output", All}]], MenuEvaluator -> Automatic],
                     Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-1]& , {All, "Output", All}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-5]& , {All, "Output", All}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Left, Baseline}, Background -> GrayLevel[0.98]],
                SpanFromLeft, SpanFromLeft}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{2, 
                    Key["Input"], 1}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Input"], 1]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 1, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 1, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 1, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{2, 
                    Key["Input"], 2}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Input"], 2]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 2, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 2, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 2, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{2, 
                    Key["Input"], 3}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Input"], 3]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 3, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 3, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 3, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{2, 
                    Key["Input"], 4}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Input"], 4]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 4, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 4, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 4, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 5, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 5, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"], 5, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Superscript["300 total \:203a ", ""], 
                    Style[
                    Superscript["300 total \:203a ", ""], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{2, 
                    Key["Output"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[2, 
                   Key["Output"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "Output", All}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "Output", All}]], MenuEvaluator -> Automatic],
                     Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-1]& , {All, "Output", All}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-5]& , {All, "Output", All}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Left, Baseline}, Background -> GrayLevel[0.98]],
                SpanFromLeft, SpanFromLeft}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{3, 
                    Key["Input"], 1}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Input"], 1]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 1, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 1, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 1, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{3, 
                    Key["Input"], 2}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Input"], 2]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 2, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 2, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 2, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{3, 
                    Key["Input"], 3}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Input"], 3]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 3, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 3, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 3, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 300], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{3, 
                    Key["Input"], 4}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Input"], 4]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 4, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 4, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 4, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 5, 1]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 5, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"], 5, 3]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Superscript["300 total \:203a ", ""], 
                    Style[
                    Superscript["300 total \:203a ", ""], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1236299734][{3, 
                    Key["Output"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
                  GeneralUtilities`Slice[3, 
                   Key["Output"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "Output", All}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "Output", All}]], MenuEvaluator -> Automatic],
                     Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-1]& , {All, "Output", All}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734},
                     TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, \
-5]& , {All, "Output", All}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Left, Baseline}, Background -> GrayLevel[0.98]],
                SpanFromLeft, SpanFromLeft}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1236299734]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1236299734][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {202., {240.634033203125, 246.365966796875}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellChangeTimes->{{3.739628390044372*^9, 3.7396284040790167`*^9}},
 CellLabel->"Out[23]=",ExpressionUUID->"bb1668d9-4c95-4117-84b7-842b971c7e95"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"inDS", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"\"\<Input\>\"", "\[Rule]", "#"}], "&"}], "/@", "imgs"}]}], " ", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"otDs", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"\"\<Output\>\"", "\[Rule]", "#"}], "&"}], "/@", "pimgs"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.739619905376823*^9, 3.739619917992811*^9}, {
  3.7396199528704233`*^9, 3.739619967210762*^9}, {3.7396213029276*^9, 
  3.7396213099733953`*^9}},
 CellLabel->
  "In[213]:=",ExpressionUUID->"7f8c66ff-87a4-49f6-9328-48ccc34e13b2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ds1", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Input\>\"", "\[Rule]", 
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ",", 
       RowBox[{"\"\<Output\>\"", "\[Rule]", 
        RowBox[{"Transpose", "[", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "1"}], "}"}]}], "]"}]}]}], "|>"}], "&"}], "/@", 
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"Riffle", "[", 
       RowBox[{"imgs", ",", "opimgs"}], "]"}], ",", 
      RowBox[{"{", "2", "}"}]}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.739620032044806*^9, 3.73962005547672*^9}, {
  3.739620279696362*^9, 3.739620293406601*^9}, {3.739626369598157*^9, 
  3.7396263785723543`*^9}},
 CellLabel->
  "In[267]:=",ExpressionUUID->"029ca8b4-68d9-443a-a0dd-4f0af5524998"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ds1", "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "\"\<Output\>\""}], "]"}], "]"}], "//", "Normal"}], "//",
   "Dimensions"}]], "Input",
 CellChangeTimes->{{3.7396263810119143`*^9, 3.7396263965323687`*^9}},
 CellLabel->
  "In[269]:=",ExpressionUUID->"bcda916f-3de9-454b-ae0c-5fd77fef8b48"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"300", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{{3.7396263886309547`*^9, 3.739626397227748*^9}},
 CellLabel->
  "Out[269]=",ExpressionUUID->"3b03dacd-1b58-4ca8-807a-235bd48d35a8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"opimgs", "//", "Dimensions"}]], "Input",
 CellChangeTimes->{{3.739626359475814*^9, 3.7396263657130613`*^9}},
 CellLabel->
  "In[266]:=",ExpressionUUID->"d14d9f52-f1a8-4493-86e0-8729079e6922"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1700", ",", "3", ",", "300"}], "}"}]], "Output",
 CellChangeTimes->{3.739626365979505*^9},
 CellLabel->
  "Out[266]=",ExpressionUUID->"2ec50265-d418-4de8-82ad-2eb0fd45f8c3"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Convert file to dataset", "Section",
 CellChangeTimes->{{3.739619252813663*^9, 
  3.7396192578048487`*^9}},ExpressionUUID->"910293dd-5502-4717-91c1-\
892c790b064c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"fromPythonList", "[", "listString_", "]"}], ":=", 
   RowBox[{"ToExpression", "[", 
    RowBox[{"StringReplace", "[", 
     RowBox[{"listString", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<[\>\"", "\[Rule]", "\"\<{\>\""}], ",", 
        RowBox[{"\"\<]\>\"", "\[Rule]", "\"\<}\>\""}]}], "}"}]}], "]"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"pairInputsWithOutputs", "[", 
    RowBox[{"inputs_", ",", "outputs_"}], "]"}], ":=", 
   RowBox[{"Partition", "[", 
    RowBox[{
     RowBox[{"Riffle", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"\"\<Input\>\"", "\[Rule]", "#"}], "&"}], "/@", "inputs"}], 
       ",", 
       RowBox[{
        RowBox[{
         RowBox[{"\"\<Output\>\"", "\[Rule]", "#"}], "&"}], "/@", 
        "outputs"}]}], "]"}], ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ImportSequenceFile", "[", "file_", "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
     "tsv", ",", " ", "header", ",", " ", "data", ",", " ", "ds", ",", " ", 
      "tds", ",", " ", "imgs", ",", " ", "pimgs"}], "\[IndentingNewLine]", 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"tsv", " ", "=", " ", 
      RowBox[{"Import", "[", "file", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"header", " ", "=", " ", 
      RowBox[{"First", "@", "tsv"}]}], ";", " ", 
     RowBox[{"data", " ", "=", " ", 
      RowBox[{"Rest", "@", "tsv"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"ds", "=", 
      RowBox[{"Dataset", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"AssociationThread", "[", 
          RowBox[{"header", ",", "#"}], "]"}], "&"}], "/@", "data"}], "]"}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"imgs", "=", 
      RowBox[{"(*", 
       RowBox[{"Image", "/@"}], "*)"}], 
      RowBox[{"Transpose", "/@", 
       RowBox[{"fromPythonList", "/@", 
        RowBox[{"Normal", "[", 
         RowBox[{"ds", "[", 
          RowBox[{"All", ",", "\"\<img\>\""}], "]"}], "]"}]}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"pimgs", "=", 
      RowBox[{"(*", 
       RowBox[{"Image", "/@"}], "*)"}], 
      RowBox[{"Transpose", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"fromPythonList", "/@", 
           RowBox[{"Normal", "[", 
            RowBox[{"ds", "[", 
             RowBox[{"All", ",", "\"\<prob_img\>\""}], "]"}], "]"}]}], ")"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{";;", ",", ";;", ",", "1", ",", ";;"}], "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"tds", "=", 
      RowBox[{"Dataset", "[", 
       RowBox[{"Association", "@@@", 
        RowBox[{"pairInputsWithOutputs", "[", 
         RowBox[{"imgs", ",", " ", "pimgs"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "tds", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ImportSequenceFiles", "[", "files_", "]"}], ":=", 
  RowBox[{"Dataset", "[", 
   RowBox[{"Join", "@@", 
    RowBox[{"(", 
     RowBox[{"Normal", "/@", 
      RowBox[{"ImportSequenceFile", "/@", "files"}]}], ")"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.739619260397146*^9, 3.7396193745950527`*^9}, {
   3.739619515343655*^9, 3.7396195403515787`*^9}, 3.739619643411511*^9, {
   3.739626485050982*^9, 3.739626485792128*^9}, {3.7396285776169853`*^9, 
   3.73962866913391*^9}, {3.739628781265604*^9, 3.73962878149819*^9}, 
   3.739628812938243*^9, {3.739629071354335*^9, 3.73962907531604*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"7966f479-0c33-4a7b-a85e-4d7f05782701"],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "FileNames", "[", 
   "\"\</Users/sumner/Programming/Detexon/data/dataset_min_50_max_250_pad_300_\
random_85000/*\>\"", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.739627750195121*^9, 3.7396277626895933`*^9}, 
   3.739630693401354*^9},
 CellLabel->"In[11]:=",ExpressionUUID->"3d307f31-0383-42bd-a24a-35f1bfe13d5a"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
By hand combine smaller files into mid files (doing all at once causes crash)\
\
\>", "Section",
 CellChangeTimes->{{3.739634903378018*^9, 
  3.739634916395891*^9}},ExpressionUUID->"32005acb-23f8-4373-8abb-\
47833a0e8e36"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "files", "=", 
   "\"\</Users/sumner/Programming/Detexon/data/dataset_min_50_max_250_pad_300_\
random_85000/*\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dump", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<data\>\"", ",", 
      "\"\<dataset.mx\>\""}], "}"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.739627813342751*^9, 3.739627858355721*^9}, {
  3.739627947937274*^9, 3.73962795798179*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"05f40f07-9184-4fc9-a5f0-a79022d84db2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"sequenceFiles", "=", 
    RowBox[{"ImportSequenceFiles", "@", 
     RowBox[{
      RowBox[{"FileNames", "[", "files", "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"91", ";;", "100"}], "]"}], "]"}]}]}], ";", 
   RowBox[{"Export", "[", 
    RowBox[{
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<data\>\"", ",", 
        "\"\<dataset_part_10.mx\>\""}], "}"}], "]"}], ",", "sequenceFiles"}], 
    "]"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.739628768271924*^9, 3.739628806311833*^9}, {
  3.739629085105618*^9, 3.7396290853837843`*^9}, {3.739629158916264*^9, 
  3.7396291655540037`*^9}, {3.739630679915081*^9, 3.7396307021292543`*^9}, {
  3.73963080834163*^9, 3.739630814969892*^9}, {3.7396308564179296`*^9, 
  3.739630856678904*^9}, {3.739630989404696*^9, 3.7396309981230373`*^9}, {
  3.73963128012605*^9, 3.739631282458541*^9}, {3.739631441521648*^9, 
  3.739631442960726*^9}, {3.73963158455669*^9, 3.739631587636478*^9}, {
  3.7396317478699503`*^9, 3.739631749570644*^9}, {3.739631887865234*^9, 
  3.739631889543125*^9}, {3.739632032997703*^9, 3.739632034331883*^9}, {
  3.739632181585215*^9, 3.739632184911214*^9}, {3.739632389129567*^9, 
  3.7396323911029663`*^9}, {3.73963256145315*^9, 3.739632563108235*^9}, {
  3.739632761759081*^9, 
  3.739632763274246*^9}},ExpressionUUID->"ef33f590-0ff0-4dbc-ac8f-\
bbc23cf5ba44"],

Cell[BoxData["\<\"/Users/sumner/Programming/WSS2018/Detexon/data/dataset_part_\
10.mx\"\>"], "Output",
 CellChangeTimes->{3.739631268951364*^9, 3.739631433627388*^9, 
  3.739631586811386*^9, 3.739631730091275*^9, 3.739631882934045*^9, 
  3.7396320251292067`*^9, 3.739632174634246*^9, 3.7396323663924227`*^9, 
  3.739632555143257*^9, 3.7396327295059967`*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"25cc06ec-8e78-4e87-997d-7470a07fb9a8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Export everything together", "Section",
 CellChangeTimes->{{3.739634922979257*^9, 
  3.739634928499632*^9}},ExpressionUUID->"5b0f7b20-bc29-49e6-aa96-\
a9a6858f1f49"],

Cell[BoxData[
 RowBox[{
  RowBox[{"datasets", "=", 
   RowBox[{"Import", "/@", 
    RowBox[{"FileNames", "[", 
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<data\>\"", ",", 
        "\"\<dataset_part_*.mx\>\""}], "}"}], "]"}], "]"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.739632826556281*^9, 3.7396328456466513`*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"e6ea9acc-c0bd-442a-bd0e-bcb19c5c9024"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<data\>\"", ",", 
      "\"\<processed_data.mx\>\""}], "}"}], "]"}], ",", 
   RowBox[{"Dataset", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"(", 
      RowBox[{"Normal", "/@", "datasets"}], ")"}], "]"}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.739632859722476*^9, 3.739633032409046*^9}, {
   3.739634795283382*^9, 3.739634838096813*^9}, 3.739634955562386*^9},
 CellLabel->"In[59]:=",ExpressionUUID->"0faf8990-419d-4f81-a293-ee9e14dae828"],

Cell[BoxData["\<\"/Users/sumner/Programming/WSS2018/Detexon/data/processed_\
data.mx\"\>"], "Output",
 CellChangeTimes->{{3.739632896570655*^9, 3.739632968339184*^9}, {
   3.739632999096085*^9, 3.739633034051862*^9}, 3.739634867860548*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"35922237-a8f7-48b7-b9b0-bd48c5a568c7"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Test import", "Chapter",
 CellChangeTimes->{{3.739634945645133*^9, 
  3.739634952028709*^9}},ExpressionUUID->"48b53a05-b383-4bb3-a4ef-\
a1d498bfc24d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ds", "=", 
   RowBox[{"Import", "@", 
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<data\>\"", ",", 
       "\"\<processed_data.mx\>\""}], "}"}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7396349584962177`*^9, 3.7396349650286083`*^9}},
 CellLabel->
  "In[124]:=",ExpressionUUID->"6289fa20-f269-4c8f-9671-070bd3384d47"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ds", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"ds", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"Round", "@", 
        RowBox[{"Length", "@", "ds"}]}], ")"}], "*", "0.1"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.739719769159009*^9, 3.7397198034622097`*^9}, {
  3.739720201719784*^9, 
  3.739720209804871*^9}},ExpressionUUID->"07b1fc45-57f2-4b90-904c-\
dd2c0d2e74f6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "@", "ds"}]], "Input",
 CellChangeTimes->{{3.739719806530795*^9, 3.739719808101199*^9}, 
   3.739720205004313*^9},
 CellLabel->"In[54]:=",ExpressionUUID->"9bc79d75-dabc-4326-a8b3-0eaa46619fdf"],

Cell[BoxData["17000"], "Output",
 CellChangeTimes->{3.739719808959174*^9, 3.739720207169908*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"d12a007e-6acd-4c3e-8043-72f66cd732fe"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Partition into sets", "Section",
 CellChangeTimes->{{3.739637482603001*^9, 
  3.73963748622746*^9}},ExpressionUUID->"58db24ba-d9cc-43c1-91da-\
40dd48612ff3"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7397198280797863`*^9, 
  3.739719840914126*^9}},ExpressionUUID->"5f3e4da9-c6c1-4dac-85ab-\
cca9e33bbe9a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ratios", "=", 
   RowBox[{"{", 
    RowBox[{"0.75", ",", "0.2", ",", "0.5"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ratios", "=", 
   RowBox[{"Round", "/@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Length", "[", "ds", "]"}], "ratios"}], ")"}]}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"trainingSet", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"ds", ",", 
     RowBox[{"ratios", "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ";", " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Use", " ", "Complement", " ", "to", " ", "take", " ", "samlpes", " ", 
    "not", " ", "used", " ", "already"}], "*)"}], "\n", 
  RowBox[{"validationSet", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"Complement", "[", 
      RowBox[{"ds", ",", "trainingSet"}], "]"}], ",", 
     RowBox[{"ratios", "[", 
      RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testSet", "=", 
   RowBox[{"Complement", "[", 
    RowBox[{"ds", ",", "validationSet", ",", "trainingSet"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.7396349754660482`*^9, 3.739634979200334*^9}, {
  3.739636773281767*^9, 3.739636773469797*^9}, {3.73963712196141*^9, 
  3.739637185442175*^9}, {3.739637439170919*^9, 3.7396374394756317`*^9}, {
  3.739719842208261*^9, 3.7397198504874372`*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"0191d131-cb13-47ea-883a-72360a764080"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainFile", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<data\>\"", ",", 
      "\"\<1_10_train_set.mx\>\""}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"validFile", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<data\>\"", ",", 
      "\"\<1_10_valid_set.mx\>\""}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testFile", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<data\>\"", ",", 
      "\"\<1_10_test_set.mx\>\""}], "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{"trainFile", ",", "trainingSet"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{"validFile", ",", "validationSet"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{"testFile", ",", "testSet"}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.73963722750133*^9, 3.7396373024200993`*^9}, {
  3.7397198587755013`*^9, 3.7397198928567333`*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"faca2876-30cb-4185-af1a-a89977d4d6c4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Detexon", "Title",
 CellChangeTimes->{{3.739454939580448*^9, 3.739454940393835*^9}, 
   3.739634957483069*^9},ExpressionUUID->"79531f19-5d82-4a89-9ec6-\
31b97d29f044"],

Cell[CellGroupData[{

Cell["Reference Model", "Section",
 CellChangeTimes->{{3.739621200289947*^9, 
  3.739621202251071*^9}},ExpressionUUID->"89171e11-dc7f-4ff7-8996-\
8c87fee60ac6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ademxappReferenceModel", ":=", 
  RowBox[{
  "NetModel", "[", "\"\<Ademxapp Model A1 Trained on Cityscapes Data\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.739461566701833*^9, 3.739461566703929*^9}, 
   3.739462251371645*^9, {3.739618110671913*^9, 3.739618111554132*^9}, {
   3.7396187289915543`*^9, 3.739618736221134*^9}, 
   3.739627220944319*^9},ExpressionUUID->"85f164a4-acf1-46e1-b40b-\
b3d96b2f32e6"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["25", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 3, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 3, 
                    "$GroupNumber" -> 1, "$InputSize" -> {1024, 2048}, 
                    "$OutputSize" -> {1024, 2048}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 1024, 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 1024, 2048}, 
                    NeuralNetworks`RealT]]], "2a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "conv1a" -> 
                    NeuralNetworks`TensorT[{64, 1024, 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {1024, 2048}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 1024, 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 1024, 2048}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 1024, 2048}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 1024, 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 1024, 2048}, 
                    NeuralNetworks`RealT]]], "res2a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    64, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {1024, 2048}, 
                    "$OutputSize" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 1024, 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    64, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {1024, 2048}, 
                    "$OutputSize" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 1024, 2048}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {512, 1024}, 
                    "$OutputSize" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "2a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "conv1a"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_plus", "Outputs", "Output"]}], "2b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2a_plus" -> 
                    NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2b1_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {512, 1024}, 
                    "$OutputSize" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "bn2b1_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {512, 1024}, 
                    "$OutputSize" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "2b1_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "2a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Outputs", "Output"]}], "2b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2b1_plus" -> 
                    NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2b2_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {512, 1024}, 
                    "$OutputSize" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "bn2b2_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {512, 1024}, 
                    "$OutputSize" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "2b2_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Outputs", "Output"]}], "3a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2b2_plus" -> 
                    NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]]], "res3a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    128, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {512, 1024}, 
                    "$OutputSize" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {512, 1024}, 
                    "$OutputSize" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {256, 512}, 
                    "$OutputSize" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "3a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_plus", "Outputs", "Output"]}], "3b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3a_plus" -> 
                    NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3b1_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {256, 512}, 
                    "$OutputSize" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {256, 512}, 
                    "$OutputSize" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "3b1_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "3a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Outputs", "Output"]}], "3b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3b1_plus" -> 
                    NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3b2_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {256, 512}, 
                    "$OutputSize" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {256, 512}, 
                    "$OutputSize" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "3b2_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Outputs", "Output"]}], "4a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3b2_plus" -> 
                    NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]]], "res4a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    256, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {256, 512}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {256, 512}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "4a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a_plus", "Outputs", "Output"]}], "4b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4a_plus" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b1_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "4b1_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Outputs", "Output"]}], "4b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b1_plus" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b2_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "4b2_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Outputs", "Output"]}], "4b3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b2_plus" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b3_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "4b3_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Outputs", "Output"]}], "4b4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b3_plus" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b4_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "4b4_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b3_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b3_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Outputs", "Output"]}], "4b5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b4_plus" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b5_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "4b5_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b4_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b4_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Outputs", "Output"]}], "5a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b5_plus" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res5a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    512, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "bn5a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "5a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b5_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a_plus", "Outputs", "Output"]}], "5b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5a_plus" -> 
                    NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5b1_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    1024, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "bn5b1_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "5b1_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "5a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Outputs", "Output"]}], "5b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5b1_plus" -> 
                    NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5b2_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    1024, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "bn5b2_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "5b2_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Outputs", "Output"]}], "6a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5b2_plus" -> 
                    NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn6a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "res6a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "res6a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{2048, 
                    1024, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]]], "res6a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    1024, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "bn6a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {4, 4}, 
                    "Dilation" -> {4, 4}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "bn6a_branch2b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2_do" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.3, "Method" -> "Dropout"], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{2048, 
                    1024, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]]], "6a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_do", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_do", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a_plus", "Outputs", "Output"]}], "7a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "6a_plus" -> 
                    NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096, 128, 256}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn7a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]]], "res7a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]]], "res7a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{4096, 
                    2048, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 4096, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 2048, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 128, 256}, 
                    NeuralNetworks`RealT]]], "res7a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    2048, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 2048, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "bn7a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{2048, 
                    1024, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {4, 4}, 
                    "Dilation" -> {4, 4}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]]], "bn7a_branch2b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2_do" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{4096, 
                    2048, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 4096, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 2048, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 128, 256}, 
                    NeuralNetworks`RealT]]], "7a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{4096, 128, 256}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 128, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "6a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_do", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_do", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a_plus", "Outputs", "Output"]}], "bn7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    4096, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096, 128, 256}, 
                    NeuralNetworks`RealT]]], "relu7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096, 128, 256}, 
                    NeuralNetworks`RealT]]], "conv6a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 4096, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {12, 12}, 
                    "Dilation" -> {12, 12}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4096, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "conv6a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]]], "linear19" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{19, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{19}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 19, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {12, 12}, 
                    "Dilation" -> {12, 12}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{19, 128, 256}, 
                    NeuralNetworks`RealT]]], "softmax/1" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    TwoWayRule[1, 3], 
                    TwoWayRule[1, 2]}]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{19, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 256, 19}, 
                    NeuralNetworks`RealT]]], "softmax/2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 256, 19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 256, 19}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2a", "Inputs", "conv1a"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Inputs", "2a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Inputs", "2b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Inputs", "2b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Inputs", "3a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Inputs", "3b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Inputs", "3b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Inputs", "4a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Inputs", "4b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Inputs", "4b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Inputs", "4b3_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Inputs", "4b4_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Inputs", "4b5_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Inputs", "5a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Inputs", "5b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Inputs", "5b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Inputs", "6a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax/2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {2048, 1024}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.485, 0.456, 0.406}, 
                    "VarianceImage" -> {0.052441, 0.050176, 0.050625}], 
                    
                    NeuralNetworks`TensorT[{3, 1024, 2048}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 
                    14, 15, 16, 17, 18, 19}, "InputDepth" -> 3, "Dimensions" -> 
                    19, "$Rank" -> 2], 
                    
                    NeuralNetworks`TensorT[{128, 256, 19}, 
                    NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part = Null, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"1024\"", "\"2048\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"1024\"", "\"2048\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"512\"", "\"1024\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"512\"", "\"1024\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"512\"", "\"1024\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"256\"", "\"512\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"256\"", "\"512\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"256\"", "\"512\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4b4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4b5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "12", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "12", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"bn7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "bn7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "bn7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "bn7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv6a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv6a_relu\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv6a_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv6a_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv6a_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"linear19\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"19\"", 
                    "\"128\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "linear19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"softmax/1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax/1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["TransposeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax/1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"256\"", "\"19\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "softmax/1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"softmax/2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax/2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax/2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"256\"", "\"19\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "softmax/2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {351., {204.9169921875, 210.0830078125}},
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.739461599709177*^9, 3.739462429432938*^9, 
  3.7396181591155252`*^9, 3.7396187378192368`*^9},
 CellLabel->"Out[87]=",ExpressionUUID->"a0f269e3-f4ff-4a15-85ef-3ef0f222a7fc"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Simple CNN1D Block", "Section",
 CellChangeTimes->{{3.7396164894082127`*^9, 3.739616491670981*^9}, {
  3.739617073243064*^9, 
  3.73961707691396*^9}},ExpressionUUID->"16b03038-7b1b-4c98-b433-\
066235870d02"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AdemxappResidualCNN1DBlock", "[", 
   RowBox[{"inputDimension_", ",", " ", "name_"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"name", "<>", "\"\<_bnl_shared\>\""}], "\[Rule]", 
       RowBox[{"BatchNormalizationLayer", "[", 
        RowBox[{"\"\<Input\>\"", "\[Rule]", " ", "inputDimension"}], "]"}]}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"name", "<>", "\"\<_ramp_shared\>\""}], "\[Rule]", " ", 
       "Ramp"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"name", "<>", "\"\<_cnn1d_branch_1\>\""}], "\[Rule]", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"2", "*", 
          RowBox[{"First", "@", "inputDimension"}]}], ",", 
         RowBox[{"{", "1", "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"name", "<>", "\"\<_cnn1d_branch_2\>\""}], "\[Rule]", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"2", "*", 
          RowBox[{"First", "@", "inputDimension"}]}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
          RowBox[{"{", "1", "}"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"name", "<>", "\"\<_ramp_branch_2\>\""}], "\[Rule]", 
       RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"name", "<>", "\"\<_cnn1d_branch_2a\>\""}], "\[Rule]", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"2", "*", 
          RowBox[{"First", "@", "inputDimension"}]}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
          RowBox[{"{", "1", "}"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"name", "<>", "\"\<_plus_shared\>\""}], "\[Rule]", 
       RowBox[{"ThreadingLayer", "[", "Plus", "]"}]}]}], 
     "\[IndentingNewLine]", "|>"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"name", "<>", "\"\<_bnl_shared\>\""}], "\[Rule]", 
       RowBox[{
        RowBox[{"name", "<>", " ", "\"\<_ramp_shared\>\""}], "\[Rule]", " ", 
        RowBox[{
         RowBox[{"name", "<>", "\"\<_cnn1d_branch_1\>\""}], "\[Rule]", 
         RowBox[{"name", "<>", "\"\<_plus_shared\>\""}]}]}]}], ",", 
      "\[IndentingNewLine]", " ", 
      RowBox[{
       RowBox[{"name", "<>", "\"\<_ramp_shared\>\""}], "\[Rule]", 
       RowBox[{
        RowBox[{"name", "<>", "\"\<_cnn1d_branch_2\>\""}], "\[Rule]", 
        RowBox[{
         RowBox[{"name", "<>", "\"\<_ramp_branch_2\>\""}], "->", 
         RowBox[{
          RowBox[{"name", "<>", "\"\<_cnn1d_branch_2a\>\""}], "\[Rule]", 
          RowBox[{"name", "<>", "\"\<_plus_shared\>\""}]}]}]}]}]}], 
     "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 CellLabel->"In[34]:=",ExpressionUUID->"a71ff13b-2d85-4388-8178-a25e917b5851"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.739613075309965*^9, 3.73961347144803*^9}, {
   3.739613501763241*^9, 3.7396135249574537`*^9}, {3.73961376903407*^9, 
   3.739613887142661*^9}, 
   3.7396164835790043`*^9},ExpressionUUID->"c58d582d-68c3-415f-a67f-\
a2cdfdccdff5"]
}, Closed]],

Cell[CellGroupData[{

Cell["Complex CNN1D Block", "Section",
 CellChangeTimes->{{3.7396165011605253`*^9, 3.739616502304613*^9}, {
  3.739617077713826*^9, 
  3.739617098266519*^9}},ExpressionUUID->"eaa6b792-2988-4215-969e-\
473c6cd2f0a3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AdemxappResidualCNN1DBlock", "[", 
   RowBox[{"inputDimension_", ",", " ", "name_", ",", " ", "residualBNQ_"}], 
   "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"scale", "=", 
      RowBox[{"If", "[", 
       RowBox[{"residualBNQ", ",", "2", ",", "1"}], "]"}]}], 
     "\[IndentingNewLine]", "}"}], ",", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"residualBranch", "=", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "\[Rule]", 
           RowBox[{"name", "<>", "\"\<_plus_shared\>\""}]}], 
          "\[IndentingNewLine]", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"residualBNBranch", "=", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"name", "<>", "\"\<_ramp_shared\>\""}], "\[Rule]", " ", 
           RowBox[{
            RowBox[{"name", "<>", "\"\<_cnn1d_branch_1\>\""}], "\[Rule]", 
            RowBox[{"name", "<>", "\"\<_plus_shared\>\""}]}]}], 
          "\[IndentingNewLine]", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"mainBranch", " ", "=", " ", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"name", "<>", "\"\<_bnl_shared\>\""}], "\[Rule]", 
            RowBox[{"name", "<>", "\"\<_ramp_shared\>\""}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{"residualBNQ", ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"name", "<>", "\"\<_ramp_shared\>\""}], "\[Rule]", 
              RowBox[{
               RowBox[{"name", "<>", "\"\<_cnn1d_branch_main\>\""}], 
               "\[Rule]", " ", 
               RowBox[{"name", "<>", "\"\<_ramp_branch_main\>\""}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"name", "<>", "\"\<_ramp_shared\>\""}], "\[Rule]", 
              RowBox[{
               RowBox[{"name", "<>", "\"\<_cnn1d_branch_main\>\""}], 
               "\[Rule]", 
               RowBox[{
                RowBox[{"name", "<>", "\"\<_bnl_main\>\""}], "\[Rule]", " ", 
                RowBox[{"name", "<>", "\"\<_ramp_branch_main\>\""}]}]}]}]}], 
            "\[IndentingNewLine]", "]"}], ",", " ", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"name", "<>", "\"\<_ramp_branch_main\>\""}], "->", 
            RowBox[{
             RowBox[{"name", "<>", "\"\<_cnn1d_branch_main_a\>\""}], 
             "\[Rule]", 
             RowBox[{"name", "<>", "\"\<_plus_shared\>\""}]}]}]}], 
          "\[IndentingNewLine]", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"residualBranchLayers", "=", 
         RowBox[{"<|", "|>"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"residualBNBranchLayers", "=", 
         RowBox[{"<|", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"name", "<>", "\"\<_cnn1d_branch_1\>\""}], "\[Rule]", 
           RowBox[{"ConvolutionLayer", "[", 
            RowBox[{
             RowBox[{"scale", "*", 
              RowBox[{"First", "@", "inputDimension"}]}], ",", 
             RowBox[{"{", "1", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
          "|>"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"mainBranchLayers", " ", "=", 
         RowBox[{"<|", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"name", "<>", "\"\<_bnl_shared\>\""}], "\[Rule]", 
            RowBox[{"BatchNormalizationLayer", "[", 
             RowBox[{"\"\<Input\>\"", "\[Rule]", " ", "inputDimension"}], 
             "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"name", "<>", "\"\<_ramp_shared\>\""}], "\[Rule]", " ", 
            "Ramp"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"name", "<>", "\"\<_cnn1d_branch_main\>\""}], "\[Rule]", 
            RowBox[{"ConvolutionLayer", "[", 
             RowBox[{
              RowBox[{"scale", "*", 
               RowBox[{"First", "@", "inputDimension"}]}], ",", 
              RowBox[{"{", "3", "}"}], ",", 
              RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
               RowBox[{"{", "1", "}"}]}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{"residualBNQ", ",", "Nothing", ",", 
             RowBox[{
              RowBox[{"name", "<>", "\"\<_bnl_main\>\""}], "\[Rule]", 
              RowBox[{"BatchNormalizationLayer", "[", "]"}]}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"name", "<>", "\"\<_ramp_branch_main\>\""}], "\[Rule]", 
            RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"name", "<>", "\"\<_cnn1d_branch_main_a\>\""}], "\[Rule]", 
            RowBox[{"ConvolutionLayer", "[", 
             RowBox[{
              RowBox[{"scale", "*", 
               RowBox[{"First", "@", "inputDimension"}]}], ",", 
              RowBox[{"{", "3", "}"}], ",", 
              RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
               RowBox[{"{", "1", "}"}]}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"name", "<>", "\"\<_plus_shared\>\""}], "\[Rule]", 
            RowBox[{"ThreadingLayer", "[", "Plus", "]"}]}]}], 
          "\[IndentingNewLine]", "|>"}]}], ",", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "layers", ",", " ", "connections"}], 
       "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{"residualBNQ", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"layers", "=", 
           RowBox[{"Join", "[", 
            RowBox[{"mainBranchLayers", ",", "residualBNBranchLayers"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"connections", "=", 
           RowBox[{"Join", "[", 
            RowBox[{"mainBranch", ",", "residualBNBranch"}], "]"}]}]}], ",", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"layers", "=", 
           RowBox[{"Join", "[", 
            RowBox[{"mainBranchLayers", ",", "residualBranchLayers"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"connections", "=", 
           RowBox[{"Join", "[", 
            RowBox[{"mainBranch", ",", "residualBranch"}], "]"}]}]}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"NetGraph", "[", 
        RowBox[{"layers", ",", "connections"}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7396157906126347`*^9, 3.739616092429044*^9}, {
  3.739616124544875*^9, 3.739616153298558*^9}, {3.73961622290722*^9, 
  3.739616340877088*^9}, {3.7396166283391314`*^9, 3.7396168499580917`*^9}, {
  3.739616943450281*^9, 3.739617029819158*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"570c76c5-d51c-49f8-a96f-913652e9590a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Net Definition", "Section",
 CellChangeTimes->{{3.739620253340932*^9, 
  3.7396202549410257`*^9}},ExpressionUUID->"3a4a1602-46f3-4a2f-82af-\
d38c507a14fc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"inputDimension", "=", 
     RowBox[{"Dimensions", "@", 
      RowBox[{"First", "@", "imgs"}]}]}], ";"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"net", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"<|", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<conv_1a\>\"", "\[Rule]", 
        RowBox[{"ConvolutionLayer", "[", 
         RowBox[{"64", ",", 
          RowBox[{"{", "3", "}"}], ",", 
          RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
           RowBox[{"{", "1", "}"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<pool_1\>\"", "\[Rule]", 
        RowBox[{"PoolingLayer", "[", 
         RowBox[{
          RowBox[{"{", "3", "}"}], ",", 
          RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
           RowBox[{"{", "1", "}"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_1_upsample\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"64", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_1_upsample\>\"", ",", " ", "True"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_1_res_a\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"128", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_1_res_a\>\"", ",", " ", "False"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_1_res_b\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"128", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_1_res_b\>\"", ",", " ", "False"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<pool_2\>\"", "\[Rule]", 
        RowBox[{"PoolingLayer", "[", 
         RowBox[{
          RowBox[{"{", "3", "}"}], ",", 
          RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
           RowBox[{"{", "1", "}"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_2_upsample\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"128", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_2_upsample\>\"", ",", " ", "True"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_2_res_a\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"256", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_2_res_a\>\"", ",", " ", "False"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_2_res_b\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"256", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_2_res_b\>\"", ",", " ", "False"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<pool_3\>\"", "\[Rule]", 
        RowBox[{"PoolingLayer", "[", 
         RowBox[{
          RowBox[{"{", "3", "}"}], ",", 
          RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
           RowBox[{"{", "1", "}"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_3_upsample\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"256", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_3_upsample\>\"", ",", " ", "True"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_3_res_a\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"512", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_3_res_a\>\"", ",", " ", "False"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_3_res_b\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"512", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_3_res_b\>\"", ",", " ", "False"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_3_res_c\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"512", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_3_res_c\>\"", ",", " ", "False"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_3_res_d\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"512", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_3_res_d\>\"", ",", " ", "False"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_3_res_e\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"512", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_3_res_e\>\"", ",", " ", "False"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<pool_4\>\"", "\[Rule]", 
        RowBox[{"PoolingLayer", "[", 
         RowBox[{
          RowBox[{"{", "3", "}"}], ",", 
          RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
           RowBox[{"{", "1", "}"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_4_upsample\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"512", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_4_upsample\>\"", ",", " ", "True"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_4_res_a\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1024", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_4_res_a\>\"", ",", " ", "False"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<arcb_4_res_b\>\"", "\[Rule]", " ", 
        RowBox[{"AdemxappResidualCNN1DBlock", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1024", ",", " ", "Automatic"}], "}"}], ",", " ", 
          "\"\<arcb_4_res_b\>\"", ",", " ", "False"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<pool_5\>\"", "\[Rule]", 
        RowBox[{"PoolingLayer", "[", 
         RowBox[{
          RowBox[{"{", "3", "}"}], ",", 
          RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
           RowBox[{"{", "1", "}"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<bn_6\>\"", "\[Rule]", 
        RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<relu_6\>\"", "\[Rule]", "Ramp"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<conv_6\>\"", "\[Rule]", 
        RowBox[{"ConvolutionLayer", "[", 
         RowBox[{"512", ",", 
          RowBox[{"{", "3", "}"}], ",", 
          RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
           RowBox[{"{", "1", "}"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<relu_6a\>\"", "\[Rule]", "Ramp"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<conv_6a\>\"", "\[Rule]", 
        RowBox[{"ConvolutionLayer", "[", 
         RowBox[{"3", ",", 
          RowBox[{"{", "3", "}"}], ",", 
          RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
           RowBox[{"{", "1", "}"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<transpose\>\"", "\[Rule]", 
        RowBox[{"TransposeLayer", "[", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<softmax\>\"", "\[Rule]", 
        RowBox[{"SoftmaxLayer", "[", "]"}]}]}], "\[IndentingNewLine]", "|>"}],
      ",", "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<conv_1a\>\"", "\[Rule]", "\"\<pool_1\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<pool_1\>\"", "\[Rule]", " ", 
        RowBox[{"\"\<arcb_1_upsample\>\"", "->", 
         RowBox[{"\"\<arcb_1_res_a\>\"", "->", 
          RowBox[{
          "\"\<arcb_1_res_b\>\"", "\[Rule]", " ", "\"\<pool_2\>\""}]}]}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<pool_2\>\"", "\[Rule]", " ", 
        RowBox[{"\"\<arcb_2_upsample\>\"", "->", 
         RowBox[{"\"\<arcb_2_res_a\>\"", "->", 
          RowBox[{
          "\"\<arcb_2_res_b\>\"", "\[Rule]", " ", "\"\<pool_3\>\""}]}]}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<pool_3\>\"", "\[Rule]", 
        RowBox[{"\"\<arcb_3_upsample\>\"", "->", 
         RowBox[{"\"\<arcb_3_res_a\>\"", "->", 
          RowBox[{"\"\<arcb_3_res_b\>\"", "\[Rule]", 
           RowBox[{"\"\<arcb_3_res_c\>\"", "\[Rule]", 
            RowBox[{"\"\<arcb_3_res_d\>\"", "\[Rule]", 
             RowBox[{
             "\"\<arcb_3_res_e\>\"", "\[Rule]", " ", 
              "\"\<pool_4\>\""}]}]}]}]}]}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<pool_4\>\"", "\[Rule]", 
        RowBox[{"\"\<arcb_4_upsample\>\"", "->", 
         RowBox[{"\"\<arcb_4_res_a\>\"", "->", 
          RowBox[{
          "\"\<arcb_4_res_b\>\"", "\[Rule]", " ", "\"\<pool_5\>\""}]}]}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<pool_5\>\"", "\[Rule]", " ", 
        RowBox[{"\"\<bn_6\>\"", "\[Rule]", 
         RowBox[{"\"\<relu_6\>\"", "\[Rule]", 
          RowBox[{"\"\<conv_6\>\"", "\[Rule]", 
           RowBox[{"\"\<relu_6a\>\"", "\[Rule]", " ", 
            RowBox[{"\"\<conv_6a\>\"", "\[Rule]", 
             RowBox[{
             "\"\<transpose\>\"", "\[Rule]", " ", 
              "\"\<softmax\>\""}]}]}]}]}]}]}]}], "\[IndentingNewLine]", "}"}],
      ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"4", ",", "300"}], "}"}]}]}], "\[IndentingNewLine]", 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7396127490200043`*^9, 3.7396128552543592`*^9}, {
   3.739612911158017*^9, 3.739612914256702*^9}, {3.739612961816225*^9, 
   3.739613052323484*^9}, {3.739617122853778*^9, 3.739617456415779*^9}, {
   3.739617487400838*^9, 3.739617585429929*^9}, {3.739617620702985*^9, 
   3.739617656893656*^9}, {3.739617727993281*^9, 3.739617743224094*^9}, {
   3.7396182107141848`*^9, 3.739618371437944*^9}, {3.7396184034109383`*^9, 
   3.739618519922839*^9}, {3.7396185697579327`*^9, 3.739618583539155*^9}, {
   3.739618620967548*^9, 3.739618709273501*^9}, {3.739619189368452*^9, 
   3.739619192406672*^9}, {3.739626287678411*^9, 3.739626305170714*^9}, 
   3.739627316302485*^9},
 CellLabel->"In[63]:=",ExpressionUUID->"c20176ee-0a6c-4938-85c2-384f6225b031"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.0149], {
                   GrayLevel[0.6], 
                   Thickness[0.03], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"4\"", "\"300\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"300\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["28", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.0149], {
                   GrayLevel[0.6], 
                   Thickness[0.03], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    PaneBox[
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-29., 1.7757378587636622`*^-15}, {-28., 
                    1.7145055188062944`*^-15}}], 
                    
                    LineBox[{{-28., 1.7145055188062944`*^-15}, {-27., 
                    1.6532731788489269`*^-15}}], 
                    LineBox[{{-27., 1.6532731788489269`*^-15}, {-26., 
                    1.592040838891559*^-15}}], 
                    
                    LineBox[{{-26., 1.592040838891559*^-15}, {-25., 
                    1.5308084989341915`*^-15}}], 
                    
                    LineBox[{{-25., 1.5308084989341915`*^-15}, {-24., 
                    1.4695761589768238`*^-15}}], 
                    
                    LineBox[{{-24., 1.4695761589768238`*^-15}, {-23., 
                    1.4083438190194562`*^-15}}], 
                    
                    LineBox[{{-23., 1.4083438190194562`*^-15}, {-22., 
                    1.3471114790620886`*^-15}}], 
                    
                    LineBox[{{-22., 1.3471114790620886`*^-15}, {-21., 
                    1.2858791391047208`*^-15}}], 
                    
                    LineBox[{{-21., 1.2858791391047208`*^-15}, {-20., 
                    1.2246467991473533`*^-15}}], 
                    
                    LineBox[{{-20., 1.2246467991473533`*^-15}, {-19., 
                    1.1634144591899855`*^-15}}], 
                    
                    LineBox[{{-19., 1.1634144591899855`*^-15}, {-18., 
                    1.102182119232618*^-15}}], 
                    
                    LineBox[{{-18., 1.102182119232618*^-15}, {-17., 
                    1.0409497792752501`*^-15}}], 
                    
                    LineBox[{{-17., 1.0409497792752501`*^-15}, {-16., 
                    9.797174393178826*^-16}}], 
                    
                    LineBox[{{-16., 9.797174393178826*^-16}, {-15., 
                    9.18485099360515*^-16}}], 
                    
                    LineBox[{{-15., 9.18485099360515*^-16}, {-14., 
                    8.572527594031472*^-16}}], 
                    
                    LineBox[{{-14., 8.572527594031472*^-16}, {-13., 
                    7.960204194457795*^-16}}], 
                    
                    LineBox[{{-13., 7.960204194457795*^-16}, {-12., 
                    7.347880794884119*^-16}}], 
                    
                    LineBox[{{-12., 7.347880794884119*^-16}, {-11., 
                    6.735557395310443*^-16}}], 
                    
                    LineBox[{{-11., 6.735557395310443*^-16}, {-10., 
                    6.123233995736766*^-16}}], 
                    
                    LineBox[{{-10., 6.123233995736766*^-16}, {-9., 
                    5.51091059616309*^-16}}], 
                    
                    LineBox[{{-9., 5.51091059616309*^-16}, {-8., 
                    4.898587196589413*^-16}}], 
                    LineBox[{{-8., 4.898587196589413*^-16}, {-7., 
                    4.286263797015736*^-16}}], 
                    
                    LineBox[{{-7., 4.286263797015736*^-16}, {-6., 
                    3.6739403974420594`*^-16}}], 
                    
                    LineBox[{{-6., 3.6739403974420594`*^-16}, {-5., 
                    3.061616997868383*^-16}}], 
                    
                    LineBox[{{-5., 3.061616997868383*^-16}, {-4., 
                    2.4492935982947064`*^-16}}], 
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}}], 
                    LineBox[{{-1., 6.123233995736766*^-17}, {0., 0.}}]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-28.400000000000002`, 
                    1.7389984547892415`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736777*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"4\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"4", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-27.4, 
                    1.677766114831874*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-26.4, 
                    1.6165337748745062`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736777*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-25.4, 
                    1.5553014349171384`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-24.4, 
                    1.4940690949597709`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736777*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-23.4, 
                    1.4328367550024033`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-22.4, 
                    1.3716044150450357`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-21.4, 
                    1.310372075087668*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736777*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-20.4, 
                    1.2491397351303004`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-19.4, 
                    1.1879073951729326`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736777*^-17}], 
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-18.4, 
                    1.126675055215565*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-17.4, 
                    1.0654427152581972`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736777*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-16.4, 
                    1.0042103753008295`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-15.4, 
                    9.42978035343462*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-14.4, 
                    8.817456953860943*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736777*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-13.4, 
                    8.205133554287267*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.399999999999999`, 
                    7.59281015471359*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-11.4, 
                    6.980486755139913*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-10.4, 
                    6.368163355566237*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1024\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1024", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-9.399999999999999, 
                    5.755839955992561*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1024\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1024", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-8.4, 
                    5.143516556418883*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1024\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1024", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-7.4, 
                    4.531193156845207*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1024\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1024", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-6.4, 
                    3.9188697572715305`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1024\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1024", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-5.4, 
                    3.3065463576978537`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736762*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1024\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1024", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-4.4, 
                    2.694222958124177*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    2.0818995585505003`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    1.4695761589768238`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736765*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"3\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"3", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    8.572527594031473*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"300\"", "\"3\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"300", "3"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-0.4, 
                    2.4492935982947065`*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"300\"", "\"3\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"300", "3"}, "\[Cross]"], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-29., 1.7757378587636622`*^-15}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-28., 1.7145055188062944`*^-15}], 
                    Offset[{10, 10}, {-28., 1.7145055188062944`*^-15}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    PaneBox[
                    StyleBox["\"\:2217\"", 20, StripOnInput -> False], 
                    ImageSize -> {11, 28}], TraditionalForm]], {-28., 
                    1.7145055188062944`*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"conv_1a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"64", ",", 
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["conv_1a", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    64, {3}, "PaddingSize" -> {1}, "Input" -> {4, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-27., 1.6532731788489269`*^-15}], 
                    Offset[{10, 10}, {-27., 1.6532731788489269`*^-15}]]}, 
                    InsetBox[
                    FormBox["\"P\"", TraditionalForm], 
                    Offset[{0, -1}, {-27., 1.6532731788489269`*^-15}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pool_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pool_1", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{3}, "PaddingSize" -> {1}, 
                    "Input" -> {64, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-26., 1.592040838891559*^-15}], 
                    Offset[{12, 12}, {-26., 1.592040838891559*^-15}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-26., 
                    1.592040838891559*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_1_upsample\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_1_upsample", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-25., 1.5308084989341915`*^-15}], 
                    Offset[{12, 12}, {-25., 1.5308084989341915`*^-15}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-25., 
                    1.5308084989341915`*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_1_res_a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_1_res_a", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-24., 1.4695761589768238`*^-15}], 
                    Offset[{12, 12}, {-24., 1.4695761589768238`*^-15}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-24., 
                    1.4695761589768238`*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_1_res_b\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_1_res_b", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-23., 1.4083438190194562`*^-15}], 
                    Offset[{10, 10}, {-23., 1.4083438190194562`*^-15}]]}, 
                    InsetBox[
                    FormBox["\"P\"", TraditionalForm], 
                    Offset[{0, -1}, {-23., 1.4083438190194562`*^-15}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pool_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pool_2", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{3}, "PaddingSize" -> {1}, 
                    "Input" -> {128, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-22., 1.3471114790620886`*^-15}], 
                    Offset[{12, 12}, {-22., 1.3471114790620886`*^-15}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-22., 
                    1.3471114790620886`*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_2_upsample\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_2_upsample", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-21., 1.2858791391047208`*^-15}], 
                    Offset[{12, 12}, {-21., 1.2858791391047208`*^-15}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-21., 
                    1.2858791391047208`*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_2_res_a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_2_res_a", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-20., 1.2246467991473533`*^-15}], 
                    Offset[{12, 12}, {-20., 1.2246467991473533`*^-15}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-20., 
                    1.2246467991473533`*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_2_res_b\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_2_res_b", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-19., 1.1634144591899855`*^-15}], 
                    Offset[{10, 10}, {-19., 1.1634144591899855`*^-15}]]}, 
                    InsetBox[
                    FormBox["\"P\"", TraditionalForm], 
                    Offset[{0, -1}, {-19., 1.1634144591899855`*^-15}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pool_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pool_3", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{3}, "PaddingSize" -> {1}, 
                    "Input" -> {256, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-18., 1.102182119232618*^-15}], 
                    Offset[{12, 12}, {-18., 1.102182119232618*^-15}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-18., 
                    1.102182119232618*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_3_upsample\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_3_upsample", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-17., 1.0409497792752501`*^-15}], 
                    Offset[{12, 12}, {-17., 1.0409497792752501`*^-15}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-17., 
                    1.0409497792752501`*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_3_res_a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_3_res_a", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-16., 9.797174393178826*^-16}], 
                    Offset[{12, 12}, {-16., 9.797174393178826*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-16., 
                    9.797174393178826*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_3_res_b\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_3_res_b", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-15., 9.18485099360515*^-16}], 
                    Offset[{12, 12}, {-15., 9.18485099360515*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-15., 
                    9.18485099360515*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_3_res_c\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_3_res_c", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-14., 8.572527594031472*^-16}], 
                    Offset[{12, 12}, {-14., 8.572527594031472*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-14., 
                    8.572527594031472*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_3_res_d\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_3_res_d", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-13., 7.960204194457795*^-16}], 
                    Offset[{12, 12}, {-13., 7.960204194457795*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-13., 
                    7.960204194457795*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_3_res_e\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_3_res_e", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-12., 7.347880794884119*^-16}], 
                    Offset[{10, 10}, {-12., 7.347880794884119*^-16}]]}, 
                    InsetBox[
                    FormBox["\"P\"", TraditionalForm], 
                    Offset[{0, -1}, {-12., 7.347880794884119*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pool_4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pool_4", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{3}, "PaddingSize" -> {1}, 
                    "Input" -> {512, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 18), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-11., 6.735557395310443*^-16}], 
                    Offset[{12, 12}, {-11., 6.735557395310443*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-11., 
                    6.735557395310443*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_4_upsample\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_4_upsample", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 19), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-10., 6.123233995736766*^-16}], 
                    Offset[{12, 12}, {-10., 6.123233995736766*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 
                    1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-10., 
                    6.123233995736766*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"arcb_4_res_a\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_4_res_a", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 20), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-9., 5.51091059616309*^-16}], 
                    Offset[{12, 12}, {-9., 5.51091059616309*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 0.,
                     BaseStyle -> GrayLevel[0.4]], {-9., 
                    5.51091059616309*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_4_res_b\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_4_res_b", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 21), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-8., 4.898587196589413*^-16}], 
                    Offset[{10, 10}, {-8., 4.898587196589413*^-16}]]}, 
                    InsetBox[
                    FormBox["\"P\"", TraditionalForm], 
                    Offset[{0, -1}, {-8., 4.898587196589413*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pool_5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1024", ",", "300"}], "}"}]}]}], "]"}], HoldForm],
                     FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pool_5", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{3}, "PaddingSize" -> {1}, 
                    "Input" -> {1024, 300}]], FontFamily -> "Source Code Pro",
                     ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 22), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-7., 4.286263797015736*^-16}], 
                    Offset[{10, 10}, {-7., 4.286263797015736*^-16}]]}, 
                    InsetBox[
                    FormBox["\"BN\"", TraditionalForm], 
                    Offset[{0, -1}, {-7., 4.286263797015736*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"bn_6\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Channels\"", "\[Rule]", "1024"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1024", ",", "300"}], "}"}]}]}], "]"}], HoldForm],
                     FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["bn_6", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Channels" -> 1024, "Input" -> {1024, 300}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 23), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-6., 3.6739403974420594`*^-16}], 
                    Offset[{10, 10}, {-6., 3.6739403974420594`*^-16}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzF1s9LG0EUB/CNtpKLtvVmC4q3loooolgqBUUjHnIwNhSiRnZ+iSARkoh4
MeBJCJ7Egyi0Je5MD+JdSr3Yf6A92HMFPVr0YitofOtO7DRaE83s5gtvIXsY
Pnmz83Yb0VSIVRiGkfDDJWTOdMfj5uzQY/gRjiUmxmOUDMSSdJzGO1El3KyD
eg71wNCeoK6FEFqr1rWWEi0+1rbykBDxWcdaedHh81EiMox+ympYKz8l+yjm
C7YNjMc6QHkpyUexmLRtjIhThkRAF0rJvX0YixD07Mz2EWJFdaKU3MvHTKsL
bCeX+4r5rG6Ukjv7oG8vwHbo9E0su4FScicfQvwpPGs/nb6JTcNIVbgFkyna
NzycqYG+fZNn9evY2Hu/mzCZonzhcKoK+vVFntUfGK/Wug2TKcbnY4Rb0naA
0HqD66q/KegjhKdz85eQ9RYvUEpu9THMY7n5S02r1yuUkv/6oG9v7fkLdY4x
H/ESpeRGHzxjb8D1W864Ga9RSq75oG8vwfbLsfGlcqCU/OOLRj88o4Tvyb5t
eDB/C+XKx8Irj+AcfJfnYcej+Vsolz57/oJp25kjfDcSsZ6UGyZj+3ywl0LO
uH02+rG+3CglQfg+WpS2I5gjzaUuCO/BOV31+pW5JW1/4Kz26PjD/YHprK5q
bRnMBvqS501NA2nD2euSC97V87qqoz0i4HvznY6+5XIBTGFFng==
                    
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-6., 3.6739403974420594`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu_6\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1024", ",", "300"}], "}"}]}]}], "]"}], HoldForm],
                     FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu_6", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {1024, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 24), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 3.061616997868383*^-16}], 
                    Offset[{10, 10}, {-5., 3.061616997868383*^-16}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    PaneBox[
                    StyleBox["\"\:2217\"", 20, StripOnInput -> False], 
                    ImageSize -> {11, 28}], TraditionalForm]], {-5., 
                    3.061616997868383*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"conv_6\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"512", ",", 
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1024", ",", "300"}], "}"}]}]}], "]"}], HoldForm],
                     FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["conv_6", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    512, {3}, "PaddingSize" -> {1}, "Input" -> {1024, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 25), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 2.4492935982947064`*^-16}], 
                    Offset[{10, 10}, {-4., 2.4492935982947064`*^-16}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzF1s9LG0EUB/CNtpKLtvVmC4q3loooolgqBUUjHnIwNhSiRnZ+iSARkoh4
MeBJCJ7Egyi0Je5MD+JdSr3Yf6A92HMFPVr0YitofOtO7DRaE83s5gtvIXsY
Pnmz83Yb0VSIVRiGkfDDJWTOdMfj5uzQY/gRjiUmxmOUDMSSdJzGO1El3KyD
eg71wNCeoK6FEFqr1rWWEi0+1rbykBDxWcdaedHh81EiMox+ympYKz8l+yjm
C7YNjMc6QHkpyUexmLRtjIhThkRAF0rJvX0YixD07Mz2EWJFdaKU3MvHTKsL
bCeX+4r5rG6Ukjv7oG8vwHbo9E0su4FScicfQvwpPGs/nb6JTcNIVbgFkyna
NzycqYG+fZNn9evY2Hu/mzCZonzhcKoK+vVFntUfGK/Wug2TKcbnY4Rb0naA
0HqD66q/KegjhKdz85eQ9RYvUEpu9THMY7n5S02r1yuUkv/6oG9v7fkLdY4x
H/ESpeRGHzxjb8D1W864Ga9RSq75oG8vwfbLsfGlcqCU/OOLRj88o4Tvyb5t
eDB/C+XKx8Irj+AcfJfnYcej+Vsolz57/oJp25kjfDcSsZ6UGyZj+3ywl0LO
uH02+rG+3CglQfg+WpS2I5gjzaUuCO/BOV31+pW5JW1/4Kz26PjD/YHprK5q
bRnMBvqS501NA2nD2euSC97V87qqoz0i4HvznY6+5XIBTGFFng==
                    
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-4., 2.4492935982947064`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu_6a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu_6a", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {512, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 26), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{10, 10}, {-3., 1.8369701987210297`*^-16}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    PaneBox[
                    StyleBox["\"\:2217\"", 20, StripOnInput -> False], 
                    ImageSize -> {11, 28}], TraditionalForm]], {-3., 
                    1.8369701987210297`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"conv_6a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"3", ",", 
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["conv_6a", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    3, {3}, "PaddingSize" -> {1}, "Input" -> {512, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 27), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{10, 10}, {-2., 1.2246467991473532`*^-16}]]}, 
                    InsetBox[
                    FormBox["\"T\"", TraditionalForm], 
                    Offset[{0, -1}, {-2., 1.2246467991473532`*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"transpose\"", Bold, StripOnInput -> False]}, {
                    
                    StyleBox[
                    TagBox[
                    RowBox[{"TransposeLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "300"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["transpose", Bold], 
                    Style[
                    HoldForm[
                    TransposeLayer["Input" -> {3, 300}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 28), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-1., 6.123233995736766*^-17}], 
                    Offset[{10, 10}, {-1., 6.123233995736766*^-17}]]}, 
                    InsetBox[
                    FormBox["\"S\"", TraditionalForm], 
                    Offset[{0, -1}, {-1., 6.123233995736766*^-17}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"softmax\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SoftmaxLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"300", ",", "3"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["softmax", Bold], 
                    Style[
                    HoldForm[
                    SoftmaxLayer["Input" -> {300, 3}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 29), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 30), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[CompressedData["
1:eJxTTMoPSmViYGCQA2IQDQG2B84+m2Kj+ve+DYRvc4BnYfLNQ4/uQfnWB3yi
jcoSTtyF8q0OdIsyCv9bewfKtzxw+vz59bMn34byLQ5wdc3zsay8BeWbH/By
yX15Le4mlG92oOufdVuJyw0o3/TAyR1cykJa16F8kwOcxTf3r+e/BuUbH/DQ
XRHj+/UKlG90oON52c9Xty5D+YYHji90ndZx4BKUb3CAPUbEWG3ZRShf74C7
2OPzh7svQPk6UP+dg/K1oP45A+VrQN1/CspXg7r3BJSvAnXfMShfCeqew1C+
AtT+g1C+DNS+fVC+BNT8XVC+CNS8bVC+AFT/RiifA6p+FZTPAJVfCOV/2A/h
T4TJwwEAP+KK5A==
                    "], 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 20, 20, 24, 24, 24, 20, 24, 24, 24, 20, 24, 24, 
                    24, 24, 24, 24, 20, 24, 24, 24, 20, 20, 20, 20, 20, 20, 
                    20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {1071., 46.000000000000064`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{28., 28.}, {28., 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Scrollbars -> {True, False}, ImageSizeAction -> 
                    "Scrollable", ImageSize -> {800, Automatic}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "conv_1a"], 
                    NeuralNetworks`NetPath["Nodes", "pool_1"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_1_upsample"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_1_res_a"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_1_res_b"], 
                    NeuralNetworks`NetPath["Nodes", "pool_2"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_2_upsample"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_2_res_a"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_2_res_b"], 
                    NeuralNetworks`NetPath["Nodes", "pool_3"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_3_upsample"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_3_res_a"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_3_res_b"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_3_res_c"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_3_res_d"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_3_res_e"], 
                    NeuralNetworks`NetPath["Nodes", "pool_4"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_4_upsample"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_4_res_a"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_4_res_b"], 
                    NeuralNetworks`NetPath["Nodes", "pool_5"], 
                    NeuralNetworks`NetPath["Nodes", "bn_6"], 
                    NeuralNetworks`NetPath["Nodes", "relu_6"], 
                    NeuralNetworks`NetPath["Nodes", "conv_6"], 
                    NeuralNetworks`NetPath["Nodes", "relu_6a"], 
                    NeuralNetworks`NetPath["Nodes", "conv_6a"], 
                    NeuralNetworks`NetPath["Nodes", "transpose"], 
                    NeuralNetworks`NetPath["Nodes", "softmax"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 300}, NeuralNetworks`RealT]], 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{300, 3}, NeuralNetworks`RealT]], 
                    Association[
                    "conv_1a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 4, 3}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 4, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "pool_1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3}, "Stride" -> {1}, 
                    "PaddingSize" -> {1}, "Function" -> Max, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$Channels" -> 64, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_upsample" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_1_upsample_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_upsample_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_1_upsample_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_1_upsample_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_1_upsample_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_upsample_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_upsample_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_ramp_shared", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_bnl_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_cnn1d_branch_1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_ramp_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_ramp_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_cnn1d_branch_main_a", "Outputs",
                     "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_cnn1d_branch_1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_plus_shared", "Outputs", 
                    "Output"]}], "arcb_1_res_a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_1_res_a_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_a_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_a_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_a_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_a_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_1_res_a_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_a_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_plus_shared", "Outputs", 
                    "Output"]}], "arcb_1_res_b" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_1_res_b_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_b_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_b_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_b_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_b_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_1_res_b_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_b_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_plus_shared", "Outputs", 
                    "Output"]}], "pool_2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3}, "Stride" -> {1}, 
                    "PaddingSize" -> {1}, "Function" -> Max, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$Channels" -> 128, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_upsample" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_2_upsample_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_upsample_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_2_upsample_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_2_upsample_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_2_upsample_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_upsample_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_upsample_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_ramp_shared", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_bnl_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_cnn1d_branch_1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_ramp_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_ramp_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_cnn1d_branch_main_a", "Outputs",
                     "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_cnn1d_branch_1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_plus_shared", "Outputs", 
                    "Output"]}], "arcb_2_res_a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_2_res_a_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_a_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_a_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_a_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_a_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_2_res_a_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_a_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_plus_shared", "Outputs", 
                    "Output"]}], "arcb_2_res_b" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_2_res_b_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_b_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_b_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_b_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_b_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_2_res_b_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_b_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_plus_shared", "Outputs", 
                    "Output"]}], "pool_3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3}, "Stride" -> {1}, 
                    "PaddingSize" -> {1}, "Function" -> Max, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$Channels" -> 256, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_upsample" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_3_upsample_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_upsample_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_3_upsample_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_3_upsample_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_3_upsample_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_upsample_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_upsample_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_ramp_shared", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_bnl_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_cnn1d_branch_1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_ramp_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_ramp_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_cnn1d_branch_main_a", "Outputs",
                     "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_cnn1d_branch_1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_plus_shared", "Outputs", 
                    "Output"]}], "arcb_3_res_a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_3_res_a_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_a_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_a_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_a_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_a_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_3_res_a_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_a_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_plus_shared", "Outputs", 
                    "Output"]}], "arcb_3_res_b" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_3_res_b_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_b_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_b_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_b_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_b_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_3_res_b_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_b_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_plus_shared", "Outputs", 
                    "Output"]}], "arcb_3_res_c" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_3_res_c_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_c_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_c_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_c_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_c_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_3_res_c_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_c_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_plus_shared", "Outputs", 
                    "Output"]}], "arcb_3_res_d" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_3_res_d_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_d_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_d_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_d_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_d_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_3_res_d_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_d_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_plus_shared", "Outputs", 
                    "Output"]}], "arcb_3_res_e" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_3_res_e_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_e_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_e_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_e_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_e_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_3_res_e_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_e_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_plus_shared", "Outputs", 
                    "Output"]}], "pool_4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3}, "Stride" -> {1}, 
                    "PaddingSize" -> {1}, "Function" -> Max, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$Channels" -> 512, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_upsample" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_4_upsample_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_upsample_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_4_upsample_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{1024, 512, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 1024, "KernelSize" -> {3},
                     "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1},
                     "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_4_upsample_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_4_upsample_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{1024, 1024, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 1024, "KernelSize" -> {3},
                     "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1},
                     "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_upsample_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{1024, 512, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 1024, "KernelSize" -> {1},
                     "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1},
                     "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_upsample_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 300}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_ramp_shared", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_bnl_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_cnn1d_branch_1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_ramp_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_ramp_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_cnn1d_branch_main_a", "Outputs",
                     "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_cnn1d_branch_1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_plus_shared", "Outputs", 
                    "Output"]}], "arcb_4_res_a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_4_res_a_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 1024, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_a_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_a_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{1024, 1024, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 1024, "KernelSize" -> {3},
                     "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1},
                     "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_a_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 1024, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_a_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_4_res_a_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{1024, 1024, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 1024, "KernelSize" -> {3},
                     "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1},
                     "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_a_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 300}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_plus_shared", "Outputs", 
                    "Output"]}], "arcb_4_res_b" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_4_res_b_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 1024, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_b_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_b_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{1024, 1024, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 1024, "KernelSize" -> {3},
                     "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1},
                     "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_b_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 1024, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_b_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_4_res_b_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{1024, 1024, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 1024, "KernelSize" -> {3},
                     "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1},
                     "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_b_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 300}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_plus_shared", "Outputs", 
                    "Output"]}], "pool_5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3}, "Stride" -> {1}, 
                    "PaddingSize" -> {1}, "Function" -> Max, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$Channels" -> 1024, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "bn_6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 1024, "$SpatialDimensions" -> {300}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "relu_6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "conv_6" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 1024, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "relu_6a" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "conv_6a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{3, 512, 3}, NeuralNetworks`RealT],
                     "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 3, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 300}, 
                    NeuralNetworks`RealT]]], "transpose" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{300, 3}, 
                    NeuralNetworks`RealT]]], "softmax" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{300, 3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{300, 3}, 
                    NeuralNetworks`RealT]]]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4\"", 
                    "\"300\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"300\"", 
                    "\"3\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.7396175695687923`*^9, 3.739617586278483*^9}, {
   3.739617644366316*^9, 3.739617657772005*^9}, 3.739617756259921*^9, 
   3.739618347077156*^9, 3.7396184406611834`*^9, {3.739618510219841*^9, 
   3.739618520750853*^9}, {3.739618581670554*^9, 3.739618584465673*^9}, {
   3.739618628618445*^9, 3.739618698434245*^9}, 3.73961919510461*^9, 
   3.739625832271858*^9, 3.739626310306912*^9, 3.7396352538165197`*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"19e2faac-8886-42d5-8b23-f580bb6739ce"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Net Go", "Section",
 CellChangeTimes->{{3.739621222179888*^9, 
  3.739621222891553*^9}},ExpressionUUID->"a0e0327b-4f87-41ac-8413-\
dbf24362d29e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"inet", "=", 
   RowBox[{"NetInitialize", "[", "net", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7396201539389133`*^9, 3.7396201641476192`*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"8a87b8db-ada4-44cf-a57e-3dfa0d10cc0d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tnet", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"inet", ",", "ds", ",", "All", ",", 
    RowBox[{"LossFunction", "\[Rule]", 
     RowBox[{"CrossEntropyLossLayer", "[", "\"\<Probabilities\>\"", "]"}]}]}],
    "]"}]}]], "Input",
 CellChangeTimes->{{3.739619196568871*^9, 3.73961922505975*^9}, {
   3.739619587577345*^9, 3.7396195895452223`*^9}, {3.739619672843882*^9, 
   3.739619719266604*^9}, 3.739619757950926*^9, 3.7396198808109293`*^9, {
   3.739619988231215*^9, 3.739620012555592*^9}, 3.7396200686156683`*^9, 
   3.739620168284272*^9, {3.739620393778974*^9, 3.739620400257584*^9}, {
   3.73962098972618*^9, 3.7396209906911716`*^9}, {3.739626218201069*^9, 
   3.7396262200671663`*^9}, {3.739626333469644*^9, 3.739626338618868*^9}, 
   3.739635258319916*^9, {3.7397877930141563`*^9, 
   3.7397877982767677`*^9}},ExpressionUUID->"2641428d-74d8-41e9-a5ee-\
b65bfe28dde1"],

Cell[BoxData[
 RowBox[{"$Aborted", "[", "]"}]], "Output",
 CellChangeTimes->{
  3.73961972159087*^9, 3.7396197785295973`*^9, 3.7396198830967484`*^9, {
   3.739620006691457*^9, 3.739620014915139*^9}, 3.7396200710033913`*^9, 
   3.739620325374378*^9, {3.739620397710206*^9, 3.739620402197641*^9}, {
   3.73962098865793*^9, 3.739620992845748*^9}, 3.739625841580686*^9, 
   3.739626226483139*^9, {3.739626317663032*^9, 3.739626341013646*^9}, 
   3.739626457477797*^9, 3.739635457175623*^9},
 CellLabel->"Out[65]=",ExpressionUUID->"fc505867-5dbf-491b-a552-7291b6c9602f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"ds", "=", 
   RowBox[{"Import", "@", 
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<data\>\"", ",", 
       "\"\<test_set.mx\>\""}], "}"}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.739733886163537*^9, 3.739733894159603*^9}, {
  3.739736016752136*^9, 3.739736017004321*^9}, {3.7397857647656393`*^9, 
  3.739785765143692*^9}},
 CellLabel->
  "In[933]:=",ExpressionUUID->"93daba4e-06d3-4d43-aa9a-05b76834ccc8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetInformation", "[", 
  RowBox[{"inet", ",", "\"\<LayerTypeCounts\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.739625788610454*^9, 3.739625789754244*^9}, {
  3.739625879015669*^9, 3.739625931128098*^9}},
 CellLabel->
  "In[254]:=",ExpressionUUID->"702fadb5-f3cc-4691-8136-9d5356ff12fe"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"ConvolutionLayer", "\[Rule]", "37"}], ",", 
   RowBox[{"PoolingLayer", "\[Rule]", "5"}], ",", 
   RowBox[{"BatchNormalizationLayer", "\[Rule]", "27"}], ",", 
   RowBox[{"ElementwiseLayer", "\[Rule]", "32"}], ",", 
   RowBox[{"ThreadingLayer", "\[Rule]", "15"}], ",", 
   RowBox[{"SoftmaxLayer", "\[Rule]", "1"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.739625790763605*^9, 3.7396258496747227`*^9, {3.73962588553548*^9, 
   3.7396259317538157`*^9}},
 CellLabel->
  "Out[254]=",ExpressionUUID->"046f8951-e60d-4914-99e1-83f28be4f6a6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tNet", "=", 
  RowBox[{
  "Import", "[", "\"\<~/Downloads/results/trained_net.wlnet\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.73973330604206*^9, 3.739733338112792*^9}, {
  3.739785772953168*^9, 3.7397857785687447`*^9}},
 CellLabel->
  "In[934]:=",ExpressionUUID->"7858fdb8-5a00-4a7f-9e8d-34a1be46e629"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"4\"", "\"300\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"300\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["28", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    PaneBox[
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-29., 1.7757378587636622`*^-15}, {-28., 
                    1.7145055188062944`*^-15}}], 
                    
                    LineBox[{{-28., 1.7145055188062944`*^-15}, {-27., 
                    1.6532731788489269`*^-15}}], 
                    
                    LineBox[{{-27., 1.6532731788489269`*^-15}, {-26., 
                    1.592040838891559*^-15}}], 
                    
                    LineBox[{{-26., 1.592040838891559*^-15}, {-25., 
                    1.5308084989341915`*^-15}}], 
                    
                    LineBox[{{-25., 1.5308084989341915`*^-15}, {-24., 
                    1.4695761589768238`*^-15}}], 
                    LineBox[{{-24., 1.4695761589768238`*^-15}, {-23., 
                    1.4083438190194562`*^-15}}], 
                    
                    LineBox[{{-23., 1.4083438190194562`*^-15}, {-22., 
                    1.3471114790620886`*^-15}}], 
                    
                    LineBox[{{-22., 1.3471114790620886`*^-15}, {-21., 
                    1.2858791391047208`*^-15}}], 
                    
                    LineBox[{{-21., 1.2858791391047208`*^-15}, {-20., 
                    1.2246467991473533`*^-15}}], 
                    
                    LineBox[{{-20., 1.2246467991473533`*^-15}, {-19., 
                    1.1634144591899855`*^-15}}], 
                    
                    LineBox[{{-19., 1.1634144591899855`*^-15}, {-18., 
                    1.102182119232618*^-15}}], 
                    
                    LineBox[{{-18., 1.102182119232618*^-15}, {-17., 
                    1.0409497792752501`*^-15}}], 
                    
                    LineBox[{{-17., 1.0409497792752501`*^-15}, {-16., 
                    9.797174393178826*^-16}}], 
                    
                    LineBox[{{-16., 9.797174393178826*^-16}, {-15., 
                    9.18485099360515*^-16}}], 
                    
                    LineBox[{{-15., 9.18485099360515*^-16}, {-14., 
                    8.572527594031472*^-16}}], 
                    
                    LineBox[{{-14., 8.572527594031472*^-16}, {-13., 
                    7.960204194457795*^-16}}], 
                    
                    LineBox[{{-13., 7.960204194457795*^-16}, {-12., 
                    7.347880794884119*^-16}}], 
                    
                    LineBox[{{-12., 7.347880794884119*^-16}, {-11., 
                    6.735557395310443*^-16}}], 
                    
                    LineBox[{{-11., 6.735557395310443*^-16}, {-10., 
                    6.123233995736766*^-16}}], 
                    
                    LineBox[{{-10., 6.123233995736766*^-16}, {-9., 
                    5.51091059616309*^-16}}], 
                    
                    LineBox[{{-9., 5.51091059616309*^-16}, {-8., 
                    4.898587196589413*^-16}}], 
                    
                    LineBox[{{-8., 4.898587196589413*^-16}, {-7., 
                    4.286263797015736*^-16}}], 
                    
                    LineBox[{{-7., 4.286263797015736*^-16}, {-6., 
                    3.6739403974420594`*^-16}}], 
                    
                    LineBox[{{-6., 3.6739403974420594`*^-16}, {-5., 
                    3.061616997868383*^-16}}], 
                    
                    LineBox[{{-5., 3.061616997868383*^-16}, {-4., 
                    2.4492935982947064`*^-16}}], 
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}}], 
                    LineBox[{{-1., 6.123233995736766*^-17}, {0., 0.}}]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-28.400000000000002`, 
                    1.7389984547892415`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736777*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"4\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"4", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-27.4, 
                    1.677766114831874*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-26.4, 
                    1.6165337748745062`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736777*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-25.4, 
                    1.5553014349171384`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-24.4, 
                    1.4940690949597709`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736777*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-23.4, 
                    1.4328367550024033`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-22.4, 
                    1.3716044150450357`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-21.4, 
                    1.310372075087668*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736777*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-20.4, 
                    1.2491397351303004`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-19.4, 
                    1.1879073951729326`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736777*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-18.4, 
                    1.126675055215565*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-17.4, 
                    1.0654427152581972`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736777*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-16.4, 
                    1.0042103753008295`*^-15}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-15.4, 
                    9.42978035343462*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-14.4, 
                    8.817456953860943*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736777*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-13.4, 
                    8.205133554287267*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.399999999999999`, 
                    7.59281015471359*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-11.4, 
                    6.980486755139913*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736757*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-10.4, 
                    6.368163355566237*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1024\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1024", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-9.399999999999999, 
                    5.755839955992561*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1024\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1024", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-8.4, 
                    5.143516556418883*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1024\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1024", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-7.4, 
                    4.531193156845207*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1024\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1024", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-6.4, 
                    3.9188697572715305`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1024\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1024", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-5.4, 
                    3.3065463576978537`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736762*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1024\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"1024", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-4.4, 
                    2.694222958124177*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    2.0818995585505003`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"512", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    1.4695761589768238`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736765*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"3\"", "\"300\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"3", "300"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    8.572527594031473*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"300\"", "\"3\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"300", "3"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-0.4, 
                    2.4492935982947065`*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"300\"", "\"3\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"300", "3"}, "\[Cross]"], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-29., 1.7757378587636622`*^-15}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-28., 1.7145055188062944`*^-15}], 
                    Offset[{10, 10}, {-28., 1.7145055188062944`*^-15}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    PaneBox[
                    StyleBox["\"\:2217\"", 20, StripOnInput -> False], 
                    ImageSize -> {11, 28}], TraditionalForm]], {-28., 
                    1.7145055188062944`*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"conv_1a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"64", ",", 
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["conv_1a", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    64, {3}, "PaddingSize" -> {1}, "Input" -> {4, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-27., 1.6532731788489269`*^-15}], 
                    Offset[{10, 10}, {-27., 1.6532731788489269`*^-15}]]}, 
                    InsetBox[
                    FormBox["\"P\"", TraditionalForm], 
                    Offset[{0, -1}, {-27., 1.6532731788489269`*^-15}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pool_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pool_1", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{3}, "PaddingSize" -> {1}, 
                    "Input" -> {64, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-26., 1.592040838891559*^-15}], 
                    Offset[{12, 12}, {-26., 1.592040838891559*^-15}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-26., 1.592040838891559*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_1_upsample\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_1_upsample", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-25., 1.5308084989341915`*^-15}], 
                    Offset[{12, 12}, {-25., 1.5308084989341915`*^-15}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-25., 1.5308084989341915`*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_1_res_a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_1_res_a", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-24., 1.4695761589768238`*^-15}], 
                    Offset[{12, 12}, {-24., 1.4695761589768238`*^-15}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-24., 1.4695761589768238`*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_1_res_b\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_1_res_b", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-23., 1.4083438190194562`*^-15}], 
                    Offset[{10, 10}, {-23., 1.4083438190194562`*^-15}]]}, 
                    InsetBox[
                    FormBox["\"P\"", TraditionalForm], 
                    Offset[{0, -1}, {-23., 1.4083438190194562`*^-15}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pool_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pool_2", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{3}, "PaddingSize" -> {1}, 
                    "Input" -> {128, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-22., 1.3471114790620886`*^-15}], 
                    Offset[{12, 12}, {-22., 1.3471114790620886`*^-15}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-22., 1.3471114790620886`*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_2_upsample\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_2_upsample", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-21., 1.2858791391047208`*^-15}], 
                    Offset[{12, 12}, {-21., 1.2858791391047208`*^-15}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-21., 1.2858791391047208`*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_2_res_a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_2_res_a", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-20., 1.2246467991473533`*^-15}], 
                    Offset[{12, 12}, {-20., 1.2246467991473533`*^-15}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 
                    1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-20., 1.2246467991473533`*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_2_res_b\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_2_res_b", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-19., 1.1634144591899855`*^-15}], 
                    Offset[{10, 10}, {-19., 1.1634144591899855`*^-15}]]}, 
                    InsetBox[
                    FormBox["\"P\"", TraditionalForm], 
                    Offset[{0, -1}, {-19., 1.1634144591899855`*^-15}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pool_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pool_3", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{3}, "PaddingSize" -> {1}, 
                    "Input" -> {256, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-18., 1.102182119232618*^-15}], 
                    Offset[{12, 12}, {-18., 1.102182119232618*^-15}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-18., 1.102182119232618*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_3_upsample\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_3_upsample", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-17., 1.0409497792752501`*^-15}], 
                    Offset[{12, 12}, {-17., 1.0409497792752501`*^-15}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-17., 1.0409497792752501`*^-15}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_3_res_a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_3_res_a", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-16., 9.797174393178826*^-16}], 
                    Offset[{12, 12}, {-16., 9.797174393178826*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-16., 9.797174393178826*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_3_res_b\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_3_res_b", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-15., 9.18485099360515*^-16}], 
                    Offset[{12, 12}, {-15., 9.18485099360515*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 
                    1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-15., 9.18485099360515*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_3_res_c\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_3_res_c", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-14., 8.572527594031472*^-16}], 
                    Offset[{12, 12}, {-14., 8.572527594031472*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-14., 8.572527594031472*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_3_res_d\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_3_res_d", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-13., 7.960204194457795*^-16}], 
                    Offset[{12, 12}, {-13., 7.960204194457795*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-13., 7.960204194457795*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_3_res_e\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_3_res_e", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-12., 7.347880794884119*^-16}], 
                    Offset[{10, 10}, {-12., 7.347880794884119*^-16}]]}, 
                    InsetBox[
                    FormBox["\"P\"", TraditionalForm], 
                    Offset[{0, -1}, {-12., 7.347880794884119*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pool_4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pool_4", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{3}, "PaddingSize" -> {1}, 
                    "Input" -> {512, 300}]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 18), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-11., 6.735557395310443*^-16}], 
                    Offset[{12, 12}, {-11., 6.735557395310443*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-11., 6.735557395310443*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_4_upsample\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_4_upsample", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 19), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-10., 6.123233995736766*^-16}], 
                    Offset[{12, 12}, {-10., 6.123233995736766*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-10., 6.123233995736766*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_4_res_a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_4_res_a", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 20), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-9., 5.51091059616309*^-16}], 
                    Offset[{12, 12}, {-9., 5.51091059616309*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.631, 0.8160000000000001, 0.498]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.38, 0.753, 0.89]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.584, 0.51, 0.8390000000000001]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    RGBColor[0.4, 0.396, 0.659]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-9., 5.51091059616309*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"arcb_4_res_b\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["arcb_4_res_b", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[7], 
                    Skeleton[9]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 21), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-8., 4.898587196589413*^-16}], 
                    Offset[{10, 10}, {-8., 4.898587196589413*^-16}]]}, 
                    InsetBox[
                    FormBox["\"P\"", TraditionalForm], 
                    Offset[{0, -1}, {-8., 4.898587196589413*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"pool_5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"PoolingLayer", "[", 
                    RowBox[{
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1024", ",", "300"}], "}"}]}]}], "]"}], HoldForm],
                     FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["pool_5", Bold], 
                    Style[
                    HoldForm[
                    
                    PoolingLayer[{3}, "PaddingSize" -> {1}, 
                    "Input" -> {1024, 300}]], FontFamily -> "Source Code Pro",
                     ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 22), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-7., 4.286263797015736*^-16}], 
                    Offset[{10, 10}, {-7., 4.286263797015736*^-16}]]}, 
                    InsetBox[
                    FormBox["\"BN\"", TraditionalForm], 
                    Offset[{0, -1}, {-7., 4.286263797015736*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"bn_6\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Channels\"", "\[Rule]", "1024"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1024", ",", "300"}], "}"}]}]}], "]"}], HoldForm],
                     FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["bn_6", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Channels" -> 1024, "Input" -> {1024, 300}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 23), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-6., 3.6739403974420594`*^-16}], 
                    Offset[{10, 10}, {-6., 3.6739403974420594`*^-16}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzF1s9LG0EUB/CNtpKLtvVmC4q3loooolgqBUUjHnIwNhSiRnZ+iSARkoh4
MeBJCJ7Egyi0Je5MD+JdSr3Yf6A92HMFPVr0YitofOtO7DRaE83s5gtvIXsY
Pnmz83Yb0VSIVRiGkfDDJWTOdMfj5uzQY/gRjiUmxmOUDMSSdJzGO1El3KyD
eg71wNCeoK6FEFqr1rWWEi0+1rbykBDxWcdaedHh81EiMox+ympYKz8l+yjm
C7YNjMc6QHkpyUexmLRtjIhThkRAF0rJvX0YixD07Mz2EWJFdaKU3MvHTKsL
bCeX+4r5rG6Ukjv7oG8vwHbo9E0su4FScicfQvwpPGs/nb6JTcNIVbgFkyna
NzycqYG+fZNn9evY2Hu/mzCZonzhcKoK+vVFntUfGK/Wug2TKcbnY4Rb0naA
0HqD66q/KegjhKdz85eQ9RYvUEpu9THMY7n5S02r1yuUkv/6oG9v7fkLdY4x
H/ESpeRGHzxjb8D1W864Ga9RSq75oG8vwfbLsfGlcqCU/OOLRj88o4Tvyb5t
eDB/C+XKx8Irj+AcfJfnYcej+Vsolz57/oJp25kjfDcSsZ6UGyZj+3ywl0LO
uH02+rG+3CglQfg+WpS2I5gjzaUuCO/BOV31+pW5JW1/4Kz26PjD/YHprK5q
bRnMBvqS501NA2nD2euSC97V87qqoz0i4HvznY6+5XIBTGFFng==
                    
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-6., 3.6739403974420594`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu_6\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1024", ",", "300"}], "}"}]}]}], "]"}], HoldForm],
                     FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu_6", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {1024, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 24), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 3.061616997868383*^-16}], 
                    Offset[{10, 10}, {-5., 3.061616997868383*^-16}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    PaneBox[
                    StyleBox["\"\:2217\"", 20, StripOnInput -> False], 
                    ImageSize -> {11, 28}], TraditionalForm]], {-5., 
                    3.061616997868383*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"conv_6\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"512", ",", 
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1024", ",", "300"}], "}"}]}]}], "]"}], HoldForm],
                     FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["conv_6", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    512, {3}, "PaddingSize" -> {1}, "Input" -> {1024, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 25), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., 2.4492935982947064`*^-16}], 
                    Offset[{10, 10}, {-4., 2.4492935982947064`*^-16}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzF1s9LG0EUB/CNtpKLtvVmC4q3loooolgqBUUjHnIwNhSiRnZ+iSARkoh4
MeBJCJ7Egyi0Je5MD+JdSr3Yf6A92HMFPVr0YitofOtO7DRaE83s5gtvIXsY
Pnmz83Yb0VSIVRiGkfDDJWTOdMfj5uzQY/gRjiUmxmOUDMSSdJzGO1El3KyD
eg71wNCeoK6FEFqr1rWWEi0+1rbykBDxWcdaedHh81EiMox+ympYKz8l+yjm
C7YNjMc6QHkpyUexmLRtjIhThkRAF0rJvX0YixD07Mz2EWJFdaKU3MvHTKsL
bCeX+4r5rG6Ukjv7oG8vwHbo9E0su4FScicfQvwpPGs/nb6JTcNIVbgFkyna
NzycqYG+fZNn9evY2Hu/mzCZonzhcKoK+vVFntUfGK/Wug2TKcbnY4Rb0naA
0HqD66q/KegjhKdz85eQ9RYvUEpu9THMY7n5S02r1yuUkv/6oG9v7fkLdY4x
H/ESpeRGHzxjb8D1W864Ga9RSq75oG8vwfbLsfGlcqCU/OOLRj88o4Tvyb5t
eDB/C+XKx8Irj+AcfJfnYcej+Vsolz57/oJp25kjfDcSsZ6UGyZj+3ywl0LO
uH02+rG+3CglQfg+WpS2I5gjzaUuCO/BOV31+pW5JW1/4Kz26PjD/YHprK5q
bRnMBvqS501NA2nD2euSC97V87qqoz0i4HvznY6+5XIBTGFFng==
                    
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}, ImageSize -> 20], 
                    TraditionalForm]], {-4., 2.4492935982947064`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu_6a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu_6a", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {512, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 26), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{10, 10}, {-3., 1.8369701987210297`*^-16}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    PaneBox[
                    StyleBox["\"\:2217\"", 20, StripOnInput -> False], 
                    ImageSize -> {11, 28}], TraditionalForm]], {-3., 
                    1.8369701987210297`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"conv_6a\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"3", ",", 
                    RowBox[{"{", "3", "}"}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "300"}], "}"}]}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["conv_6a", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    3, {3}, "PaddingSize" -> {1}, "Input" -> {512, 300}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 27), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{10, 10}, {-2., 1.2246467991473532`*^-16}]]}, 
                    InsetBox[
                    FormBox["\"T\"", TraditionalForm], 
                    Offset[{0, -1}, {-2., 1.2246467991473532`*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"transpose\"", Bold, StripOnInput -> False]}, {
                    
                    StyleBox[
                    TagBox[
                    RowBox[{"TransposeLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "300"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["transpose", Bold], 
                    Style[
                    HoldForm[
                    TransposeLayer["Input" -> {3, 300}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 28), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-1., 6.123233995736766*^-17}], 
                    Offset[{10, 10}, {-1., 6.123233995736766*^-17}]]}, 
                    InsetBox[
                    FormBox["\"S\"", TraditionalForm], 
                    Offset[{0, -1}, {-1., 6.123233995736766*^-17}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"softmax\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SoftmaxLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"300", ",", "3"}], "}"}]}], "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["softmax", Bold], 
                    Style[
                    HoldForm[
                    SoftmaxLayer["Input" -> {300, 3}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 29), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 30), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[CompressedData["
1:eJxTTMoPSmViYGCQA2IQDQG2B84+m2Kj+ve+DYRvc4BnYfLNQ4/uQfnWB3yi
jcoSTtyF8q0OdIsyCv9bewfKtzxw+vz59bMn34byLQ5wdc3zsay8BeWbH/By
yX15Le4mlG92oOufdVuJyw0o3/TAyR1cykJa16F8kwOcxTf3r+e/BuUbH/DQ
XRHj+/UKlG90oON52c9Xty5D+YYHji90ndZx4BKUb3CAPUbEWG3ZRShf74C7
2OPzh7svQPk6UP+dg/K1oP45A+VrQN1/CspXg7r3BJSvAnXfMShfCeqew1C+
AtT+g1C+DNS+fVC+BNT8XVC+CNS8bVC+AFT/RiifA6p+FZTPAJVfCOV/2A/h
T4TJwwEAP+KK5A==
                    "], 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 20, 20, 24, 24, 24, 20, 24, 24, 24, 20, 24, 24, 
                    24, 24, 24, 24, 20, 24, 24, 24, 20, 20, 20, 20, 20, 20, 
                    20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {1071., 46.000000000000064`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{28., 28.}, {28., 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Scrollbars -> {True, False}, ImageSizeAction -> 
                    "Scrollable", ImageSize -> {800, Automatic}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "conv_1a"], 
                    NeuralNetworks`NetPath["Nodes", "pool_1"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_1_upsample"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_1_res_a"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_1_res_b"], 
                    NeuralNetworks`NetPath["Nodes", "pool_2"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_2_upsample"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_2_res_a"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_2_res_b"], 
                    NeuralNetworks`NetPath["Nodes", "pool_3"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_3_upsample"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_3_res_a"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_3_res_b"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_3_res_c"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_3_res_d"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_3_res_e"], 
                    NeuralNetworks`NetPath["Nodes", "pool_4"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_4_upsample"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_4_res_a"], 
                    NeuralNetworks`NetPath["Nodes", "arcb_4_res_b"], 
                    NeuralNetworks`NetPath["Nodes", "pool_5"], 
                    NeuralNetworks`NetPath["Nodes", "bn_6"], 
                    NeuralNetworks`NetPath["Nodes", "relu_6"], 
                    NeuralNetworks`NetPath["Nodes", "conv_6"], 
                    NeuralNetworks`NetPath["Nodes", "relu_6a"], 
                    NeuralNetworks`NetPath["Nodes", "conv_6a"], 
                    NeuralNetworks`NetPath["Nodes", "transpose"], 
                    NeuralNetworks`NetPath["Nodes", "softmax"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 300}, NeuralNetworks`RealT]], 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{300, 3}, NeuralNetworks`RealT]], 
                    Association[
                    "conv_1a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 4, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 4, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "pool_1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3}, "Stride" -> {1}, 
                    "PaddingSize" -> {1}, "Function" -> Max, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$Channels" -> 64, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_upsample" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_1_upsample_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_upsample_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_1_upsample_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_1_upsample_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_1_upsample_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_upsample_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 300}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_upsample_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_ramp_shared", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_bnl_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_cnn1d_branch_1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_ramp_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_ramp_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_cnn1d_branch_main_a", "Outputs",
                     "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_cnn1d_branch_1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_upsample_plus_shared", "Outputs", 
                    "Output"]}], "arcb_1_res_a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_1_res_a_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_a_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_a_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_a_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_a_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_1_res_a_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_a_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_a_plus_shared", "Outputs", 
                    "Output"]}], "arcb_1_res_b" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_1_res_b_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_b_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_b_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_b_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_b_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_1_res_b_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_1_res_b_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_1_res_b_plus_shared", "Outputs", 
                    "Output"]}], "pool_2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3}, "Stride" -> {1}, 
                    "PaddingSize" -> {1}, "Function" -> Max, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$Channels" -> 128, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_upsample" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_2_upsample_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_upsample_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_2_upsample_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_2_upsample_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_2_upsample_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_upsample_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_upsample_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_ramp_shared", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_bnl_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_cnn1d_branch_1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_ramp_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_ramp_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_cnn1d_branch_main_a", "Outputs",
                     "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_cnn1d_branch_1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_upsample_plus_shared", "Outputs", 
                    "Output"]}], "arcb_2_res_a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_2_res_a_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_a_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_a_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_a_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_a_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_2_res_a_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_a_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_a_plus_shared", "Outputs", 
                    "Output"]}], "arcb_2_res_b" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_2_res_b_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_b_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_b_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_b_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_b_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_2_res_b_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 256, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_2_res_b_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_2_res_b_plus_shared", "Outputs", 
                    "Output"]}], "pool_3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3}, "Stride" -> {1}, 
                    "PaddingSize" -> {1}, "Function" -> Max, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$Channels" -> 256, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_upsample" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_3_upsample_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_upsample_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_3_upsample_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_3_upsample_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_3_upsample_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_upsample_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {1}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_upsample_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_ramp_shared", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_bnl_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_cnn1d_branch_1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_ramp_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_ramp_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_cnn1d_branch_main_a", "Outputs",
                     "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_cnn1d_branch_1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_upsample_plus_shared", "Outputs", 
                    "Output"]}], "arcb_3_res_a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_3_res_a_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_a_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_a_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_a_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_a_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_3_res_a_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_a_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_a_plus_shared", "Outputs", 
                    "Output"]}], "arcb_3_res_b" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_3_res_b_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_b_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_b_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_b_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_b_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_3_res_b_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_b_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_b_plus_shared", "Outputs", 
                    "Output"]}], "arcb_3_res_c" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_3_res_c_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_c_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_c_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_c_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_c_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_3_res_c_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_c_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_c_plus_shared", "Outputs", 
                    "Output"]}], "arcb_3_res_d" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_3_res_d_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_d_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_d_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_d_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_d_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_3_res_d_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_d_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_d_plus_shared", "Outputs", 
                    "Output"]}], "arcb_3_res_e" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_3_res_e_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_e_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_e_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_e_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_e_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_3_res_e_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_3_res_e_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_3_res_e_plus_shared", "Outputs", 
                    "Output"]}], "pool_4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3}, "Stride" -> {1}, 
                    "PaddingSize" -> {1}, "Function" -> Max, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$Channels" -> 512, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_upsample" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_4_upsample_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_upsample_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_4_upsample_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{1024}]],
                     "Parameters" -> 
                    Association["OutputChannels" -> 1024, "KernelSize" -> {3},
                     "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1},
                     "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_4_upsample_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_4_upsample_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 1024, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{1024}]],
                     "Parameters" -> 
                    Association["OutputChannels" -> 1024, "KernelSize" -> {3},
                     "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1},
                     "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_upsample_cnn1d_branch_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{1024}]],
                     "Parameters" -> 
                    Association["OutputChannels" -> 1024, "KernelSize" -> {1},
                     "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1},
                     "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 300}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_upsample_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 300}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_ramp_shared", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_bnl_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_cnn1d_branch_1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_ramp_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_ramp_shared", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_cnn1d_branch_main_a", "Outputs",
                     "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_cnn1d_branch_1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_upsample_plus_shared", "Outputs", 
                    "Output"]}], "arcb_4_res_a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_4_res_a_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_a_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_a_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 1024, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{1024}]],
                     "Parameters" -> 
                    Association["OutputChannels" -> 1024, "KernelSize" -> {3},
                     "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1},
                     "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_a_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_a_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_4_res_a_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 1024, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{1024}]],
                     "Parameters" -> 
                    Association["OutputChannels" -> 1024, "KernelSize" -> {3},
                     "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1},
                     "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_a_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 300}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_a_plus_shared", "Outputs", 
                    "Output"]}], "arcb_4_res_b" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "arcb_4_res_b_bnl_shared" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_b_ramp_shared" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_b_cnn1d_branch_main" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 1024, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{1024}]],
                     "Parameters" -> 
                    Association["OutputChannels" -> 1024, "KernelSize" -> {3},
                     "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1},
                     "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_b_bnl_main" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_b_ramp_branch_main" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], 
                    "arcb_4_res_b_cnn1d_branch_main_a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 1024, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{1024}]],
                     "Parameters" -> 
                    Association["OutputChannels" -> 1024, "KernelSize" -> {3},
                     "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1},
                     "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "arcb_4_res_b_plus_shared" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 300}, NeuralNetworks`RealT],
                     "2" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_bnl_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_plus_shared", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_ramp_shared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_bnl_shared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_cnn1d_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_ramp_shared", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_bnl_main", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_cnn1d_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_ramp_branch_main", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_bnl_main", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_cnn1d_branch_main_a", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_ramp_branch_main", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_plus_shared", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_cnn1d_branch_main_a", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "arcb_4_res_b_plus_shared", "Outputs", 
                    "Output"]}], "pool_5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3}, "Stride" -> {1}, 
                    "PaddingSize" -> {1}, "Function" -> Max, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$Channels" -> 1024, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "bn_6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 1024,
                     "Interleaving" -> False, "$SpatialDimensions" -> {300}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "relu_6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]]], "conv_6" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "relu_6a" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]]], "conv_6a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{3, 512, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{3}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 3, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {1}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {300}, "$OutputSize" -> {300}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 300}, 
                    NeuralNetworks`RealT]]], "transpose" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 300}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{300, 3}, 
                    NeuralNetworks`RealT]]], "softmax" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{300, 3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{300, 3}, 
                    NeuralNetworks`RealT]]]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4\"", 
                    "\"300\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"300\"", 
                    "\"3\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.739733340059794*^9, 3.739785784743812*^9},
 CellLabel->
  "Out[934]=",ExpressionUUID->"3c401119-c79d-4245-a2e5-14afae8be4df"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"probabilitiesToClass", "[", "probMat_", "]"}], ":=", 
  RowBox[{"Flatten", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Ordering", "[", 
      RowBox[{"#", ",", 
       RowBox[{"-", "1"}]}], "]"}], "&"}], "/@", "probMat"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.739735614753537*^9, 3.7397356543131742`*^9}},
 CellLabel->
  "In[935]:=",ExpressionUUID->"e6986eb4-151d-4f94-88b2-67131c428778"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"randomN", "[", "ds_", "]"}], ":=", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"Length", "[", "ds", "]"}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"n", "=", 
   RowBox[{"randomN", "[", "ds", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Total", "[", 
  RowBox[{"Abs", "/@", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"probabilitiesToClass", "[", 
      RowBox[{"tNet", "[", 
       RowBox[{"Normal", "[", 
        RowBox[{"ds", "[", 
         RowBox[{"n", ",", "\"\<Input\>\""}], "]"}], "]"}], "]"}], "]"}], "-",
      "\[IndentingNewLine]", 
     RowBox[{"probabilitiesToClass", "[", 
      RowBox[{"Normal", "[", 
       RowBox[{"ds", "[", 
        RowBox[{"n", ",", "\"\<Output\>\""}], "]"}], "]"}], "]"}]}], ")"}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.7397333428264093`*^9, 3.739733390466482*^9}, {
   3.739735492679481*^9, 3.739735589160358*^9}, {3.739735670499115*^9, 
   3.739735840407653*^9}, 3.739785789478539*^9},
 CellLabel->
  "In[936]:=",ExpressionUUID->"ab6eb204-e2f8-43a1-be0a-26f5be03a5cc"],

Cell[BoxData["297"], "Output",
 CellChangeTimes->{{3.73973568916385*^9, 3.739735736681759*^9}, {
   3.739735781450946*^9, 3.739735849764049*^9}, {3.739736023918639*^9, 
   3.739736025497405*^9}, 3.739785803697521*^9},
 CellLabel->
  "Out[938]=",ExpressionUUID->"4a838509-4a2e-4b5b-b229-4aa39bfc528e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"n", "=", 
    RowBox[{"randomN", "[", "ds", "]"}]}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"n", "=", "835"}], ";"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"s", "=", 
   RowBox[{"Normal", "[", 
    RowBox[{"ds", "[", "n", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"ArrayPlot", "[", 
  RowBox[{
   RowBox[{"Join", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Transpose", "[", 
      RowBox[{"tNet", "[", 
       RowBox[{"s", "[", "\"\<Input\>\"", "]"}], "]"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"White", ",", 
          RowBox[{"Opacity", "[", "0", "]"}]}], "}"}], ",", "300"}], "]"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Transpose", "[", 
      RowBox[{"Normal", "[", 
       RowBox[{"s", "[", "\"\<Output\>\"", "]"}], "]"}], "]"}]}], "]"}], ",", 
   
   RowBox[{"AspectRatio", "->", 
    RowBox[{"1", "/", "2"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7397875782240057`*^9, 3.739787654856988*^9}, {
  3.7397876903571444`*^9, 3.739787701179632*^9}, {3.7398000773839903`*^9, 
  3.739800113151392*^9}},
 CellLabel->
  "In[2227]:=",ExpressionUUID->"988831a2-4fbd-4c8e-81d4-9db834bb0df0"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJzt3XlwVGW+xvHILmtGwMFlMMpuAkZFhZGBgKIRUANGCCASFkdEkcgua0BQ
QAojAiKLRkBgGJYAghEFoyCJw9YB0nT2k17O6e5zDgQBRUWYW/fw/Kw695m/
bt1/br1UWZ+ivr7veZdOaBOjd48cP+ClmjExMXX/66+Em2JiasXgV3UPpVKp
VCqVSqVSqVQqlUrl/8b/9Et11VVXXXXVVVddddVVV1111VVXXXXVVVddddVV
V1111VX/n12pVCqVSqVSqVQqlUqlUqlUKpVKpVKpVCqVSqVSqVQqlf83/qdf
qquuuuqqq6666qr//+xKpVKpVCqVSqVSqVQqlUqlUukWv1RXXXXVVVddddVV
V1111VVXXXXVVVddddVVV1111VVXXXXVVVddddVVV1111VUnPXPP/hM9iPj7
kq5952FKD7cuZKJndm9SyETPO9rJw5T535zsYcr8dwzyMGX8xgc9TOn7OniY
sr656zxMOcclN37vFn1rWiEVz9/yVSFT+r96n2JKP3jhFFPWnzvwNFPOr93Y
M0wZP3bYGab0OfPOMGX/WwZ5qRjfbIWXKX3Sfi9T9l/D9jJl/OojZ5ky/pP3
fEw5n4Y+H/OP++1ZTr3RY62yKiZ6dvEDASZ69ZOd/Ux0z64mfqbsb3NqkIme
s+9+gyn7y+mpU/H8oyUhJrrW+50QU8630YYQEz1jxkM6U57/wG06U/Z/Szed
Ket7zQox5f6ODNWZsv5Oz+pMOd9+8TpTevjdEFNeH9MKQkz0LH1iiCnjRw8P
MeX59W8NMWX/nZ3Xi1v06tm/Bpjy/Mq3/Uw5vzpz/Uz0lC8HVTFlfdvfCzLR
45Y+HGDK/HnHNKbsb2hKFRM9r+GoIFPW92ZeiInumZUYZMr9NjofYEo/3DnI
RE9/cVWQiZ4xPBBkyv6XzQ4y5fkFLUNM9JxV3UNMeX7RtSATPfHWr0NM6Vc6
6Ey539kXQ0w5/1a1dKasb/9zOhM984mPQkx07Y4xIab0TnqAKeu7e2qQiR7b
b1KQKff/Sc0QU9Yfaa0z0bObrjaYMn7BfIMp67+ntcGU+7nD+fPGrbx+Tm7V
mbK+g0U6Ez2u0yqdKeef9Y7ORI/Ru+tU7P/tfToTPanZBZ0p+9vr/N6trO/P
P+pMOd/uKwwmel78ZwZT1vfKQIOJnnhbuc6U8xl/k0HF+tIqdaas7+fLOlPO
90RLgynra/sXgynj35toMNFjx50xmLK/4zFhKl5fLz0aZqLnNokPM+X5l2uF
mejpP/1mMGV/BUsNppxvYQ+DiZ7Vto3BlOcvSzeYcr+F4wymnE9FvMGU8dvv
M5jo2Xm7dCZ6SsuJOlPu78B4nYrzGeW8n3OLnvTxkzpT5q+8FKKiV9x4P+oW
99/ozzoTPWPptRBT1pdUW2fK+Q9+PsSU+VtdCzDl/l89GmDK/M2bBZiy/0ff
CFDx+u22IMBEzylbFmDK+pZ8FWDK+iY2DTJlfVPrBqh4//NxtyATXXv23QAT
Pe+zxyqZcn+3t69kyvO79dGY8vzpX2tM9Njk0RpTetUCjSmvj5TuGhM98fjL
GlPWd7inxpT5q1I1puz/zvs0JnrmsN2VTHn+689oTPScNW9rTBlf3Utjyvoj
kzWmnO+BhlVM2V+rIo2JnpJyRmPK6ydhWBVT+vERVUzZ/+IefqaMH7iwiome
F++tYsr97FlWxZT9T11dxZTzr7GviinP3+3M51Z63EE/U/r1GkEmetzTFQEm
emKPuUGmrP+bEwEmevrk90NMOZ9x/9SZ6NnHOhtM6b/EGEzpB1oZTNnf3s90
prw+mp3XmeieN/J1puw//06DKa+frGcMJnpGi6s6U+6vw0mdKfv3PGIwZX3j
LupM9JS7PzSYcn4vjzaYcr83zzGYcn4xjxpMWd/fna+3uZX9Dfw9xJTxrTvr
TPTYz5frTFn/fuc+3cr5X/yHzpR++wSDKftvkmow5fUx5y2DiR7z0j8MKj7+
T75kMNFzmt4ZZsr6Vu4xmOhJWx4wmHI/o44ZTHn+kT4GU56/7UuDKeMbzDaY
sn/zQYOJnjJmvs6U9QdnGUxZ35d/NZjoiWemG0zpCet0Jnr15vdCTPT0a/lB
pvQGfUNM9KxP40JMOZ+LPwSZ6JnBXkEmeszxvAAV53uzEWDK/bbYHmCiJzU5
GGDK8x/ZFqDiz6/PJwWY6LEbOgSZcn53PxNkyv36s4NMWX9M/RBT+uY3Q0z0
jK8/CTLl/MZuCzJl//f3DjJl/3VeDzFlfOhmnSnjY/fqTBmfc11nomeO660z
5X5Daw0qPn6GNzOY6Nnnnwox0dO7Tgwy5fnv7g1R8fGj3RVkoufVbR1kyvks
7RFkyv6+db6e6lbW1+eeABX9pr5+qvz5+46fKesviPqZ6J4riwJM9MTFdQJM
9LgfbgswZf7sxX6m7C9y4/OJW3z8PNg/wERPOnlfgImes+66nyn7qxwUYKJn
dZkTYMr+12sBJnr2sVuCTPTM0eEgU/Z/cXeAia6FdvqZsv6sHX6m9K7tAky5
v345Qabs75GXg0zZ39PHzjLl/uyWZ5noeS9GipjoMaU3vp/vFs9P7VfElL5r
2RmmrG9t6mmmPP/6D6epmL/N4VNMmf/5NzxM2X/NXR6mPH/zlpNUPL/O1ZNM
eX5qUw9T5t9xRyEV4xdeP8WU9e/7/hRT+ta/FTKlf/q7hyn9g5OFTFnfy38/
xfzj/v50iorzi11zminjC2ufpmJ8YqPTTBnfZsgpKtYfn1/IlP3Pa+NhyvxF
9knqjV62o7fFRM/d3s1ioieMrG8x0X2HR1tM9Pmdh1tM9EuxT1lM9PSuPSwm
+pIhj1pM9Pb54y0meq1LWy2m3G/2HIsp67vrK4uJ3iKy0WKibwt/ajHlfn5d
YzHRYz9912KiT3pngsVETx3rnIdbuf8vl1pM9JxbO1pM9Iy/fGcx0dfeMsli
yusjeNBior8weJnFRPcscuZzi558x0qTKeO3f28w0bMm3+pnosdd26ox0bX1
z/mZMt663c9ET8zepDHR87raJUz0TGtOOVN6zafLmegxr24vp2K8/Xk5U8Z/
u7OMir7t9nIq5m/sLWVKX2yUMWX+nd+XUnF+x7eWMtGTyhqUMeX5Qw+WM6Xv
vqWcKc8f1rSCKf3n5hVMWV9gZAVTnp84WGPK+BfGaUz0xISufqaMr9fbz0TP
HntLgCnra1FYwUSvblPXz0TPatpYZ8r6t3cKMdHTFzhfD3WLntxkU5SJfmxb
K4sp+4/km0z0mP1XTSo+/8Y7fx64RS8YU8tmoi/vnGcx0Q83H2Iz0RsmO793
K+MTh9pMud/JO2wm+vy2u2wmelx8js2U+T9fYjPR7zz0mc1E7/fiZJsp6/tq
hs1ETxlhW0z0LdEjFhM9+eLXFlPud35Nmyn763fJYqLn7vBbTPS0dSUWE/3x
VjMtJno4daTFRM975oLJlPt7qNBkomtZb5pMOb8rY0ymjD/zhMlEX9j0SZMp
9zu6v8lEj7PGmUz09nOnm0z0Jb4OFhN9bf+BFlP2d5dtMtHT971hMtET1y0x
megxQ582qbj/CctNJnr2kZssJnrO6SKTiX7ptmctpjx/4GKLiV6v7kqLiT7/
53yLiT6z3T8tJnqLNh9ZTPSsY9stJnr1YefjxS36tOpHLCZ65pAuFhN9yaBU
iyn3X/2yxURPDoVNpvTI7yYTfcye3SYTPT2/p8mUPq+xyUTP2zs/ypTz6e6L
MtELYndGmeg5CwZEmejZdS5HmdKj26JMud/rznrcSrcrokxZ37q3TKac349d
TCZ6Voc7o0z0eu2ORpjoaas/iDDRu7RsHGaiVz85w2Cie7InG0z0uKSrYaac
z84NBlOev6tNmImet+QXgynnN/uywUTPOL7TYEpPO6AzpS97x2CiZ4+912DK
/o4MNZjoSX2mGEzp9Z1/X9MteuKRxw2mnN/KlQYTvd6Fo2EmeoszW8JM9PQV
hwwm+pja/cNMeX00vyvMRI8dfovBlF7yoc5E13Tn36dxK+s/08Fgyvm+esBg
onue+WeIKfdf8z2DiV7wyswwEz2tal6EiZ7c8a0IEz2z5sQIEz3pX19EmOjt
f7stwkTf0mRRlIk+7fKHUSZ6i9a5USZ67q+dTKbcX9IVk4k+5jvn65Vu0WNS
51lUrO+JSyYTPZzzk8mU9Y8YZDJlfRNPmkw535WWyUS3nmtiMdG11lMtJnrs
K4kWEz2xzX0WU+b/ZprFRM9Y6cznFr19qy8sJrpvcHeLid5lnPN+zC36wpSx
JlOev+BBk4meOcZ5vblFjxvQ0WSin+n4kMVEz9roNZnoV76ZZzLRszeMspjo
L3R3vh/hFr3hwEEWEz1n5HKLiV5r0HqLKf2mPjYTPWVIc5uJvqqsqc1EL0ie
bjPRO295xGbK6+fqCJsp6//bCzZT7u/efjZTzm9nyGKibytbbDPlfh962Gai
x6Ym2Ex5/mMbLKbc//rOFhO923Tnn2fcoqfXdb6f5Ra99cvO792ib5wfZzHR
83r9YDLRkzsONZnocV0Wm0z0pLr1TSb6wsOvm0z03B7bTSb612k9Labs/0KR
xUS/uveQxURPaXevzZTXx9pUm4keXrHJZqJn3BSxmegxow/YVJzfkfdtJvry
Eq/NRJ+0x2Mz0WtlnrGZ6L49v9pM9NlXGp9jyvrqV9pM2d+U5TYT/XC68/nC
ray/zg6Lid7sSBubib6lrfP1GrfoadnHTSZ6yuubTCZ6or3PZKLnzfoqykQP
93kjykRvvzoSYaLX88ZFmbL/+leiTPTctVGTiZ6+Yo3JlPu933k/6hZ99Gtr
LSZ6sGuCxUS3zjvvR92ix9Vz3s+5lfNL85lM9C7PF5tM9CtvrjeZ6AV5n5pM
9FULnO8Hu0VPHrDaZMr+ihNMJnpm7nyTiZ6zdqbJRO88w/l6n1u53zVJFhO9
XvFlm4nea0azc0z0DP2+c0xZX94hm4met/knm4l+2FtgM9HTGzvvJ9yiXzqV
bDPRc9f8ajHRLT3JZqInvJdoM9G7XXzaZqKXNRhvM9E3rnPe77lFf60s32ai
jxlx1maiJ487ZzPRE58O2Uz0mE1f2VQ8f1u8zUT3dF1gM9Fjm820meh5RV1s
Jvq0Rr9bTPTHrRMWEz1unfP5zi16RvSaxURPetD5fqRb9DrDl55jyvo2NrCY
sr7TI0wmenaHUSZTzn9NU5OJnvXSIpOJnv6A8/nILXpBlxUmEz3l9FaTKfc7
bIbJRO/St47JRM/86H6Tib7l3VVRJrqv16woU57/wKNRJnpiWzPCRJ9W44cI
E10bnRZhyvlpIyJMGV8nMcJET2u+OcyU9addNJjosXs6hZno1R/9y2DK/IMX
G0z0rE2PGUz0jIrfDabcz6yPIkz00R83tJjoSe3vsZiy/ubTTKacz0jn/apb
9FW5tUwmevo25+tpbtELBl+LMtEX7p5tMqXXct4PuZX5Zzhfj3GL3n7jBJMp
5zN1sMlEH6M77+fconuOf2IyZf0jvzWZ6JljS00mesr3J0ymzB9xvt/sFr1F
px0m84/nzzOZ0j9xPh+6ldfHW7kmU9a3ZoDJRNdarzKZcn+XephM9LQLXU0m
er0yZ71u0XOO1LWY6Hl9v4sy5XwT2kSY8vr4KTPCRK8eNyLIRE86/0AlU9a3
dVAlU55f7ymNKeNrrKtkosdYq8qpGD8+sYwp49+YV07F/h5rXMpEz+x+ooQp
z7/Yt5Qp48P3FjOlf/eUjynr257rY8r4Zyt8TFlfrUY+psy/z1/MlN6/SwlT
nl+ZVsGU8zfeKqdi/rnrypky/xcXSpnSlx8vZsr8M+qcZUrf3/MsU85v4jc+
pvS7in1M2f+h/BIqeovdJVT0eWWlVDzfblnGlPGLL5VRsf9jtcqYMr7JjFIq
xn+dVMqU8SfallIxvnCujym99s0+5h/7n1bMlOePGFlKxevHCJQwpa/aVMqU
599rljDl+d6DxVT0hreXUNG3T/dRcT7Tep1lyvoGnfIypT/xSxFT9v/+c16m
jD96yMuU9U3f5mVKD93pY8rzZ8QWM+V8rj1eTMX4hJU+poyfmeqjYn1veouZ
Mv7UxmKqfHw/UkrF+jqvLGPK8+fWLGfK/Md7VFAx/xN55UyZPy63gin326Vd
JVO6zyhnSm/0jwqmrC/zsQqmjJ/wYSUTvbr7bI0p+1v/m8ZEz/j2pJ8p8687
5GeiJ3Yw/Ez0uNrDg0z07HjnvzfgVsZbU4JMdE/y1QATPX2X8/PYbtFjrzk/
z+9WxmePDjPRUyZNCTPRt1yuHWair0p4O8yU+2nTLMxEH/P5s2GmnG/4pTBT
nh++O8yU+098McyU56f9PcyU3u+vYSZ6kjbEYKLHHKhnUPHPLyf2Gkz0nJtf
M5iyv5hXDabMH9AMpqyvxgdhKl6fBT8ZTNn/9WkGEz0rX9OZ8vpo2zzMRM/7
LKwzZf6x20NM9LhXo0GmzD/EH2RK/8UbZMr5vbU3SMXzg+2CTPTM6olVTDmf
A4uqmHI/a49oTBnfu0YVU56/3Cpjyv1+cn8JU8YffN/HlPPLbF7ClH7P0WKm
zH+qdhlTxlfPK2HK/Zz/sISK/f2wuZgpfcUkH1Pm/31TMRXrH1WzhCnzV37s
Y0q/8kUxU54/ddRZKvrs/T4qzu9PH/iYsv5he0uYMn+HYDkV4+duKWfK+KZ/
K6difLfXSpgyvuehEir66hvv991i/vnO+0W3f9zfcR9Tzi+1j48p4zPmn2VK
333+LFPm9z5YxJT9tXzdS8X8P004y0RP2jyhiCn9nt+8TOk7CoqYsr7xfb1U
rO/0dS9Txnvii6kYP+tcEVPG333jv6fhFuN37vIyZX9xc4qZ0l+bWsaU+2t8
vZwpveRCGVPmP9e7nCk9Nr6CKfvbZVQy0T21gxoTPfHgUo2JHqslVzHR4xJO
a0xZ/yLn57Hdomf86Hy90a2cnzemgin337+snIpuv1JGxfrye5Uy5fkLvilm
yvj550qYMn5kQilTxjcZUMaU++0+pZgp/bjz+cit7F+zvFSs7+EGXqaM7zzo
LFU+/uoVUTH/gB1epux/+J4SpvS5B8qZsv9hT5Uw0WN/qa8x0bVBjTUmuqfG
7RpT9pcyUmOip3S5x89Ej/v8sQATPev60gBT5h9xyc9Ez7k6q4op51PcuIqJ
nvFpnyomenbHA36m3N/zP1cwZX/L5mlMuZ+k5RpT9j/kgsaU/Rec1JjoiRM2
a0z0mOBMjYr1T+irMWV8Qv1yKs53/26NiV6d1MrPlPm/OFZFxeu3wwtVTLmf
jMfLmTL/kJwK6o2eHuP8/yzcosc1fkFnSh9bqjNl/gGxBlPW12mUQcXnB49t
MOX8Nzg/T+UWfVrHU2Gm3H//DRGmzP/621Emer3zU6JM2V8gP0q90Vf9+H6U
id4+d0aUib6l39YIE31MifPzZG7RU77YEWZKL58RYcr+Fn0foWJ9i6wIEz1n
2ZMRptyfNT3ClPNf/0uYiR5b3/l+rFv0hTOc83KLnpbycJQp+8/8S5SK10+D
HlEmuid+SoT53/3fBs8IVw==
   "], {{0, 0}, {300, 7}}, {0, 1}],
  AspectRatio->NCache[
    Rational[1, 2], 0.5],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellChangeTimes->{{3.7397875841532917`*^9, 3.73978765576225*^9}, {
  3.739787691675602*^9, 3.739787761456337*^9}, {3.7397886378599167`*^9, 
  3.739788898114155*^9}, {3.739792343753422*^9, 3.739792367043935*^9}, {
  3.739799968697645*^9, 3.739800138189157*^9}},
 CellLabel->
  "Out[2229]=",ExpressionUUID->"7fb27ea9-099a-4eb1-a6a5-dff39852c5e6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["n"], "Input",
 CellChangeTimes->{3.739787740332877*^9},
 CellLabel->
  "In[1054]:=",ExpressionUUID->"d17a7cb6-f978-4dcd-9b62-1b9635f4e029"],

Cell[BoxData["835"], "Output",
 CellChangeTimes->{3.739787740605728*^9},
 CellLabel->
  "Out[1054]=",ExpressionUUID->"b1dfaf36-2075-4805-a774-3c42948d03a7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", 
   RowBox[{"randomN", "[", "ds", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"s", "=", 
   RowBox[{"Normal", "[", 
    RowBox[{"ds", "[", "n", "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"p", "=", 
   RowBox[{"{", 
    RowBox[{"probabilitiesToClass", "[", 
     RowBox[{"tNet", "[", 
      RowBox[{"s", "[", "\"\<Input\>\"", "]"}], "]"}], "]"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"r", "=", 
   RowBox[{"{", 
    RowBox[{"probabilitiesToClass", "[", 
     RowBox[{"s", "[", "\"\<Output\>\"", "]"}], "]"}], "}"}]}], ";"}], "\n", 
 RowBox[{"With", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"data", "=", 
      RowBox[{"Join", "[", 
       RowBox[{"p", ",", 
        RowBox[{"{", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"White", ",", 
             RowBox[{"Opacity", "[", "0", "]"}]}], "}"}], ",", "300"}], "]"}],
          "}"}], ",", "r"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"o", "=", "150"}]}], "\[IndentingNewLine]", "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ArrayPlot", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"data", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", 
          RowBox[{"i", ";;", 
           RowBox[{"i", "+", "o"}]}]}], "]"}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"ColorFunction", "\[Rule]", "\"\<DeepSeaColors\>\""}], ",", 
       RowBox[{"AspectRatio", "->", 
        RowBox[{"1", "/", "2"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"300", "-", "o"}], ",", "1"}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.7397334100904837`*^9, 3.739733410997827*^9}, {
   3.739733578265403*^9, 3.7397335888413143`*^9}, {3.739734252111759*^9, 
   3.7397342597111197`*^9}, {3.739734964142231*^9, 3.739734995244216*^9}, {
   3.739735442204884*^9, 3.73973547264463*^9}, {3.739736029311398*^9, 
   3.739736042705422*^9}, 3.739736108165595*^9, {3.7397362480160027`*^9, 
   3.739736356880163*^9}, {3.739736393380789*^9, 3.739736413242324*^9}, 
   3.739785793195306*^9},
 CellLabel->
  "In[1029]:=",ExpressionUUID->"4dc525a2-b791-4b1a-a1f4-867a1826c799"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`i$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`i$$], 1, 150, 1}}, Typeset`size$$ = {
    360., {88., 93.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`i$258594$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`i$$, $CellContext`i$258594$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> ArrayPlot[
        Part[{{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3,
           3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
           3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1,
           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1,
           1, 1, 1, 1, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
           3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3}, {{
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}, {
            GrayLevel[1], 
            Opacity[0]}}, {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
           3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
           3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2, 2, 2, 2,
           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
          2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}}, All, 
         Span[$CellContext`i$$, $CellContext`i$$ + 150]], ColorFunction -> 
        "DeepSeaColors", AspectRatio -> 1/2], 
      "Specifications" :> {{$CellContext`i$$, 1, 150, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{405., {133., 139.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.739735407767787*^9, {3.739735448141117*^9, 3.739735479451789*^9}, {
   3.7397360475279617`*^9, 3.7397361835609303`*^9}, {3.739736249502481*^9, 
   3.7397362659767447`*^9}, 3.739736297986732*^9, {3.7397363425512466`*^9, 
   3.739736414169042*^9}, {3.73978581116252*^9, 3.739785866009016*^9}, {
   3.739787468862311*^9, 3.7397875297339487`*^9}},
 CellLabel->
  "Out[1033]=",ExpressionUUID->"cef91daf-525f-46f2-b0cb-0d6f4cdc4edd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"cm", "=", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"tNet", ",", 
     RowBox[{"Normal", "[", 
      RowBox[{"ds", "[", 
       RowBox[{"All", ",", "\"\<Output\>\""}], "]"}], "]"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.739785871235211*^9, 3.739785890244295*^9}, 
   3.7397862270573797`*^9},
 CellLabel->
  "In[1000]:=",ExpressionUUID->"9e93a026-cd6c-4cd9-be2d-cbfaead352e5"],

Cell[BoxData[
 TemplateBox[{
  "ClassifierMeasurements","mlcntclnet",
   "\"This neural network cannot be converted to a ClassifierFunction[\
\[Ellipsis]].\"",2,1000,108,22436830884809518482,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.73978589210798*^9, 3.7397862290979643`*^9},
 CellLabel->
  "During evaluation of \
In[1000]:=",ExpressionUUID->"c91ea4ff-9bcf-4e7c-a32a-925ceda21256"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.739735143631384*^9, 
  3.739735159186246*^9}},ExpressionUUID->"554af4c0-0227-4401-a144-\
f993d1cef12f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"pm", "=", 
   RowBox[{"PredictorMeasurements", "[", 
    RowBox[{"tNet", ",", 
     RowBox[{"Normal", "[", 
      RowBox[{"ds", "[", 
       RowBox[{"All", ",", "\"\<Output\>\""}], "]"}], "]"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.739785939086204*^9, 3.73978601377391*^9}, {
   3.739786044435638*^9, 3.7397860830742683`*^9}, 3.739786225962894*^9},
 CellLabel->
  "In[1001]:=",ExpressionUUID->"d3d8af9e-d471-4a4e-9bb9-1f3f9a00648f"],

Cell[BoxData[
 TemplateBox[{
  "PredictorMeasurements","wrgfunc",
   "\"The first argument should be a \\!\\(\\*RowBox[{\\\"PredictorFunction\\\
\"}]\\) instead of \\!\\(\\*RowBox[{\\\"NetGraph\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"\[LeftSkeleton]\\\", \\\"1\\\", \
\\\"\[RightSkeleton]\\\"}], \\\",\\\", RowBox[{\\\"\[LeftAssociation]\\\", \
RowBox[{\\\"\\\\\\\"Version\\\\\\\"\\\", \\\"\[Rule]\\\", \
\\\"\\\\\\\"11.3.5\\\\\\\"\\\"}], \\\"\[RightAssociation]\\\"}]}], \
\\\"]\\\"}]\\).\"",2,1001,109,22436830884809518482,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.739786044949091*^9, 3.7397860871885843`*^9}, 
   3.7397862340549803`*^9},
 CellLabel->
  "During evaluation of \
In[1001]:=",ExpressionUUID->"6ee57dd1-2a6d-4515-885f-7a4a52be6f9c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"eval", "=", 
   RowBox[{"tNet", "[", 
    RowBox[{"Normal", "[", 
     RowBox[{"ds", "[", 
      RowBox[{"All", ",", "\"\<Input\>\""}], "]"}], "]"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.739786235391408*^9, 3.739786260276477*^9}},
 CellLabel->
  "In[1003]:=",ExpressionUUID->"0b2d400f-67a6-45f0-8863-e04f0cb6725f"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.7397874646426573`*^9},
 CellLabel->
  "Out[1003]=",ExpressionUUID->"27db2a31-b364-4adc-8e85-a43f71569d0b"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1280, 687},
WindowMargins->{{0, Automatic}, {Automatic, -1}},
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 7, \
2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[583, 22, 170, 3, 69, "Chapter",ExpressionUUID->"bf92ff2c-a443-461a-a900-6af6e64d68fe"],
Cell[CellGroupData[{
Cell[778, 29, 184, 3, 67, "Section",ExpressionUUID->"da0ad7c8-ca1a-49f8-8308-01d85a6fa9f2"],
Cell[965, 34, 372, 9, 30, "Input",ExpressionUUID->"c910dcee-6712-4f54-8b8f-e9a81dfe806d"],
Cell[CellGroupData[{
Cell[1362, 47, 437, 11, 30, "Input",ExpressionUUID->"979ea97c-c917-489f-98aa-294638522b1b"],
Cell[1802, 60, 251, 6, 34, "Output",ExpressionUUID->"709a849f-2ade-41ac-b422-37c8520755d8"]
}, Open  ]],
Cell[2068, 69, 414, 9, 30, "Input",ExpressionUUID->"94e1116c-354d-4d39-8016-8825254f27b3"],
Cell[2485, 80, 292, 6, 30, "Input",ExpressionUUID->"c9600c63-2d98-443e-8286-e2eba276180c"],
Cell[2780, 88, 401, 9, 52, "Input",ExpressionUUID->"9d038370-13ee-45dc-836a-ae8119005f4f"],
Cell[3184, 99, 546, 13, 30, "Input",ExpressionUUID->"0655ee3b-dc09-46cc-8dc2-d35b95315ca6"],
Cell[3733, 114, 382, 10, 30, "Input",ExpressionUUID->"443827af-99b0-43db-b818-b5bb361e6792"],
Cell[4118, 126, 1290, 33, 52, "Input",ExpressionUUID->"2f5ced23-00ca-4675-a7f0-d07f3a6e0fdb"],
Cell[CellGroupData[{
Cell[5433, 163, 238, 4, 30, "Input",ExpressionUUID->"717fee32-50d4-4479-b17e-a5452bf86abe"],
Cell[5674, 169, 218, 4, 34, "Output",ExpressionUUID->"2e68c552-e1a2-4927-8ea9-326d8c4343a4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5929, 178, 623, 15, 52, "Input",ExpressionUUID->"dbf52517-3102-4cc7-9cc7-afb465ea2aa9"],
Cell[6555, 195, 5978, 141, 56, "Output",ExpressionUUID->"2da83e90-7c12-48c7-bd91-9c46da0774b7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12570, 341, 882, 23, 30, "Input",ExpressionUUID->"e2954268-117b-4881-a981-45c1d0f61a42"],
Cell[13455, 366, 54969, 1083, 507, "Output",ExpressionUUID->"bb1668d9-4c95-4117-84b7-842b971c7e95"]
}, Open  ]],
Cell[68439, 1452, 589, 17, 52, "Input",ExpressionUUID->"7f8c66ff-87a4-49f6-9328-48ccc34e13b2"],
Cell[69031, 1471, 941, 26, 30, "Input",ExpressionUUID->"029ca8b4-68d9-443a-a0dd-4f0af5524998"],
Cell[CellGroupData[{
Cell[69997, 1501, 339, 9, 30, "Input",ExpressionUUID->"bcda916f-3de9-454b-ae0c-5fd77fef8b48"],
Cell[70339, 1512, 226, 5, 34, "Output",ExpressionUUID->"3b03dacd-1b58-4ca8-807a-235bd48d35a8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[70602, 1522, 215, 4, 30, "Input",ExpressionUUID->"d14d9f52-f1a8-4493-86e0-8729079e6922"],
Cell[70820, 1528, 213, 5, 34, "Output",ExpressionUUID->"2ec50265-d418-4de8-82ad-2eb0fd45f8c3"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[71082, 1539, 170, 3, 53, "Section",ExpressionUUID->"910293dd-5502-4717-91c1-892c790b064c"],
Cell[71255, 1544, 3875, 99, 325, "Input",ExpressionUUID->"7966f479-0c33-4a7b-a85e-4d7f05782701"],
Cell[75133, 1645, 353, 8, 30, "Input",ExpressionUUID->"3d307f31-0383-42bd-a24a-35f1bfe13d5a"]
}, Closed]],
Cell[CellGroupData[{
Cell[75523, 1658, 232, 6, 53, "Section",ExpressionUUID->"32005acb-23f8-4373-8abb-47833a0e8e36"],
Cell[75758, 1666, 615, 15, 52, "Input",ExpressionUUID->"05f40f07-9184-4fc9-a5f0-a79022d84db2"],
Cell[CellGroupData[{
Cell[76398, 1685, 1465, 30, 52, "Input",ExpressionUUID->"ef33f590-0ff0-4dbc-ac8f-bbc23cf5ba44"],
Cell[77866, 1717, 436, 6, 34, "Output",ExpressionUUID->"25cc06ec-8e78-4e87-997d-7470a07fb9a8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[78351, 1729, 171, 3, 67, "Section",ExpressionUUID->"5b0f7b20-bc29-49e6-aa96-a9a6858f1f49"],
Cell[78525, 1734, 488, 12, 30, "Input",ExpressionUUID->"e6ea9acc-c0bd-442a-bd0e-bcb19c5c9024"],
Cell[CellGroupData[{
Cell[79038, 1750, 625, 15, 30, "Input",ExpressionUUID->"0faf8990-419d-4f81-a293-ee9e14dae828"],
Cell[79666, 1767, 318, 4, 34, "Output",ExpressionUUID->"35922237-a8f7-48b7-b9b0-bd48c5a568c7"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[80045, 1778, 156, 3, 69, "Chapter",ExpressionUUID->"48b53a05-b383-4bb3-a4ef-a1d498bfc24d"],
Cell[80204, 1783, 441, 11, 30, "Input",ExpressionUUID->"6289fa20-f269-4c8f-9671-070bd3384d47"],
Cell[80648, 1796, 436, 13, 30, "Input",ExpressionUUID->"07b1fc45-57f2-4b90-904c-dd2c0d2e74f6"],
Cell[CellGroupData[{
Cell[81109, 1813, 226, 4, 30, "Input",ExpressionUUID->"9bc79d75-dabc-4326-a8b3-0eaa46619fdf"],
Cell[81338, 1819, 175, 2, 34, "Output",ExpressionUUID->"d12a007e-6acd-4c3e-8043-72f66cd732fe"]
}, Open  ]],
Cell[CellGroupData[{
Cell[81550, 1826, 163, 3, 67, "Section",ExpressionUUID->"58db24ba-d9cc-43c1-91da-40dd48612ff3"],
Cell[81716, 1831, 154, 3, 30, "Input",ExpressionUUID->"5f3e4da9-c6c1-4dac-85ab-cca9e33bbe9a"],
Cell[81873, 1836, 1465, 39, 115, "Input",ExpressionUUID->"0191d131-cb13-47ea-883a-72360a764080"],
Cell[83341, 1877, 1336, 37, 136, "Input",ExpressionUUID->"faca2876-30cb-4185-af1a-a89977d4d6c4"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[84726, 1920, 173, 3, 98, "Title",ExpressionUUID->"79531f19-5d82-4a89-9ec6-31b97d29f044"],
Cell[CellGroupData[{
Cell[84924, 1927, 160, 3, 67, "Section",ExpressionUUID->"89171e11-dc7f-4ff7-8996-8c87fee60ac6"],
Cell[CellGroupData[{
Cell[85109, 1934, 437, 9, 30, "Input",ExpressionUUID->"85f164a4-acf1-46e1-b40b-b3d96b2f32e6"],
Cell[85549, 1945, 272114, 5044, 454, "Output",ExpressionUUID->"a0f269e3-f4ff-4a15-85ef-3ef0f222a7fc"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[357712, 6995, 213, 4, 67, "Section",ExpressionUUID->"16b03038-7b1b-4c98-b433-066235870d02"],
Cell[357928, 7001, 3139, 71, 346, "Input",ExpressionUUID->"a71ff13b-2d85-4388-8178-a25e917b5851"],
Cell[361070, 7074, 277, 5, 30, "Input",ExpressionUUID->"c58d582d-68c3-415f-a67f-a2cdfdccdff5"]
}, Closed]],
Cell[CellGroupData[{
Cell[361384, 7084, 215, 4, 53, "Section",ExpressionUUID->"eaa6b792-2988-4215-969e-473c6cd2f0a3"],
Cell[361602, 7090, 7129, 149, 913, "Input",ExpressionUUID->"570c76c5-d51c-49f8-a96f-913652e9590a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[368768, 7244, 161, 3, 67, "Section",ExpressionUUID->"3a4a1602-46f3-4a2f-82af-d38c507a14fc"],
Cell[CellGroupData[{
Cell[368954, 7251, 10841, 233, 871, "Input",ExpressionUUID->"c20176ee-0a6c-4938-85c2-384f6225b031"],
Cell[379798, 7486, 321253, 6092, 77, "Output",ExpressionUUID->"19e2faac-8886-42d5-8b23-f580bb6739ce"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[701100, 13584, 151, 3, 67, "Section",ExpressionUUID->"a0e0327b-4f87-41ac-8413-dbf24362d29e"],
Cell[701254, 13589, 262, 5, 30, "Input",ExpressionUUID->"8a87b8db-ada4-44cf-a57e-3dfa0d10cc0d"],
Cell[CellGroupData[{
Cell[701541, 13598, 899, 16, 30, "Input",ExpressionUUID->"2641428d-74d8-41e9-a5ee-b65bfe28dde1"],
Cell[702443, 13616, 565, 9, 34, "Output",ExpressionUUID->"fc505867-5dbf-491b-a552-7291b6c9602f"]
}, Open  ]],
Cell[703023, 13628, 531, 13, 30, "Input",ExpressionUUID->"93daba4e-06d3-4d43-aa9a-05b76834ccc8"],
Cell[CellGroupData[{
Cell[703579, 13645, 313, 6, 30, "Input",ExpressionUUID->"702fadb5-f3cc-4691-8136-9d5356ff12fe"],
Cell[703895, 13653, 625, 14, 37, "Output",ExpressionUUID->"046f8951-e60d-4914-99e1-83f28be4f6a6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[704557, 13672, 335, 8, 30, "Input",ExpressionUUID->"7858fdb8-5a00-4a7f-9e8d-34a1be46e629"],
Cell[704895, 13682, 316472, 5963, 77, "Output",ExpressionUUID->"3c401119-c79d-4245-a2e5-14afae8be4df"]
}, Open  ]],
Cell[1021382, 19648, 432, 12, 30, "Input",ExpressionUUID->"e6986eb4-151d-4f94-88b2-67131c428778"],
Cell[CellGroupData[{
Cell[1021839, 19664, 1146, 31, 94, "Input",ExpressionUUID->"ab6eb204-e2f8-43a1-be0a-26f5be03a5cc"],
Cell[1022988, 19697, 300, 5, 34, "Output",ExpressionUUID->"4a838509-4a2e-4b5b-b229-4aa39bfc528e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1023325, 19707, 1343, 37, 157, "Input",ExpressionUUID->"988831a2-4fbd-4c8e-81d4-9db834bb0df0"],
Cell[1024671, 19746, 8386, 144, 198, "Output",ExpressionUUID->"7fb27ea9-099a-4eb1-a6a5-dff39852c5e6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1033094, 19895, 153, 3, 30, "Input",ExpressionUUID->"d17a7cb6-f978-4dcd-9b62-1b9635f4e029"],
Cell[1033250, 19900, 156, 3, 34, "Output",ExpressionUUID->"b1dfaf36-2075-4805-a774-3c42948d03a7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1033443, 19908, 2448, 61, 346, "Input",ExpressionUUID->"4dc525a2-b791-4b1a-a1f4-867a1826c799"],
Cell[1035894, 19971, 20391, 668, 291, "Output",ExpressionUUID->"cef91daf-525f-46f2-b0cb-0d6f4cdc4edd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1056322, 20644, 439, 12, 30, "Input",ExpressionUUID->"9e93a026-cd6c-4cd9-be2d-cbfaead352e5"],
Cell[1056764, 20658, 413, 9, 24, "Message",ExpressionUUID->"c91ea4ff-9bcf-4e7c-a32a-925ceda21256"]
}, Open  ]],
Cell[1057192, 20670, 152, 3, 30, "Input",ExpressionUUID->"554af4c0-0227-4401-a144-f993d1cef12f"],
Cell[CellGroupData[{
Cell[1057369, 20677, 483, 12, 30, "Input",ExpressionUUID->"d3d8af9e-d471-4a4e-9bb9-1f3f9a00648f"],
Cell[1057855, 20691, 776, 15, 24, "Message",ExpressionUUID->"6ee57dd1-2a6d-4515-885f-7a4a52be6f9c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1058668, 20711, 363, 10, 30, "Input",ExpressionUUID->"0b2d400f-67a6-45f0-8863-e04f0cb6725f"],
Cell[1059034, 20723, 163, 3, 34, "Output",ExpressionUUID->"27db2a31-b364-4adc-8e85-a43f71569d0b"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

